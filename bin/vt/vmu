#!/usr/bin/env bash

set -euo pipefail

trap 'echo "Error on line $LINENO" >&2; exit 1' ERR

cmd_vmu() {
  virsh --connect qemu:///session "$@"
}

check_prerequisites() {
  vm_check_prerequisites

  if ! has_cmd vmu-create; then
    fail "vmu-create is not in PATH."
    exit 1
  fi
}

usage() {
  cat <<EOF
Usage: $0 <command> [vm-name]

Manage VMs created with vmu-create script.

COMMANDS:
    list                List all VMs
    status <vm-name>    Show VM status and info
    create  ARGS        Create a new VM, with same ARGS as vmu-create
    autostart <vm-name> Set VM to start on boot
    start <vm-name>     Start a VM
    stop <vm-name>      Gracefully stop a VM
    restart <vm-name>   Restart a VM
    destroy <vm-name>   Force stop a VM
    delete <vm-name>    Delete a VM completely
    console <vm-name>   Connect to VM console
    show-ip <vm-name>   Show VM IP address
    logs <vm-name>      Show cloud-init logs
    cmd <virsh-args>    Run virsh command with qemu:///session connection

EXAMPLES:
    $0 list                    # List all VMs
    $0 show-ip debian          # Show IP address of 'debian' VM
    $0 status debian           # Show status of 'debian' VM
    $0 create debian           # Create debian VM
    $0 start debian            # Start 'debian' VM
    $0 delete old-vm           # Delete 'old-vm' completely
EOF
}

status_vmu() {
  local vm_name="$1"

  vm_check_exists "$vm_name" || return 1

  slog "Status for VM '$vm_name':"
  echo
  virsh --connect qemu:///session dominfo "$vm_name"
  echo

  slog "Network interfaces:"
  virsh --connect qemu:///session domifaddr --source agent "$vm_name" || warn "Could not get IP address (VM may be stopped)"
  echo

  slog "Disk usage:"
  virsh --connect qemu:///session domblklist "$vm_name"
}

autostart_vmu() {
  virsh --connect qemu:///session autostart "$1"
}

start_vmu() {
  virsh --connect qemu:///session start "$1"
}

shutdown_vmu() {
  virsh --connect qemu:///session shutdown "$1"
}

reboot_vmu() {
  virsh --connect qemu:///session reboot "$1"
}

force_stop_vmu() {
  virsh --connect qemu:///session destroy "$1"
}

delete_vmu() {
  virsh --connect qemu:///session destroy "$1"
  virsh --connect qemu:///session undefine "$1"

  local vda
  vda=$(virsh --connect qemu:///session domblklist "$1" | grep vda | awk '{print $2}')
  if [[ -n "$vda" ]]; then
    local dir
    dir=$(dirname "$vda")
    echo "Deleting $dir"
    trash "$dir"
  fi
}

logs_vmu() {
  sudo virt-cat -d "$vm_name" /var/log/cloud-init.log
}

console_vmu() {
  virsh --connect qemu:///session console "$1"
}

show_ip_vmu() {
  virsh --connect qemu:///session domifaddr --source agent "$1"
}

list_vmu() {
  virsh --connect qemu:///session list --all
}

main() {
  if [[ $# -eq 0 ]]; then
    usage
    exit 1
  fi

  local command, vm_name
  command="$1"
  vm_name="${2:-}"

  virt_check_prerequisites

  case "$command" in
  list | ls)
    list_vmu
    ;;
  cmd)
    cmd_vmu "${@:2}"
    ;;
  status | info)
    status_vmu "$vm_name"
    ;;
  create | new)
    vmu-create "${@:2}"
    ;;
  autostart)
    autostart_vmu "$vm_name"
    ;;
  start | boot)
    start_vmu "$vm_name"
    ;;
  stop | shutdown)
    shutdown_vmu "$vm_name"
    ;;
  restart | reboot)
    reboot_vmu "$vm_name"
    ;;
  destroy | kill | force-stop)
    force_stop_vmu "$vm_name"
    ;;
  delete | rm)
    delete_vmu "$vm_name"
    ;;
  console)
    console_vmu "$vm_name"
    ;;
  show-ip)
    show_ip_vmu "$vm_name"
    ;;
  logs)
    logs_vmu "$vm_name"
    ;;
  --help | -h)
    usage
    ;;
  *)
    fail "Unknown command: $command"
    usage
    exit 1
    ;;
  esac
}

main "$@"

#!/bin/bash

# shellcheck disable=SC1091

set -euo pipefail

source "$(dirname "$0")/ict-utils"
source "$(dirname "$0")/tmux-utils"

ICT_DISTRO_LIST=("debian" "ubuntu" "fedora" "arch" "tumbleweed")

SESSION_NAME="ICT_TMUX"

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Manage a tmux session with SSH connections to Incus LXC containers.

Options:
  create    Create a new tmux session with SSH connections to containers (default if no option)
  attach    Attach to an existing session
  detach    Detach from the current session
  destroy   Kill the tmux session
  help      Display this help message

Examples:
  $(basename "$0")           # Create session or attach if exists
  $(basename "$0") create    # Force create a new session
  $(basename "$0") attach    # Attach to existing session
  $(basename "$0") detach    # Detach from current session
  $(basename "$0") destroy   # Kill the session
EOF
}

create_session() {
    local force="${1:-false}"

    if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        if [[ "$force" == "true" ]]; then
            slog "Killing existing session and creating a new one..."
            tmux kill-session -t "$SESSION_NAME"
        else
            slog "Session '$SESSION_NAME' already exists, attaching..."
            tmux attach-session -t "$SESSION_NAME"
            return 0
        fi
    fi

    for ct in "${ICT_DISTRO_LIST[@]}"; do
        if ! ict_exists "${ct}-ict"; then
            echo "VM '${ct}-ict' is not running. Starting it..."
            if ! ivm start "${ct}-ict"; then
                fail "Failed to start container '${ct}-ict'. Please check its status."
                return 1
            fi
        fi
    done

    slog "Creating tmux session with SSH connections to Incus LXC containers..."

    local -a cmds=()
    for ct in "${ICT_DISTRO_LIST[@]}"; do
        cmds+=("ict ssh ${ct}-ict")
    done

    if ! tmux_grid "$SESSION_NAME" "${cmds[@]}"; then
        fail "Failed to create tmux session '$SESSION_NAME' with SSH to containers."
        return 1
    fi
}

attach_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist. Creating it..."
        create_session
        return 0
    fi

    slog "Attaching to session '$SESSION_NAME'..."
    tmux attach-session -t "$SESSION_NAME"
}

detach_session() {
    if [[ -z "${TMUX:-}" ]]; then
        fail "Not currently in a tmux session"
        exit 1
    fi

    slog "Detaching from tmux session..."
    tmux detach-client
}

destroy_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist"
        return 0
    fi

    slog "Destroying session '$SESSION_NAME'..."
    tmux kill-session -t "$SESSION_NAME"
    success "Session destroyed"
}

main() {
    ict_check_prerequisites
    check_tmux

    local command="${1:-}"

    case "$command" in
    create)
        create_session "true"
        ;;
    attach)
        attach_session
        ;;
    detach)
        detach_session
        ;;
    destroy)
        destroy_session
        ;;
    help | --help | -h)
        usage
        ;;
    "")
        create_session
        ;;
    *)
        fail "Unknown option: $command"
        usage
        exit 1
        ;;
    esac
}

main "$@"

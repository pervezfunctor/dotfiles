#!/bin/bash

set -euo pipefail

# shellcheck disable=SC1091
source "$(dirname "$0")/ict-utils"

UBUNTU_CT="ubuntu-ct"
FEDORA_CT="fedora-ct"
ARCH_CT="arch-ct"
DEBIAN_CT="debian-ct"
TUMBLEWEED_CT="tumbleweed-ct"

UBUNTU_USER="ubuntu"
FEDORA_USER="fedora"
ARCH_USER="arch"
DEBIAN_USER="debian"
TUMBLEWEED_USER="opensuse"

SESSION_NAME="incus-containers"

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Manage a tmux session with SSH connections to Incus LXC containers.

Options:
  create    Create a new tmux session with SSH connections to containers (default if no option)
  attach    Attach to an existing session
  detach    Detach from the current session
  destroy   Kill the tmux session
  help      Display this help message

Examples:
  $(basename "$0")           # Create session or attach if exists
  $(basename "$0") create    # Force create a new session
  $(basename "$0") attach    # Attach to existing session
  $(basename "$0") detach    # Detach from current session
  $(basename "$0") destroy   # Kill the session
EOF
}

create_session() {
    local force="${1:-false}"

    if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        if [[ "$force" == "true" ]]; then
            slog "Killing existing session and creating a new one..."
            tmux kill-session -t "$SESSION_NAME"
        else
            slog "Session '$SESSION_NAME' already exists, attaching..."
            tmux attach-session -t "$SESSION_NAME"
            return
        fi
    fi

    for container in "$UBUNTU_CT" "$FEDORA_CT" "$ARCH_CT" "$DEBIAN_CT" "$TUMBLEWEED_CT"; do
        check_container "$container" || return 1
    done

    slog "Creating tmux session with SSH connections to Incus LXC containers..."

    UBUNTU_CMD=$(ict ssh "$UBUNTU_CT" "$UBUNTU_USER")
    FEDORA_CMD=$(ict ssh "$FEDORA_CT" "$FEDORA_USER")
    ARCH_CMD=$(ict ssh "$ARCH_CT" "$ARCH_USER")
    DEBIAN_CMD=$(ict ssh "$DEBIAN_CT" "$DEBIAN_USER")
    TUMBLEWEED_CMD=$(ict ssh "$TUMBLEWEED_CT" "$TUMBLEWEED_USER")

    # Create a new session with the first container
    tmux new-session -d -s "$SESSION_NAME" -n "Containers" "$UBUNTU_CMD"

    # Split the window for the remaining containers
    tmux split-window -h -t "$SESSION_NAME:0.0" "$FEDORA_CMD"
    tmux split-window -v -t "$SESSION_NAME:0.0" "$ARCH_CMD"
    tmux split-window -v -t "$SESSION_NAME:0.1" "$DEBIAN_CMD"

    # Create a second window for the remaining containers
    tmux new-window -t "$SESSION_NAME:1" -n "More" "$TUMBLEWEED_CMD"

    # Set layout for both windows
    tmux select-layout -t "$SESSION_NAME:0" tiled
    tmux select-layout -t "$SESSION_NAME:1" even-horizontal

    # Start with the first window
    tmux select-window -t "$SESSION_NAME:0"

    tmux attach-session -t "$SESSION_NAME"

    success "Connected to all containers in tmux session"
}

attach_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist. Creating it..."
        create_session
        return
    fi

    slog "Attaching to session '$SESSION_NAME'..."
    tmux attach-session -t "$SESSION_NAME"
}

detach_session() {
    if [[ -z "${TMUX:-}" ]]; then
        fail "Not currently in a tmux session"
        exit 1
    fi

    slog "Detaching from tmux session..."
    tmux detach-client
}

destroy_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist"
        return
    fi

    slog "Destroying session '$SESSION_NAME'..."
    tmux kill-session -t "$SESSION_NAME"
    success "Session destroyed"
}

main() {
    check_prerequisites
    check_tmux

    local command="${1:-}"

    case "$command" in
    create)
        create_session "true"
        ;;
    attach)
        attach_session
        ;;
    detach)
        detach_session
        ;;
    destroy)
        destroy_session
        ;;
    help | --help | -h)
        usage
        ;;
    "")
        create_session
        ;;
    *)
        fail "Unknown option: $command"
        usage
        exit 1
        ;;
    esac
}

main "$@"

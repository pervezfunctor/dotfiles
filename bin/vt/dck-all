#!/bin/bash

set -euo pipefail

# shellcheck disable=SC1091
source "$(dirname "$0")/dck-utils"

DCK_DISTRO_LIST=("ubuntu" "debian" "arch" "fedora" "rocky" "tw" "alpine" "centos" "nix")

check_dck() {
  if ! has_cmd docker; then
    fail "docker is not installed. Please install it first."
    exit 1
  fi
}

dck_exists() {
  local container_name="$1"
  docker ps -a --format '{{.Names}}' | grep -q "^$container_name$"
}

create_all() {
  check_dck

  slog "Creating Docker containers for various Linux distributions..."

  for d in "${DCK_DISTRO_LIST[@]}"; do
    if ! dck_exists "$d"; then
      slog "Creating container for $d..."
      dck create "$d" "$d"
    else
      slog "Container for $d already exists, skipping..."
    fi
  done

  slog "Listing created containers:"
  docker ps -a

  success "All containers created successfully!"
  slog "You can access them using: docker exec -it <container-name> /bin/bash"
}

delete_all() {
  check_dck

  slog "Deleting all containers..."
  for ct in "${DCK_DISTRO_LIST[@]}"; do
    if dck_exists "$ct"; then
      slog "Deleting container: $ct"
      dck delete "$ct"
    else
      slog "Container $ct does not exist, skipping..."
    fi
  done
  success "All containers deleted successfully!"
}

start_all() {
  check_dck

  slog "Starting all containers..."
  for ct in "${DCK_DISTRO_LIST[@]}"; do
    if dck_exists "$ct"; then
      slog "Starting container: $ct"
      dck start "$ct"
    else
      slog "Container $ct does not exist, skipping..."
    fi
  done
  success "All containers started successfully!"
}

stop_all() {
  check_dck

  slog "Stopping all containers..."
  for ct in "${DCK_DISTRO_LIST[@]}"; do
    if dck_exists "$ct"; then
      slog "Stopping container: $ct"
      dck stop "$ct"
    else
      slog "Container $ct does not exist, skipping..."
    fi
  done
  success "All containers stopped successfully!"
}

restart_all() {
  check_dck

  slog "Restarting all containers..."
  for ct in "${DCK_DISTRO_LIST[@]}"; do
    if dck_exists "$ct"; then
      slog "Restarting container: $ct"
      dck restart "$ct"
      sleep 1
    else
      slog "Container $ct does not exist, skipping..."
    fi
  done
  success "All containers restarted successfully!"
}

usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTION]

Docker containers for various Linux distributions.

Options:
  create    # Create all Docker containers (default if no option)
  delete    # Delete all Docker containers
  start     # Start all Docker containers
  stop      # Stop all Docker containers
  restart   # Restart all Docker containers
  --help    # Display this help message

Examples:
  $(basename "$0")           # Create containers or attach if exists
  $(basename "$0") create    # Force create all containers
  $(basename "$0") delete    # Delete all containers
  $(basename "$0") start     # Start all containers
  $(basename "$0") stop      # Stop all containers
  $(basename "$0") restart   # Restart all containers
EOF
}

main() {
  check_dck

  if [[ "$1" == "delete" ]]; then
    delete_all
  elif [[ "$1" == "start" ]]; then
    start_all
  elif [[ "$1" == "stop" ]]; then
    stop_all
  elif [[ "$1" == "restart" ]]; then
    restart_all
  elif [[ "$1" == "--help" || "$1" == "help" || "$1" == "help" ]]; then
    usage
    exit 0
  elif [[ $# -eq 0 ]] || [[ "$1" == "create" ]]; then
    create_all
  else
    fail "Unknown option: $1"
    usage
    exit 1
  fi
}

main "$@"

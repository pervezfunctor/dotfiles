#!/usr/bin/env bash

# VM Creation Script with Whiptail TUI
# Creates KVM/QEMU virtual machines with user-friendly interface

set -euo pipefail # Exit on error, undefined vars, pipe failures

# Global variables for cleanup
VM_BEING_CREATED=""
DISK_BEING_CREATED=""

# Function to display error messages and exit
fail() {
  echo "Error: $1" >&2
  cleanup_on_error
  exit 1
}

# Function to handle user cancellation
user_cancelled() {
  echo "Operation cancelled by user." >&2
  cleanup_on_error
  exit 130 # Standard exit code for SIGINT/cancelled operation
}

# Function to cleanup on error/cancellation
cleanup_on_error() {

  # If VM creation was in progress, try to clean up
  if [ -n "$VM_BEING_CREATED" ]; then
    echo "Cleaning up partially created VM '$VM_BEING_CREATED'..." >&2
    virsh destroy "$VM_BEING_CREATED" 2>/dev/null || true
    virsh undefine "$VM_BEING_CREATED" --remove-all-storage 2>/dev/null || true
  fi

  # Remove disk if it was being created
  if [ -n "$DISK_BEING_CREATED" ] && [ -f "$DISK_BEING_CREATED" ]; then
    echo "Removing partially created disk '$DISK_BEING_CREATED'..." >&2
    rm -f "$DISK_BEING_CREATED" 2>/dev/null || true
  fi
}

# Set up signal handlers for clean cancellation
trap cleanup_on_error EXIT ERR
trap user_cancelled SIGINT SIGTERM

# Check for required commands
check_dependencies() {
  local missing_deps=()

  if ! command -v whiptail &>/dev/null; then
    missing_deps+=("whiptail (install with: apt install whiptail or dnf install newt)")
  fi

  if ! command -v virt-install &>/dev/null; then
    missing_deps+=("virt-install (install with: apt install virtinst or dnf install virt-install)")
  fi

  if ! command -v virsh &>/dev/null; then
    missing_deps+=("virsh (install with: apt install libvirt-clients or dnf install libvirt-client)")
  fi

  if [ ${#missing_deps[@]} -gt 0 ]; then
    echo "Missing dependencies:" >&2
    printf '%s\n' "${missing_deps[@]}" >&2
    exit 1
  fi

  # Check if libvirt daemon is running
  if ! virsh list &>/dev/null 2>&1; then
    echo "Error: libvirtd service is not running or not accessible." >&2
    echo "Try one of the following:" >&2
    echo "  - Start service: sudo systemctl start libvirtd" >&2
    echo "  - Add user to libvirt group: sudo usermod -a -G libvirt \$USER" >&2
    echo "  - Check if virtualization is enabled in BIOS" >&2
    exit 1
  fi
}

# Function to validate numeric input with retry loop
get_valid_number() {
  local prompt="$1"
  local default="$2"
  local min_val="${3:-1}"
  local field_name="$4"
  local width="${5:-60}"

  while true; do
    local value
    value=$(safe_whiptail_input whiptail --inputbox "$prompt" 10 "$width" "$default")
    check_cancelled

    if [[ "$value" =~ ^[0-9]+$ ]] && [ "$value" -ge "$min_val" ]; then
      echo "$value"
      return 0
    else
      whiptail --msgbox "Invalid $field_name: '$value'\nMust be a number >= $min_val" 10 50
      default="$value" # Keep the invalid input as default for correction
    fi
  done
}

# Function to get valid VM name with retry loop
get_valid_vm_name() {
  local default="my-vm"

  while true; do
    local vm_name
    vm_name=$(safe_whiptail_input whiptail --inputbox "Enter VM Name (alphanumeric, hyphens, underscores only):" 10 60 "$default")
    check_cancelled

    if [[ -n "$vm_name" && "$vm_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
      # Check if VM already exists
      if virsh list --all --name 2>/dev/null | grep -q "^$vm_name$"; then
        safe_whiptail_yesno whiptail --yesno "VM '$vm_name' already exists. Use this name anyway?" 10 60
        local yesno_result=$?
        if [ $yesno_result -eq 0 ]; then
          echo "$vm_name"
          return 0
        elif [ $yesno_result -eq 1 ]; then
          # User said "No", continue the loop
          default="$vm_name"
        else
          # User cancelled (ESC)
          check_cancelled
        fi
      else
        echo "$vm_name"
        return 0
      fi
    else
      whiptail --msgbox "Invalid VM Name: '$vm_name'\nMust contain only letters, numbers, hyphens, and underscores" 10 60
      default="$vm_name" # Keep the invalid input as default for correction
    fi
  done
}

# Function to get valid file path with retry loop
get_valid_file_path() {
  local prompt="$1"
  local default="$2"
  local optional="$3" # "yes" if file is optional
  local width="${4:-70}"

  while true; do
    local file_path
    file_path=$(safe_whiptail_input whiptail --inputbox "$prompt" 10 "$width" "$default")
    check_cancelled

    # If empty and optional, that's fine
    if [ -z "$file_path" ] && [ "$optional" = "yes" ]; then
      echo "$file_path"
      return 0
    fi

    # If not empty, validate
    if [ -n "$file_path" ]; then
      if [ -f "$file_path" ]; then
        if [ -r "$file_path" ]; then
          echo "$file_path"
          return 0
        else
          whiptail --msgbox "File is not readable: '$file_path'\nPlease check permissions." 10 60
        fi
      else
        whiptail --msgbox "File not found: '$file_path'\nPlease enter a valid file path." 10 60
      fi
      default="$file_path" # Keep path for user to correct
    elif [ "$optional" != "yes" ]; then
      whiptail --msgbox "File path cannot be empty." 10 50
    fi
  done
}

# Function to get valid OS variant with suggestions
get_valid_os_variant() {
  local default="generic"

  while true; do
    local os_variant
    os_variant=$(safe_whiptail_input whiptail --inputbox "Enter OS Variant:\n(Examples: ubuntu22.04, fedora39, centos8, debian11, win10)\nUse 'generic' if unsure:" 12 70 "$default")
    check_cancelled

    if [ -n "$os_variant" ]; then
      # Check if osinfo-query is available and validate
      if command -v osinfo-query &>/dev/null; then
        if osinfo-query os | grep -qi "$os_variant" || [ "$os_variant" = "generic" ]; then
          echo "$os_variant"
          return 0
        else
          safe_whiptail_yesno whiptail --yesno "OS variant '$os_variant' not found in database.\nUse it anyway?" 10 60
          local yesno_result=$?
          if [ $yesno_result -eq 0 ]; then
            echo "$os_variant"
            return 0
          elif [ $yesno_result -eq 1 ]; then
            # User said "No", continue the loop
            default="$os_variant"
          else
            # User cancelled (ESC)
            check_cancelled
          fi
        fi
      else
        # No validation possible, accept any non-empty value
        echo "$os_variant"
        return 0
      fi
    else
      whiptail --msgbox "OS Variant cannot be empty." 10 50
    fi
  done
}

# Function to get custom network config with validation
get_custom_network_config() {
  local default="network=default"

  while true; do
    local config
    config=$(safe_whiptail_input whiptail --inputbox "Enter network configuration:\n(Examples: network=default, bridge=br0, network=mynet)" 10 70 "$default")
    check_cancelled

    if [[ -n "$config" && "$config" =~ ^[a-zA-Z0-9_=-]+$ ]]; then
      echo "$config"
      return 0
    else
      whiptail --msgbox "Invalid network configuration: '$config'\nUse format like: network=name or bridge=name" 10 60
      default="$config"
    fi
  done
}

# Function to get available OS variants
get_os_variants() {
  if command -v osinfo-query &>/dev/null; then
    # Get common OS variants, limit to reasonable number for whiptail
    osinfo-query os | grep -E "(ubuntu|fedora|centos|debian|rhel|opensuse)" | head -10 | awk '{print $1}' || echo "generic"
  else
    echo "generic"
  fi
}

# Function to validate file path
validate_file() {
  local file_path="$1"
  local description="${2:-File}"

  if [ -n "$file_path" ]; then
    if [ ! -f "$file_path" ]; then
      fail "$description not found: '$file_path'"
    elif [ ! -r "$file_path" ]; then
      fail "$description not readable: '$file_path'"
    fi
  fi
}

# Function to safely get whiptail input with cancel handling
safe_whiptail_input() {
  local result
  result=$("$@" 3>&1 1>&2 2>&3)
  local exit_code=$?

  if [ $exit_code -ne 0 ]; then
    return $exit_code
  fi

  echo "$result"
  return 0
}

# Function to safely get whiptail menu/checklist with cancel handling
safe_whiptail_menu() {
  local result
  result=$("$@" 3>&1 1>&2 2>&3)
  local exit_code=$?

  if [ $exit_code -ne 0 ]; then
    return $exit_code
  fi

  echo "$result"
  return 0
}

# Function to safely get yes/no confirmation
safe_whiptail_yesno() {
  local exit_code

  "$@"
  exit_code=$?

  return $exit_code
}

# Function to check if last whiptail operation was cancelled
check_cancelled() {
  local exit_code=$?
  if [ $exit_code -ne 0 ]; then
    echo "Operation cancelled by user." >&2
    cleanup_on_error
    exit 130
  fi
}

# Check dependencies first
check_dependencies

echo "VM Creation Wizard"
echo "=================="

# --- Whiptail TUI for variable input ---

# VM Name
VM_NAME=$(get_valid_vm_name)

# Set global variable for cleanup
VM_BEING_CREATED="$VM_NAME"

# RAM in MB
RAM_MB=$(get_valid_number "Enter RAM in MB:" "2048" 512 "RAM")

# VCPUs
max_cpus=$(nproc 2>/dev/null || echo "1")
VCPUS=$(get_valid_number "Enter VCPUs (max available: $max_cpus):" "2" 1 "VCPUs")
if [ "$VCPUS" -gt "$max_cpus" ]; then
  whiptail --msgbox "Warning: You specified $VCPUS vCPUs but system only has $max_cpus CPUs.\nThis may cause performance issues." 10 70
fi

# OS Variant
OS_VARIANT=$(get_valid_os_variant)

# Network Configuration
NETWORK_CONFIG=$(safe_whiptail_menu whiptail --menu "Choose Network Configuration:" 15 70 4 \
  "network=default" "Default NAT network" \
  "bridge=virbr0" "Bridge to virbr0" \
  "network=none" "No network (isolated)" \
  "custom" "Enter custom configuration")
check_cancelled

if [ "$NETWORK_CONFIG" = "custom" ]; then
  NETWORK_CONFIG=$(get_custom_network_config)
fi

# Disk Size in GB
DISK_SIZE_GB=$(get_valid_number "Enter Disk Size in GB:" "20" 1 "Disk Size")

# Disk format choice
DISK_FORMAT=$(safe_whiptail_menu whiptail --menu "Choose Disk Format:" 15 60 2 \
  "qcow2" "QCOW2 (recommended, supports snapshots)" \
  "raw" "Raw (better performance, no snapshots)")
check_cancelled

# ISO Path (optional)
ISO_PATH=$(get_valid_file_path "Enter path to ISO file (leave empty for no ISO):" "" "yes")

# Boot method if no ISO
BOOT_METHOD="cdrom"
if [ -z "$ISO_PATH" ]; then
  BOOT_METHOD=$(safe_whiptail_menu whiptail --menu "No ISO specified. Choose boot method:" 15 60 2 \
    "network" "Network boot (PXE)" \
    "import" "Import existing disk (no installation)")
  check_cancelled
fi

# Graphics Option
GRAPHICS_CHOICE=$(safe_whiptail_menu whiptail --menu "Choose Graphics Option:" 15 70 4 \
  "spice" "SPICE (recommended for desktop VMs)" \
  "vnc" "VNC (universal compatibility)" \
  "virgl" "Virtio GPU with Virgl (3D acceleration)" \
  "headless" "No graphical output (server VMs)")
check_cancelled

# VNC password if VNC selected
VNC_PASSWORD=""
if [ "$GRAPHICS_CHOICE" = "vnc" ]; then
  VNC_PASSWORD=$(safe_whiptail_input whiptail --passwordbox "Enter VNC password (optional, leave empty for no password):" 10 60)
  check_cancelled
fi

# Additional options
ADDITIONAL_OPTIONS=""
safe_whiptail_yesno whiptail --yesno "Enable additional features?" 10 50
yesno_result=$?
if [ $yesno_result -eq 0 ]; then
  FEATURES=$(safe_whiptail_menu whiptail --checklist "Select additional features:" 15 70 4 \
    "rng" "Hardware random number generator" OFF \
    "sound" "Audio device (ich9-intel-hda)" OFF \
    "tablet" "USB tablet (better mouse integration)" ON \
    "serial" "Serial console" OFF)
  check_cancelled

  if [[ "$FEATURES" == *"rng"* ]]; then
    ADDITIONAL_OPTIONS+=" --rng /dev/urandom"
  fi
  if [[ "$FEATURES" == *"sound"* ]]; then
    ADDITIONAL_OPTIONS+=" --sound ich9-intel-hda"
  fi
  if [[ "$FEATURES" == *"tablet"* ]]; then
    ADDITIONAL_OPTIONS+=" --input tablet,bus=usb"
  fi
  if [[ "$FEATURES" == *"serial"* ]]; then
    ADDITIONAL_OPTIONS+=" --console pty,target.type=serial"
  fi
elif [ $yesno_result -ne 1 ]; then
  # User cancelled (not "No")
  check_cancelled
fi

# --- Construct virt-install command ---
echo
echo "Constructing VM configuration..."

# Ensure images directory exists
IMAGES_DIR="/var/lib/libvirt/images"
if [ ! -d "$IMAGES_DIR" ]; then
  if [ -w "$(dirname "$IMAGES_DIR" 2>/dev/null)" ] 2>/dev/null; then
    if ! mkdir -p "$IMAGES_DIR" 2>/dev/null; then
      echo "Warning: Could not create $IMAGES_DIR, using current directory" >&2
      IMAGES_DIR="$PWD"
    fi
  else
    echo "Warning: No write access to $IMAGES_DIR, using current directory" >&2
    IMAGES_DIR="$PWD"
  fi
elif [ ! -w "$IMAGES_DIR" ]; then
  echo "Warning: No write access to $IMAGES_DIR, using current directory" >&2
  IMAGES_DIR="$PWD"
fi

DISK_PATH="$IMAGES_DIR/${VM_NAME}.${DISK_FORMAT}"

# Check if disk file already exists
if [ -f "$DISK_PATH" ]; then
  if ! safe_whiptail_yesno whiptail --yesno "Disk file '$DISK_PATH' already exists. Overwrite?" 10 70; then
    user_cancelled
  fi
fi

# Set global variable for cleanup
DISK_BEING_CREATED="$DISK_PATH"

# Build command array for better handling of spaces and quotes
VIRT_INSTALL_CMD=(
  "virt-install"
  "--connect" "qemu:///system"
  "--name" "$VM_NAME"
  "--memory" "$RAM_MB"
  "--vcpus" "$VCPUS"
  "--os-variant" "$OS_VARIANT"
  "--virt-type" "kvm"
  "--network" "$NETWORK_CONFIG"
  "--disk" "path=$DISK_PATH,size=$DISK_SIZE_GB,bus=virtio,format=$DISK_FORMAT"
  "--noautoconsole"
)

# Add boot configuration
case "$BOOT_METHOD" in
"cdrom")
  if [ -n "$ISO_PATH" ]; then
    VIRT_INSTALL_CMD+=("--cdrom" "$ISO_PATH")
  fi
  ;;
"network")
  VIRT_INSTALL_CMD+=("--pxe")
  ;;
"import")
  VIRT_INSTALL_CMD+=("--import")
  ;;
esac

# Add graphics options
case "$GRAPHICS_CHOICE" in
"headless")
  VIRT_INSTALL_CMD+=("--graphics" "none")
  ;;
"spice")
  VIRT_INSTALL_CMD+=("--graphics" "spice,listen=127.0.0.1")
  VIRT_INSTALL_CMD+=("--video" "qxl")
  ;;
"vnc")
  if [ -n "$VNC_PASSWORD" ]; then
    VIRT_INSTALL_CMD+=("--graphics" "vnc,listen=127.0.0.1,password=$VNC_PASSWORD")
  else
    VIRT_INSTALL_CMD+=("--graphics" "vnc,listen=127.0.0.1")
  fi
  VIRT_INSTALL_CMD+=("--video" "cirrus")
  ;;
"virgl")
  VIRT_INSTALL_CMD+=("--graphics" "spice,gl=on,listen=127.0.0.1")
  VIRT_INSTALL_CMD+=("--video" "virtio")
  ;;
esac

# Add additional options
if [ -n "$ADDITIONAL_OPTIONS" ]; then
  # Split additional options and add them
  read -ra ADDR <<<"$ADDITIONAL_OPTIONS"
  VIRT_INSTALL_CMD+=("${ADDR[@]}")
fi

# Show final command for review
echo
echo "Final virt-install command:"
echo "=========================="
printf '%q ' "${VIRT_INSTALL_CMD[@]}"
echo
echo

# Confirm before execution
safe_whiptail_yesno whiptail --yesno "Create VM with the above configuration?" 12 70
yesno_result=$?
if [ $yesno_result -eq 1 ]; then
  echo "VM creation cancelled by user." >&2
  cleanup_on_error
  exit 130
elif [ $yesno_result -ne 0 ]; then
  # User cancelled (ESC)
  check_cancelled
fi

# Execute the command
echo "Creating VM '$VM_NAME'..."
echo "This may take a few minutes..."

# Temporarily disable exit on error to handle virt-install errors gracefully
set +e
"${VIRT_INSTALL_CMD[@]}"
VIRT_INSTALL_EXIT_CODE=$?
set -e

if [ $VIRT_INSTALL_EXIT_CODE -ne 0 ]; then
  echo
  echo "VM creation failed with exit code $VIRT_INSTALL_EXIT_CODE" >&2
  echo "Common troubleshooting steps:" >&2
  echo "  1. Check if KVM is enabled: lsmod | grep kvm" >&2
  echo "  2. Check libvirt logs: journalctl -u libvirtd -f" >&2
  echo "  3. Verify disk space: df -h '$IMAGES_DIR'" >&2
  echo "  4. Check permissions: ls -la '$IMAGES_DIR'" >&2
  echo "  5. Test libvirt connection: virsh list" >&2

  # Clean up will happen automatically via trap
  exit $VIRT_INSTALL_EXIT_CODE
fi

# Clear cleanup variables since VM was created successfully
VM_BEING_CREATED=""
DISK_BEING_CREATED=""

# Disable error trap since we're in success path
trap - EXIT

echo
echo "✓ VM '$VM_NAME' created successfully!"
echo
echo "Useful commands:"
echo "  Start VM:    virsh start '$VM_NAME'"
echo "  Stop VM:     virsh shutdown '$VM_NAME'"
echo "  Force stop:  virsh destroy '$VM_NAME'"
echo "  Delete VM:   virsh undefine '$VM_NAME' --remove-all-storage"
echo "  Connect:     virt-viewer '$VM_NAME'"
echo "  List VMs:    virsh list --all"

if [ "$GRAPHICS_CHOICE" != "headless" ]; then
  echo
  echo "To connect to the VM graphically, use:"
  echo "  virt-viewer '$VM_NAME'"
  if [ "$GRAPHICS_CHOICE" = "vnc" ]; then
    echo "Or connect via VNC to: localhost:5900"
  fi
fi

#!/usr/bin/env bash

set -euo pipefail

fail() {
  zenity --error --text "Error: $1" --width=400
  exit 1
}

check_dependencies() {
  if ! command -v zenity &>/dev/null; then
    fail "zenity command not found. Please install it (e.g., sudo apt install zenity or sudo dnf install zenity)."
  fi

  if ! command -v virt-install &>/dev/null; then
    fail "virt-install command not found. Please install virt-manager."
  fi
}

get_vm_name() {
  local name
  if ! name=$(zenity --entry --text "Enter VM Name:" --entry-text "my-vm" --width=300); then
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  if [ -z "$name" ]; then
    zenity --error --text "VM name cannot be empty." --width=300
    get_vm_name
  else
    echo "$name"
  fi
}

get_ram_size() {
  local ram
  if ! ram=$(zenity --entry --text "Enter RAM in MB:" --entry-text "8192" --width=300); then
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  if [ -n "$ram" ] && [[ "$ram" =~ ^[0-9]+$ ]] && [ "$ram" -gt 0 ]; then
    echo "$ram"
  else
    zenity --error --text "RAM must be a positive number." --width=300
    get_ram_size
  fi
}

get_vcpu_count() {
  local vcpus
  if ! vcpus=$(zenity --entry --text "Enter VCPUs:" --entry-text "4" --width=300); then
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  if [ -n "$vcpus" ] && [[ "$vcpus" =~ ^[0-9]+$ ]] && [ "$vcpus" -gt 0 ]; then
    echo "$vcpus"
  else
    zenity --error --text "vCPUs must be a positive number." --width=300
    get_vcpu_count
  fi
}

get_os_variant() {
  if ! command -v osinfo-query &>/dev/null; then
    local variant
    if ! variant=$(zenity --entry --text "Enter OS Variant (e.g., ubuntu22.04, fedora38, generic):" --entry-text "generic" --width=300); then
      echo "Operation cancelled by user." >&2
      exit 1
    fi
    if [ -n "$variant" ]; then
      echo "$variant"
    else
      zenity --error --text "OS Variant cannot be empty." --width=300
      get_os_variant
    fi
    return
  fi

  local os_data
  os_data=$(osinfo-query os --fields=short-id,name | tail -n +3)
  
  local zenity_args=()
  local count=0
  while IFS= read -r line; do
    local short_id
    short_id=$(echo "$line" | awk '{print $1}')
    local name
    name=$(echo "$line" | cut -d' ' -f2- | sed 's/ *$//')
    
    if [ -n "$short_id" ] && [ -n "$name" ]; then
      zenity_args+=("$short_id" "$name")
      ((count++))
    fi
    
    if [ $count -ge 50 ]; then
      break
    fi
  done <<< "$os_data"

  if [ ${#zenity_args[@]} -eq 0 ]; then
    local variant
    if ! variant=$(zenity --entry --text "Enter OS Variant (e.g., ubuntu22.04, fedora38, generic):" --entry-text "generic" --width=300); then
      echo "Operation cancelled by user." >&2
      exit 1
    fi
    if [ -n "$variant" ]; then
      echo "$variant"
    else
      zenity --error --text "OS Variant cannot be empty." --width=300
      get_os_variant
    fi
    return
  fi

  zenity_args=("generic" "Generic OS (default)" "${zenity_args[@]}")

  local temp_file
  temp_file=$(mktemp)
  for ((i=0; i<${#zenity_args[@]}; i+=2)); do
    echo "${zenity_args[i]}|${zenity_args[i+1]}" >> "$temp_file"
  done

  local choice
  if ! choice=$(zenity --list --text "Select OS Variant:" --column "ID" --column "Name" --width=500 --height=400 < "$temp_file"); then
    rm "$temp_file"
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  
  rm "$temp_file"
  
  if [ -n "$choice" ]; then
    echo "$choice"
  else
    get_os_variant
  fi
}

get_network_config() {
  local network
  if ! network=$(zenity --entry --text "Enter Network Configuration (e.g., network=default,bridge=br0):" --entry-text "network=default" --width=300); then
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  if [ -n "$network" ]; then
    echo "$network"
  else
    zenity --error --text "Network Configuration cannot be empty." --width=300
    get_network_config
  fi
}

get_disk_size() {
  local size
  if ! size=$(zenity --entry --text "Enter Disk Size in GB:" --entry-text "20" --width=300); then
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  if [ -n "$size" ] && [[ "$size" =~ ^[0-9]+$ ]] && [ "$size" -gt 0 ]; then
    echo "$size"
  else
    zenity --error --text "Disk size must be a positive number." --width=300
    get_disk_size
  fi
}

get_iso_path() {
  local iso_path
  if ! iso_path=$(zenity --file-selection --filename="$HOME/" 2>/dev/null); then
    echo ""
    return
  fi
  
  if [ -z "$iso_path" ]; then
    echo ""
    return
  fi
  
  if [ ! -f "$iso_path" ]; then
    zenity --error --text "ISO file not found at '$iso_path'." --width=400
    get_iso_path
  else
    echo "$iso_path"
  fi
}

get_graphics_option() {
  local choice
  if ! choice=$(zenity --list --text "Choose Graphics Option:" --column "Option" --column "Description" --width=400 --height=200 \
    "headless" "No graphical output" \
    "virgl" "Virtio GPU with Virgl (3D acceleration)"); then
    echo "Operation cancelled by user." >&2
    exit 1
  fi
  if [ -n "$choice" ]; then
    echo "$choice"
  else
    get_graphics_option
  fi
}

build_virt_install_command() {
  local vm_name="$1"
  local ram_mb="$2"
  local vcpus="$3"
  local os_variant="$4"
  local network_config="$5"
  local disk_size_gb="$6"
  local iso_path="$7"
  local graphics_choice="$8"

  local cmd="virt-install \
  --connect qemu:///system \
  --name \"$vm_name\" \
  --memory \"$ram_mb\" \
  --vcpus \"$vcpus\" \
  --os-variant \"$os_variant\" \
  --virt-type kvm \
  --network \"$network_config\" \
  --noautoconsole"

  cmd+=" \
  --disk path=/var/lib/libvirt/images/\"$vm_name\".qcow2,size=\"$disk_size_gb\",bus=virtio"

  if [ -n "$iso_path" ]; then
    cmd+=" \
  --cdrom \"$iso_path\""
  fi

  if [ "$graphics_choice" == "headless" ]; then
    cmd+=" \
  --graphics none"
  elif [ "$graphics_choice" == "virgl" ]; then
    cmd+=" \
  --graphics spice,gl=on,listen=none \
  --video virtio,accel=virgl"
  fi

  echo "$cmd"
}

execute_virt_install() {
  local cmd="$1"
  local vm_name="$2"

  zenity --info --text "Executing virt-install command:\n\n$cmd" --width=600

  local temp_output
  temp_output=$(mktemp)
  
  if ! eval "$cmd" >"$temp_output" 2>&1; then
    local output
    output=$(cat "$temp_output")
    rm -f "$temp_output"
    
    echo "Failed to create VM '$vm_name'" >&2
    echo "Error output:" >&2
    echo "$output" >&2
    
    zenity --error --text "Failed to create VM '$vm_name'\n\nError output:\n$output" --width=600 2>/dev/null || true
    exit 1
  fi
  
  rm -f "$temp_output"
  zenity --info --text "VM '$vm_name' created successfully." --width=300
}

main() {
  check_dependencies

  local VM_NAME RAM_MB VCPUS OS_VARIANT NETWORK_CONFIG DISK_SIZE_GB ISO_PATH GRAPHICS_CHOICE VIRT_INSTALL_CMD
  
  VM_NAME=$(get_vm_name)
  RAM_MB=$(get_ram_size)
  VCPUS=$(get_vcpu_count)
  OS_VARIANT=$(get_os_variant)
  NETWORK_CONFIG=$(get_network_config)
  DISK_SIZE_GB=$(get_disk_size)
  ISO_PATH=$(get_iso_path)
  GRAPHICS_CHOICE=$(get_graphics_option)

  VIRT_INSTALL_CMD=$(build_virt_install_command \
    "$VM_NAME" \
    "$RAM_MB" \
    "$VCPUS" \
    "$OS_VARIANT" \
    "$NETWORK_CONFIG" \
    "$DISK_SIZE_GB" \
    "$ISO_PATH" \
    "$GRAPHICS_CHOICE")

  execute_virt_install "$VIRT_INSTALL_CMD" "$VM_NAME"
}

main "$@"
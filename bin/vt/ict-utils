#!/usr/bin/env bash

# shellcheck disable=SC1091
source "$(dirname "$0")/vt-utils"

ict_check_prerequisites() {
  local missing=()
  for cmd in incus openssl curl wget tee mktemp; do
    if ! has_cmd "$cmd"; then
      missing+=("$cmd")
    fi
  done

  if ((${#missing[@]})); then
    fail "Missing required commands: ${missing[*]}"
    exit 1
  fi

  if ! incus info >/dev/null 2>&1; then
    fail "Cannot connect to Incus daemon. Please ensure Incus is running and you have proper permissions."
    exit 1
  fi

  has_cmd ict-create || {
    fail "ict-create is not in PATH."
    exit 1
  }

  has_cmd ict || {
    fail "ict is not in PATH."
    exit 1
  }
}

ict_list() {
  incus_check || return 1

  local extra_args="${2:---columns=ns4}"

  slog "Listing all Incus containers..."
  echo

  incus list type=container "${extra_args}"
}

ict_exists() {
  incus list type=container --format csv --columns n | grep -q "^${1}$"
}

ict_check_exists() {
  local container_name="$1"
  if ! ict_exists "$container_name"; then
    fail "Container '$container_name' not found"
    return 1
  fi
}
ict_state() {
  local container_name="$1"
  incus list type=container "$container_name" --format csv --columns s | head -1
}

ict_running() {
  local container_name="$1"
  local state
  state=$(ict_state "$container_name")
  [[ "$state" == "RUNNING" ]]
}

ict_check_running() {
  local container_name="$1"
  if ! ict_running "$container_name"; then
    fail "Container '$container_name' is not running (state: $(ict_state "$container_name"))"
    return 1
  fi
}

ict_check_exists_running() {
  local container_name="$1"
  ict_check_exists "$container_name" || return 1
  ict_check_running "$container_name" || return 1
}

ict_ip() {
  local container_name="$1"

  ict_check_exists_running "$container_name" || return 1

  local address_list
  if ! address_list=$(incus list "^${container_name}$" --format csv --columns 4 2>/dev/null); then
    fail "Unable to fetch network information for container '$container_name'"
    return 1
  fi

  address_list=${address_list%\"$'\n'}
  address_list=${address_list#\"}

  local ip
  ip=$(printf '%s\n' "$address_list" | awk '/\((eth|enp|ens|eno|wlp|lan)/ {print $1; exit}')

  if [[ -z "$ip" ]]; then
    ip=$(printf '%s\n' "$address_list" | awk '{match($0, /([0-9]{1,3}\.){3}[0-9]{1,3}/, m); if (m[0]) {print m[0]; exit}}')
  fi

  if [[ -z "$ip" ]]; then
    fail "No suitable IP address found for container '$container_name'"
    return 1
  fi

  echo "$ip"
  return 0
}

ict_ssh() {
  local container_name="$1"
  local username="${2:-}"
  ict_check_exists_running "$container_name" || return 1

  # Auto-detect username if not provided
  if [[ -z "$username" ]]; then
    username=$(detect_container_user "$container_name")
    slog "Auto-detected username: $username (override with: $0 ssh $container_name <username>)"
  fi

  local ip
  if ip=$(ict_ip "$container_name"); then
    local connect_timeout="${ICT_SSH_CONNECT_TIMEOUT:-15}"
    slog "Connecting to $container_name ($ip) as $username..."
    if ! ssh -o "ConnectTimeout=${connect_timeout}" "$username@$ip"; then
      local ssh_exit=$?
      fail "SSH connection failed for container '$container_name' (exit code: ${ssh_exit})"
      return "$ssh_exit"
    fi
    return 0
  else
    return $?
  fi

}

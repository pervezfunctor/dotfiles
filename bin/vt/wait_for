#!/usr/bin/env bash

usage() {
  cat << EOF
wait_for - Wait for a command to produce expected output

USAGE:
    wait_for <expected_output> <timeout_seconds> <interval_seconds> <command> [args...]

ARGUMENTS:
    expected_output    The string to match against the command output
    timeout_seconds    Maximum time to wait before giving up
    interval_seconds   Time to wait between command attempts
    command            The command to execute
    args               Additional arguments for the command

RETURN VALUES:
    0                  Success (output matched within timeout)
    1                  Failure (timeout exceeded or invalid parameters)

EXAMPLE:
    wait_for "shut off" 10 2 virsh domstate my-vm

DESCRIPTION:
    Executes the specified command repeatedly until it produces the expected
    output or the timeout is reached. The command is executed at the specified
    interval until either the output matches or the maximum number of attempts
    is exceeded.
EOF
}

wait_for() {
  local expected="$1"
  local timeout="$2"
  local interval="$3"
  shift 3
  local cmd=("$@")

  local count=0
  local output=""
  local max_attempts

  if ((interval <= 0)); then
    echo "Error: wait_for() interval must be greater than 0." >&2
    return 1
  fi

  max_attempts=$((timeout / interval))

  while ((count < max_attempts)); do
    output=$("${cmd[@]}" 2>/dev/null)

    if [[ "$output" == "$expected" ]]; then
      return 0
    fi

    sleep "$interval"
    ((count++))
  done

  echo "Timeout exceeded waiting for command: ${cmd[*]}" >&2
  echo "Last received output: '$output'" >&2
  echo "Expected output: '$expected'" >&2
  return 1
}

# --- Usage Example ---
#
# vm_name="my-test-vm"
#
# # Simulate a command that will eventually succeed
# # (This part is just for testing the function)
# _counter=0
# mock_virsh() {
#   ((_counter++))
#   if ((_counter < 4)); then
#     echo "running"
#   else
#     echo "shut off"
#   fi
# }
#
# echo "Waiting for VM to stop..."
# if wait_for "shut off" 10 2 mock_virsh domstate "$vm_name"; then
#     echo "Success: VM '$vm_name' stopped gracefully"
# else
#     # The error message is now printed by the function itself
#     echo "Error: Failed to stop VM '$vm_name'."
#     exit 1
# fi

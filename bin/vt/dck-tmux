#!/bin/bash

set -euo pipefail

# shellcheck disable=SC1091
source "$(dirname "$0")/vt-utils"

SESSION_NAME="docker-containers"

DCK_DISTRO_LIST=("ubuntu" "debian" "arch" "fedora" "rocky" "tw" "alpine" "centos" "nix")

usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTION]

Manage a tmux session with connections to Docker containers.

Options:
  create    Create a new tmux session with connections to containers (default if no option)
  attach    Attach to an existing session
  detach    Detach from the current session
  destroy   Kill the tmux session
  help      Display this help message
EOF
}

check_docker() {
  if ! has_cmd docker; then
    fail "docker is not installed. Please install it first."
    exit 1
  fi
}

dck_exists() {
  local container_name="$1"
  docker ps -a --format "{{.Names}}" | grep -q "^$container_name$"
  return $?
}

check_container() {
  local container_name="$1"
  if ! dck_exists "$container_name"; then
    fail "Container '$container_name' does not exist"
    return 1
  fi
  return 0
}

is_dck_running() {
  local container_name="$1"
  docker ps --format "{{.Names}}" | grep -q "^$container_name$"
}

check_dck_running() {
  local container_name="$1"
  if ! is_dck_running "$container_name"; then
    fail "Container '$container_name' is not running"
    return 1
  fi
  return 0
}

create_container_cmd() {
  local container_name="$1"

  check_container "$container_name" || return 1

  if ! is_dck_running "$container_name"; then
    docker start "$container_name"
  fi

  echo "docker exec -it $container_name /bin/bash"
}

create_session() {
  local force="${1:-false}"

  if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
    if [[ "$force" == "true" ]]; then
      slog "Killing existing session and creating a new one..."
      tmux kill-session -t "$SESSION_NAME"
    else
      slog "Session '$SESSION_NAME' already exists, attaching..."
      tmux attach-session -t "$SESSION_NAME"
      return
    fi
  fi

  local -a cmds

  for distro in "${DCK_DISTRO_LIST[@]}"; do
    cmds+=("$(create_container_cmd "$distro")")
  done

  # Create new session with first pane and run first command
  tmux new-session -d -s "$SESSION_NAME" -n "Containers" "${cmds[0]}"

  # Create remaining 8 panes
  for i in {1..2}; do
    tmux split-window -h -t "$SESSION_NAME":0.$((i - 1))
  done

  for i in {0..2}; do
    tmux select-pane -t "$SESSION_NAME":0.$i
    tmux split-window -v -t "$SESSION_NAME":0.$i
    tmux select-pane -t "$SESSION_NAME":0.$((i + 3))
    tmux split-window -v -t "$SESSION_NAME":0.$((i + 3))
  done

  for i in "${!cmds[@]}"; do
    tmux send-keys -t "$SESSION_NAME":0.$i "${cmds[$i]}" C-m
  done

  tmux select-pane -t "$SESSION_NAME":0.0

  tmux attach-session -t "$SESSION_NAME"

  success "Connected to all containers in tmux session"
}

attach_session() {
  if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
    warn "Session '$SESSION_NAME' does not exist. Creating it..."
    create_session
    return
  fi

  slog "Attaching to session '$SESSION_NAME'..."
  tmux attach-session -t "$SESSION_NAME"
}

detach_session() {
  if [[ -z "${TMUX:-}" ]]; then
    fail "Not currently in a tmux session"
    exit 1
  fi

  slog "Detaching from tmux session..."
  tmux detach-client
}

destroy_session() {
  if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
    warn "Session '$SESSION_NAME' does not exist"
    return
  fi

  slog "Destroying session '$SESSION_NAME'..."
  tmux kill-session -t "$SESSION_NAME"
  success "Session destroyed"
}

main() {
  check_docker
  check_tmux

  local command="${1:-}"

  case "$command" in
  create)
    create_session "true"
    ;;
  attach)
    attach_session
    ;;
  detach)
    detach_session
    ;;
  destroy)
    destroy_session
    ;;
  help | --help | -h)
    usage
    ;;
  "")
    create_session
    ;;
  *)
    fail "Unknown option: $command"
    usage
    exit 1
    ;;
  esac
}

main "$@"

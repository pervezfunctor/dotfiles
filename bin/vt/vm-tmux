#!/bin/bash

# shellcheck disable=SC1091

set -euo pipefail

source "$(dirname "$0")/vm-utils"
source "$(dirname "$0")/tmux-utils"

VM_DISTRO_LIST=("ubuntu" "fedora" "arch" "debian") # alpine is not working

SESSION_NAME="LIBVIRT_TMUX"

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Manage a tmux session with SSH connections to libvirt VMs.

Options:
  create    Create a new tmux session with SSH connections to VMs (default if no option)
  attach    Attach to an existing session
  detach    Detach from the current session
  destroy   Kill the tmux session
  help      Display this help message

Examples:
  $(basename "$0")           # Create session or attach if exists
  $(basename "$0") create    # Force create a new session
  $(basename "$0") attach    # Attach to existing session
  $(basename "$0") detach    # Detach from current session
  $(basename "$0") destroy   # Kill the session
EOF
}

check_prerequisites() {
    vm_check_prerequisites
    check_tmux
}

check_prerequisites

create_session() {
    local force="${1:-false}"

    if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        if [[ "$force" == "true" ]]; then
            slog "Killing existing session and creating a new one..."
            tmux kill-session -t "$SESSION_NAME"
        else
            slog "Session '$SESSION_NAME' already exists, attaching..."
            tmux attach-session -t "$SESSION_NAME"
            return
        fi
    fi

    for vm in "${VM_DISTRO_LIST[@]}"; do
        if ! vm_exists "${vm}-virt"; then
            slog "VM '${vm}-virt' is not running. Starting it..."
            if ! vm start "${vm}-virt"; then
                fail "Failed to start VM '${vm}-virt'. Please check its status."
                return 1
            fi
        fi
    done

    slog "Creating tmux session with SSH connections to 4 libvirt VMs..."

    local -a cmds=()
    local username

    for vm in "${VM_DISTRO_LIST[@]}"; do
        username="$(default_username "${vm}-virt")"
        cmds+=("vm ssh ${vm}-virt ${username}")
    done

    if ! tmux_grid "$SESSION_NAME" "${cmds[@]}"; then
        fail "Failed to create tmux session '$SESSION_NAME' with SSH connections to VMs"
        return 1
    fi

    tmux attach-session -t "$SESSION_NAME"

    success "Connected to all VMs in tmux session"
}

attach_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist. Creating it..."
        create_session
        return
    fi

    slog "Attaching to session '$SESSION_NAME'..."
    tmux attach-session -t "$SESSION_NAME"
}

detach_session() {
    if [[ -z "${TMUX:-}" ]]; then
        fail "Not currently in a tmux session"
        exit 1
    fi

    slog "Detaching from tmux session..."
    tmux detach-client
}

destroy_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist"
        return
    fi

    slog "Destroying session '$SESSION_NAME'..."
    tmux kill-session -t "$SESSION_NAME"
    success "Session destroyed"
}

main() {
    check_prerequisites

    local command="${1:-}"

    case "$command" in
    create)
        create_session "true"
        ;;
    attach)
        attach_session
        ;;
    detach)
        detach_session
        ;;
    destroy)
        destroy_session
        ;;
    help | --help | -h)
        usage
        ;;
    "")
        create_session
        ;;
    *)
        fail "Unknown option: $command"
        usage
        exit 1
        ;;
    esac
}

main "$@"

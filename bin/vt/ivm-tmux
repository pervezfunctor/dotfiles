#!/bin/bash

# Support all virtual machines created by ivm-all

set -euo pipefail

# shellcheck disable=SC1091
source "$(dirname "$0")/ivm-utils"

UBUNTU_VM="ubuntu-vm"
FEDORA_VM="fedora-vm"
ARCH_VM="arch-vm"
TW_VM="tw-vm"
ALPINE_VM="alpine-vm"
DEBIAN_VM="debian-vm"

UBUNTU_USER="ubuntu"
FEDORA_USER="fedora"
ARCH_USER="arch"
TW_USER="opensuse"
ALPINE_USER="alpine"
DEBIAN_USER="debian"

SESSION_NAME="your_session_name" # Set your session name here

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Manage a tmux session with SSH connections to Incus VMs.

Options:
  create    Create a new tmux session with SSH connections to VMs (default if no option)
  attach    Attach to an existing session
  detach    Detach from the current session
  destroy   Kill the tmux session
  help      Display this help message

Examples:
  $(basename "$0")           # Create session or attach if exists
  $(basename "$0") create    # Force create a new session
  $(basename "$0") attach    # Attach to existing session
  $(basename "$0") detach    # Detach from current session
  $(basename "$0") destroy   # Kill the session
EOF
}

create_session() {
    local force="${1:-false}"

    if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        if [[ "$force" == "true" ]]; then
            echo "Session '$SESSION_NAME' exists. Recreating..."
            tmux kill-session -t "$SESSION_NAME"
        else
            echo "Session '$SESSION_NAME' already exists. Attaching..."
            tmux attach-session -t "$SESSION_NAME"
            return 0
        fi
    fi

    # Check all VMs are running, if not start them
    for vm in "$UBUNTU_VM" "$FEDORA_VM" "$ARCH_VM" "$TW_VM"; do
        if ! check_vm "$vm"; then
            echo "VM '$vm' is not running. Starting it..."
            if ! ivm start "$vm"; then
                fail "Failed to start VM '$vm'. Please check its status."
                return 1
            fi
        fi
    done

    echo "Creating tmux session '$SESSION_NAME' with SSH connections to 6 Incus VMs..."

    local UBUNTU_CMD="ivm ssh $UBUNTU_VM $UBUNTU_USER"
    local FEDORA_CMD="ivm ssh $FEDORA_VM $FEDORA_USER"
    local ARCH_CMD="ivm ssh $ARCH_VM $ARCH_USER"
    local TW_CMD="ivm ssh $TW_VM $TW_USER"
    local ALPINE_CMD="ivm ssh $ALPINE_VM $ALPINE_USER"
    local DEBIAN_CMD="ivm ssh $DEBIAN_VM $DEBIAN_USER"

    tmux new-session -d -s "$SESSION_NAME" "$UBUNTU_CMD"
    tmux split-window -v -t "$SESSION_NAME":0.0 "$FEDORA_CMD"
    tmux select-pane -t "$SESSION_NAME":0.0
    tmux split-window -h -t "$SESSION_NAME":0.0 "$ARCH_CMD"
    tmux split-window -h -t "$SESSION_NAME":0.1 "$TW_CMD"
    tmux select-pane -t "$SESSION_NAME":0.2
    tmux select-pane -D
    tmux split-window -h -t "$SESSION_NAME":0.3 "$ALPINE_CMD"
    tmux split-window -h -t "$SESSION_NAME":0.4 "$DEBIAN_CMD"
    tmux attach-session -t "$SESSION_NAME"

    echo "âœ… Connected to all VMs in tmux session '$SESSION_NAME'"
}

attach_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist. Creating it..."
        create_session
        return
    fi

    slog "Attaching to session '$SESSION_NAME'..."
    tmux attach-session -t "$SESSION_NAME"
}

detach_session() {
    if [[ -z "${TMUX:-}" ]]; then
        fail "Not currently in a tmux session"
        exit 1
    fi

    slog "Detaching from tmux session..."
    tmux detach-client
}

destroy_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist"
        return
    fi

    slog "Destroying session '$SESSION_NAME'..."
    tmux kill-session -t "$SESSION_NAME"
    success "Session destroyed"
}

main() {
    check_ivm_prerequisites
    check_tmux

    local command="${1:-}"

    case "$command" in
    create)
        create_session "true"
        ;;
    attach)
        attach_session
        ;;
    detach)
        detach_session
        ;;
    destroy)
        destroy_session
        ;;
    help | --help | -h)
        usage
        ;;
    "")
        create_session
        ;;
    *)
        fail "Unknown option: $command"
        usage
        exit 1
        ;;
    esac
}

main "$@"

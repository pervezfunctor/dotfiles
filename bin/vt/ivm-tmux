#!/bin/bash

set -euo pipefail

DOT_DIR=${DOT_DIR:-$HOME/.ilm}
# shellcheck disable=SC1091
source "$DOT_DIR/share/utils"

UBUNTU_VM="ubuntu-vm"
FEDORA_VM="fedora-vm"
ARCH_VM="arch-vm"
TW_VM="tw-vm"

UBUNTU_USER="ubuntu"
FEDORA_USER="fedora"
ARCH_USER="arch"
TW_USER="opensuse"

SESSION_NAME="incus-vms"

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Manage a tmux session with SSH connections to Incus VMs.

Options:
  create    Create a new tmux session with SSH connections to VMs (default if no option)
  attach    Attach to an existing session
  detach    Detach from the current session
  destroy   Kill the tmux session
  help      Display this help message

Examples:
  $(basename "$0")           # Create session or attach if exists
  $(basename "$0") create    # Force create a new session
  $(basename "$0") attach    # Attach to existing session
  $(basename "$0") detach    # Detach from current session
  $(basename "$0") destroy   # Kill the session
EOF
}

check_incus() {
    if ! has_cmd incus; then
        fail "Incus is not installed. Please install it first."
        exit 1
    fi
}

check_tmux() {
    if ! has_cmd tmux; then
        fail "tmux is not installed. Please install it first."
        exit 1
    fi
}

create_session() {
    local force="${1:-false}"

    if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        if [[ "$force" == "true" ]]; then
            slog "Killing existing session and creating a new one..."
            tmux kill-session -t "$SESSION_NAME"
        else
            slog "Session '$SESSION_NAME' already exists, attaching..."
            tmux attach-session -t "$SESSION_NAME"
            return
        fi
    fi

    slog "Creating tmux session with SSH connections to 4 Incus VMs..."

    UBUNTU_CMD=$(ivm ssh "$UBUNTU_VM" "$UBUNTU_USER")
    FEDORA_CMD=$(ivm ssh "$FEDORA_VM" "$FEDORA_USER")
    ARCH_CMD=$(ivm ssh "$ARCH_VM" "$ARCH_USER")
    TW_CMD=$(ivm ssh "$TW_VM" "$TW_USER")

    tmux new-session -d -s "$SESSION_NAME" -n "VMs" "$UBUNTU_CMD"

    tmux split-window -h -t "$SESSION_NAME:0.0" "$FEDORA_CMD"
    tmux split-window -v -t "$SESSION_NAME:0.0" "$ARCH_CMD"
    tmux split-window -v -t "$SESSION_NAME:0.1" "$TW_CMD"

    tmux select-layout -t "$SESSION_NAME:0" tiled

    tmux attach-session -t "$SESSION_NAME"

    success "Connected to all VMs in tmux session"
}

attach_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist. Creating it..."
        create_session
        return
    fi

    slog "Attaching to session '$SESSION_NAME'..."
    tmux attach-session -t "$SESSION_NAME"
}

detach_session() {
    if [[ -z "${TMUX:-}" ]]; then
        fail "Not currently in a tmux session"
        exit 1
    fi

    slog "Detaching from tmux session..."
    tmux detach-client
}

destroy_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        warn "Session '$SESSION_NAME' does not exist"
        return
    fi

    slog "Destroying session '$SESSION_NAME'..."
    tmux kill-session -t "$SESSION_NAME"
    success "Session destroyed"
}

main() {
    check_incus
    check_tmux

    local command="${1:-}"

    case "$command" in
    create)
        create_session "true"
        ;;
    attach)
        attach_session
        ;;
    detach)
        detach_session
        ;;
    destroy)
        destroy_session
        ;;
    help | --help | -h)
        usage
        ;;
    "")
        create_session
        ;;
    *)
        fail "Unknown option: $command"
        usage
        exit 1
        ;;
    esac
}

main "$@"

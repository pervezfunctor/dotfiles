#!/usr/bin/env bash

# shellcheck disable=SC1091
source "$(dirname "$0")/vt-utils"

ivm_check_exists_prerequisites() {
  local missing=()
  for cmd in incus openssl curl wget tee mktemp; do
    if ! has_cmd "$cmd"; then
      missing+=("$cmd")
    fi
  done

  if ((${#missing[@]})); then
    fail "Missing required commands: ${missing[*]}"
    exit 1
  fi

  if ! incus info >/dev/null 2>&1; then
    fail "Cannot connect to Incus daemon. Please ensure Incus is running and you have proper permissions."
    exit 1
  fi

  has_cmd ivm || {
    fail "ivm is not in PATH."
    exit 1
  }

  has_cmd ivm-create || {
    fail "ivm-create is not in PATH."
    exit 1
  }
}

ivm_state() {
  incus info "$1" | grep "Status:" | awk '{print $2}'
}

ivm_exists() {
  incus info "$1" >/dev/null 2>&1
}

ivm_check_exists() {
  if ! ivm_exists "$1"; then
    fail "VM '$1' not found"
    return 1
  fi
}

ivm_running() {
  local vm_name="$1"
  local state
  state=$(ivm_state "$vm_name")
  [[ "$state" == "RUNNING" ]]
}

ivm_check_exists_running() {
  local vm_name="$1"
  ivm_check_exists "$vm_name" || return 1

  local state
  state=$(ivm_state "$vm_name")
  if [[ "$state" != "RUNNING" ]]; then
    fail "VM '$vm_name' is not running (state: ${state:-unknown})"
    return 1
  fi
}

ivm_list() {
  local vm_name="${1:-}"
  local extra_args="${2:---columns=ns4}"

  if [[ -n "$vm_name" ]]; then
    incus list type=virtual-machine "$vm_name" "${extra_args}"
  else
    incus list type=virtual-machine "${extra_args}"
  fi
}

# wait_for_vm_state() {
#   local vm_name="$1"
#   local expected_state="$2"
#   local timeout="${3:-60}"
#   local interval="${4:-3}"

#   local count=0
#   local max_attempts=$((timeout / interval))

#   while ((count < max_attempts)); do
#     local state
#     state=$(ivm_state "$vm_name")
#     if [[ "$state" == "$expected_state" ]]; then
#       return 0
#     fi
#     sleep "$interval"
#     ((count++))
#   done
#   return 1
# }

ivm_ip() {
  local vm_name="$1"

  ivm_check_exists_running "$vm_name" || return 1

  local address_list
  if ! address_list=$(incus list "^${vm_name}$" --format csv --columns 4 2>/dev/null); then
    fail "Unable to fetch network information for VM '$vm_name'"
    return 1
  fi

  address_list=${address_list%\"$'\n'}
  address_list=${address_list#\"}

  local ip
  ip=$(printf '%s\n' "$address_list" | awk '/\((enp|eth)/ {print $1; exit}')

  if [[ -z "$ip" ]]; then
    fail "No suitable IP address found for VM '$vm_name'"
    return 1
  fi

  echo "$ip"
  return 0
}

ivm_show_ip() {
  local vm_name="$1"
  local ip
  if ! ip=$(ivm_ip "$vm_name"); then
    return 1
  fi
  echo "$ip"
}

ivm_ssh() {
  local vm_name="$1"
  local username="${2:-}"

  if [[ -z "$username" ]]; then
    fail "Username required. Usage: $0 ssh <vm_name> <username>"
    return 1
  fi

  local ip
  if ! ip=$(ivm_ip "$vm_name"); then
    return 1
  fi

  local connect_timeout="${IVM_SSH_CONNECT_TIMEOUT:-15}"
  slog "Connecting to $vm_name ($ip) as $username..."
  ssh -o "ConnectTimeout=${connect_timeout}" "$username@$ip"
}

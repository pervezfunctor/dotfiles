#!/bin/bash

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() { echo -e "${BLUE}[INFO]${NC} $*"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }

# Default values
CONTAINER_NAME=""
DISTRO=""
RELEASE=""
USERNAME=""
PASSWORD=""
VCPUS="2"
RAM_MB="1024"
SSH_KEY=""
PRIVILEGED="false"

usage() {
    cat <<EOF
Usage: $0 --distro DISTRO [OPTIONS]

Create Incus LXC containers with cloud-init and SSH access.

REQUIRED:
    --distro DISTRO         Distribution (ubuntu, fedora, arch, debian, centos, alpine, nixos)

OPTIONS:
    --name NAME             Container name (default: distro name)
    --release RELEASE       Distribution release (default: latest)
    --username USER         Username for container (default: distro default)
    --password PASS         User password (default: container name)
    --vcpus NUM             Number of vCPUs (default: 2)
    --ram MB                RAM in MB (default: 1024)
    --ssh-key PATH          SSH public key path (default: auto-detect)
    --privileged            Create privileged container (default: false)
    --help, -h              Show this help

EXAMPLES:
    $0 --distro ubuntu
    $0 --distro fedora --name my-fedora --vcpus 4 --ram 2048
    $0 --distro debian --username admin --password mypass
    $0 --distro arch --release current --privileged

SUPPORTED DISTRIBUTIONS:
    ubuntu    - Ubuntu LTS (24.04) or specified release
    fedora    - Fedora (latest) or specified release
    arch      - Arch Linux (current)
    debian    - Debian (12/bookworm) or specified release
    centos    - CentOS Stream (9) or specified release
    alpine    - Alpine Linux (3.19) or specified release

NOTE: LXC containers are lightweight and share the host kernel.
      They start faster and use fewer resources than VMs.

EOF
}

check_prerequisites() {
    if ! command -v incus >/dev/null 2>&1; then
        log_error "incus command not found. Please install Incus first."
        exit 1
    fi

    if ! incus info >/dev/null 2>&1; then
        log_error "Cannot connect to Incus daemon. Please ensure Incus is running and you have proper permissions."
        exit 1
    fi

    # Auto-detect SSH key if not specified
    if [[ -z "$SSH_KEY" ]]; then
        if [[ -f "${HOME}/.ssh/id_ed25519.pub" ]]; then
            SSH_KEY="${HOME}/.ssh/id_ed25519.pub"
        elif [[ -f "${HOME}/.ssh/id_rsa.pub" ]]; then
            SSH_KEY="${HOME}/.ssh/id_rsa.pub"
        else
            log_warn "No SSH key found. Generating new RSA key pair..."
            ssh-keygen -t rsa -b 4096 -f "${HOME}/.ssh/id_rsa" -N ""
            SSH_KEY="${HOME}/.ssh/id_rsa.pub"
        fi
    fi

    if [[ ! -f "$SSH_KEY" ]]; then
        log_error "SSH public key not found at: $SSH_KEY"
        exit 1
    fi

    log_info "Using SSH key: $SSH_KEY"
}

configure_distribution() {
    case "$DISTRO" in
    ubuntu)
        RELEASE=${RELEASE:-"24.04"}
        USERNAME=${USERNAME:-"ubuntu"}
        IMAGE="images:ubuntu/${RELEASE}"
        ;;
    fedora)
        RELEASE=${RELEASE:-"42"}
        USERNAME=${USERNAME:-"fedora"}
        IMAGE="images:fedora/${RELEASE}"
        ;;
    arch)
        RELEASE=${RELEASE:-"current"}
        USERNAME=${USERNAME:-"arch"}
        IMAGE="images:archlinux/${RELEASE}"
        ;;
    debian)
        RELEASE=${RELEASE:-"12"}
        USERNAME=${USERNAME:-"debian"}
        IMAGE="images:debian/${RELEASE}"
        ;;
    centos)
        RELEASE=${RELEASE:-"9-Stream"}
        USERNAME=${USERNAME:-"centos"}
        IMAGE="images:centos/${RELEASE}"
        ;;
    alpine)
        RELEASE=${RELEASE:-"3.19"}
        USERNAME=${USERNAME:-"alpine"}
        IMAGE="images:alpine/${RELEASE}"
        ;;
    nixos)
        RELEASE=${RELEASE:-"24.11"}
        USERNAME=${USERNAME:-"nixos"}
        IMAGE="images:nixos/${RELEASE}"
        ;;
    *)
        log_error "Unsupported distribution: $DISTRO"
        log_error "Supported distributions: ubuntu, fedora, arch, debian, centos, alpine, nixos"
        exit 1
        ;;
    esac

    CONTAINER_NAME=${CONTAINER_NAME:-"$DISTRO"}
    PASSWORD=${PASSWORD:-"$CONTAINER_NAME"}

    log_info "Configuration:"
    log_info "  Distribution: $DISTRO $RELEASE"
    log_info "  Container Name: $CONTAINER_NAME"
    log_info "  Username: $USERNAME"
    log_info "  Image: $IMAGE"
    log_info "  Resources: ${VCPUS} vCPUs, ${RAM_MB}MB RAM"
    log_info "  Privileged: $PRIVILEGED"
}

generate_cloud_init_config() {
    log_info "Generating cloud-init configuration..."

    local pub_key
    pub_key=$(cat "$SSH_KEY")

    # Create cloud-init user-data
    local user_data
    user_data=$(
        cat <<EOF
#cloud-config
hostname: $CONTAINER_NAME
manage_etc_hosts: true

# User configuration
users:
  - name: $USERNAME
    groups: [sudo, wheel, adm]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    lock_passwd: false
    passwd: $(openssl passwd -6 "$PASSWORD")
    ssh_authorized_keys:
      - $pub_key

# System configuration
package_update: true
package_upgrade: true

packages:
  - openssh-server
  - curl
  - wget
  - vim
  - htop
  - git
  - unzip

# Enable SSH service
runcmd:
  - systemctl enable --now ssh || systemctl enable --now sshd
  - systemctl enable --now systemd-resolved || true

# Network configuration
write_files:
  - path: /etc/motd
    content: |
      Welcome to $CONTAINER_NAME ($DISTRO $RELEASE)!
      Created with ict-create

      SSH access configured for user: $USERNAME
      Type: LXC Container (lightweight, shared kernel)

final_message: "Container $CONTAINER_NAME setup complete! SSH access is ready."
EOF
    )

    echo "$user_data"
}

create_container() {
    log_info "Creating Incus LXC container '$CONTAINER_NAME'..."

    # Check if container already exists
    if incus info "$CONTAINER_NAME" >/dev/null 2>&1; then
        log_error "Container '$CONTAINER_NAME' already exists"
        exit 1
    fi

    # Generate cloud-init configuration
    local cloud_init_config
    cloud_init_config=$(generate_cloud_init_config)

    # Create the container with cloud-init configuration
    log_info "Launching container with image: $IMAGE"

    local launch_args=(
        "$IMAGE" "$CONTAINER_NAME"
        --config "limits.cpu=$VCPUS"
        --config "limits.memory=${RAM_MB}MB"
        --config "user.user-data=$cloud_init_config"
    )

    # Add privileged flag if requested
    if [[ "$PRIVILEGED" == "true" ]]; then
        launch_args+=(--config "security.privileged=true")
        log_info "Creating privileged container"
    fi

    # Add NixOS-specific settings
    if [[ "$DISTRO" == "nixos" ]]; then
        launch_args+=(--config "security.nesting=true")
        log_info "Enabling nesting for NixOS container"
    fi

    if ! incus launch "${launch_args[@]}"; then
        log_error "Failed to create container '$CONTAINER_NAME'"
        exit 1
    fi

    log_success "Container '$CONTAINER_NAME' created successfully"
}

wait_for_container() {
    log_info "Waiting for container to be ready..."

    local max_attempts=30
    local attempt=0

    while [[ $attempt -lt $max_attempts ]]; do
        local state
        state=$(incus list "$CONTAINER_NAME" --format csv --columns s | head -1)

        if [[ "$state" == "RUNNING" ]]; then
            log_info "Container is running, waiting for cloud-init to complete..."
            sleep 5

            # Check if cloud-init has finished
            if incus exec "$CONTAINER_NAME" -- cloud-init status --wait >/dev/null 2>&1; then
                log_success "Cloud-init completed successfully"
                return 0
            fi
        fi

        sleep 2
        ((attempt++))
        echo -n "."
    done

    echo
    log_warn "Container may not be fully ready yet, but continuing..."
}

get_container_ip() {
    log_info "Getting container IP address..."

    local ip
    local max_attempts=15
    local attempt=0

    while [[ $attempt -lt $max_attempts ]]; do
        ip=$(incus list "$CONTAINER_NAME" --format csv --columns 4 | head -1 | cut -d' ' -f1)

        if [[ -n "$ip" && "$ip" != "-" ]]; then
            echo "$ip"
            return 0
        fi

        sleep 2
        ((attempt++))
    done

    log_warn "Could not determine container IP address"
    return 1
}

show_completion_info() {
    log_success "Container '$CONTAINER_NAME' is ready!"
    echo
    log_info "Container Details:"
    incus list "$CONTAINER_NAME"
    echo

    local ip
    if ip=$(get_container_ip); then
        log_info "SSH Access:"
        log_info "  IP Address: $ip"
        log_info "  Username: $USERNAME"
        log_info "  SSH Command: ssh $USERNAME@$ip"
        echo
        log_info "You can also use Incus commands:"
        log_info "  Shell: incus exec $CONTAINER_NAME -- /bin/bash"
        log_info "  Execute: incus exec $CONTAINER_NAME -- <command>"
    else
        log_info "Use Incus commands to access the container:"
        log_info "  Shell: incus exec $CONTAINER_NAME -- /bin/bash"
        log_info "  Execute: incus exec $CONTAINER_NAME -- <command>"
    fi

    echo
    log_info "Container Management:"
    log_info "  Status: ict status $CONTAINER_NAME"
    log_info "  Stop: ict stop $CONTAINER_NAME"
    log_info "  Start: ict start $CONTAINER_NAME"
    log_info "  Delete: ict delete $CONTAINER_NAME"
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
        --distro)
            DISTRO="$2"
            shift 2
            ;;
        --name)
            CONTAINER_NAME="$2"
            shift 2
            ;;
        --release)
            RELEASE="$2"
            shift 2
            ;;
        --username)
            USERNAME="$2"
            shift 2
            ;;
        --password)
            PASSWORD="$2"
            shift 2
            ;;
        --vcpus)
            VCPUS="$2"
            shift 2
            ;;
        --ram)
            RAM_MB="$2"
            shift 2
            ;;
        --ssh-key)
            SSH_KEY="$2"
            shift 2
            ;;
        --privileged)
            PRIVILEGED="true"
            shift
            ;;
        --help | -h)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
        esac
    done

    # Validate required arguments
    if [[ -z "$DISTRO" ]]; then
        log_error "Distribution is required. Use --distro option."
        usage
        exit 1
    fi
}

main() {
    log_info "Starting Incus LXC container creation..."

    parse_args "$@"
    check_prerequisites
    configure_distribution
    create_container
    wait_for_container
    show_completion_info

    log_success "All done! Your $DISTRO container '$CONTAINER_NAME' is ready to use."
}

# Only run main if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

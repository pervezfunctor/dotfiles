#!/bin/bash

set -euo pipefail

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Default configuration
DEFAULT_LINES=50
DEFAULT_VACUUM_DAYS=3
DEFAULT_EXPORT_FORMAT="text"

# Configuration file (optional)
CONFIG_FILE="${HOME}/.config/logs-helper.conf"

# Load configuration if exists
if [[ -f "$CONFIG_FILE" ]]; then
  # shellcheck source=/dev/null
  source "$CONFIG_FILE"
fi

print_header() {
  clear
  echo -e "${BLUE}================================${NC}"
  echo -e "${BLUE}    Journalctl Helper Script    ${NC}"
  echo -e "${BLUE}================================${NC}"
  echo -e "${CYAN}System: $(hostname)${NC}"
  echo -e "${CYAN}User: $(whoami)${NC}"
  echo -e "${CYAN}Date: $(date)${NC}"
  echo -e "${BLUE}================================${NC}"
}

show_menu() {
  echo -e "\n${GREEN}Select an option:${NC}"
  echo "1. View all logs (most recent at bottom)"
  echo "2. Follow logs in real-time"
  echo "3. Show logs from current boot"
  echo "4. Show logs from previous boot"
  echo "5. View logs for specific service"
  echo "6. Show only errors and critical messages"
  echo "7. Show kernel messages"
  echo "8. Show logs from last hour"
  echo "9. Show logs from today"
  echo "10. Check disk usage"
  echo "11. Clean up old logs (keep last ${DEFAULT_VACUUM_DAYS} days)"
  echo "12. Export logs to file"
  echo "13. Show logs with specific priority level"
  echo "14. Search logs for specific pattern"
  echo "15. Show logs from specific time range"
  echo "16. List available services"
  echo "17. Show system information"
  echo "18. Configure default settings"
  echo "0. Exit"
  echo -e "\nEnter your choice (0-18):"
}


execute_command() {
  local cmd="$1"
  local description="$2"
  local use_sudo="${3:-false}"

  echo -e "\n${YELLOW}Executing: $description${NC}"
  echo -e "${BLUE}Command: $cmd${NC}\n"

  if [[ "$use_sudo" == "true" ]]; then
    sudo "$cmd"
  else
    eval "$cmd"
  fi

  echo -e "\n${GREEN}Command completed.${NC}"
}

# Function to display logs with pagination
display_with_pagination() {
  local cmd="$1"
  local description="$2"

  echo -e "\n${YELLOW}Executing: $description${NC}"
  echo -e "${BLUE}Command: $cmd${NC}\n"

  # Use less for pagination if available, otherwise just output
  if command -v less >/dev/null 2>&1; then
    eval "$cmd" | less -R
  else
    eval "$cmd"
  fi
}

show_priority_menu() {
  echo -e "\n${CYAN}Select priority level:${NC}"
  echo "0. Emergency (emerg)"
  echo "1. Alert (alert)"
  echo "2. Critical (crit)"
  echo "3. Error (err)"
  echo "4. Warning (warning)"
  echo "5. Notice (notice)"
  echo "6. Informational (info)"
  echo "7. Debug (debug)"
  echo -e "\nEnter your choice (0-7):"
}

list_services() {
  echo -e "\n${YELLOW}Listing available services...${NC}"
  if command -v systemctl >/dev/null 2>&1; then
    systemctl list-units --type=service --state=running --no-pager | head -20
    echo -e "\n${CYAN}Showing first 20 running services. Use 'systemctl list-units' for complete list.${NC}"
  else
    echo -e "${RED}systemctl not available${NC}"
  fi
}

show_system_info() {
  echo -e "\n${CYAN}System Information:${NC}"
  echo -e "${BLUE}Hostname:${NC} $(hostname)"
  echo -e "${BLUE}Kernel:${NC} $(uname -r)"
  echo -e "${BLUE}OS:${NC} $(grep PRETTY_NAME /etc/os-release | cut -d'"' -f2)"
  echo -e "${BLUE}Uptime:${NC} $(uptime -p 2>/dev/null || uptime)"
  echo -e "${BLUE}Journal disk usage:${NC}"
  journalctl --disk-usage
  echo -e "${BLUE}Current runlevel:${NC} $(runlevel 2>/dev/null || echo "N/A")"
}

configure_settings() {
  echo -e "\n${CYAN}Current Configuration:${NC}"
  echo -e "${BLUE}Default lines to display:${NC} $DEFAULT_LINES"
  echo -e "${BLUE}Default vacuum days:${NC} $DEFAULT_VACUUM_DAYS"
  echo -e "${BLUE}Default export format:${NC} $DEFAULT_EXPORT_FORMAT"

  echo -e "\n${YELLOW}Would you like to create/edit a configuration file? (y/N)${NC}"
  read -r config_choice

  if [[ "${config_choice,,}" == "y" ]]; then
    echo -e "\n${CYAN}Enter new default lines to display (current: $DEFAULT_LINES):${NC}"
    read -r new_lines
    echo -e "${CYAN}Enter new default vacuum days (current: $DEFAULT_VACUUM_DAYS):${NC}"
    read -r new_vacuum
    echo -e "${CYAN}Enter new default export format (current: $DEFAULT_EXPORT_FORMAT):${NC}"
    read -r new_format

    # Create config directory if it doesn't exist
    mkdir -p "$(dirname "$CONFIG_FILE")"

    # Write new configuration
    cat >"$CONFIG_FILE" <<EOF
# Logs Helper Configuration
DEFAULT_LINES=${new_lines:-$DEFAULT_LINES}
DEFAULT_VACUUM_DAYS=${new_vacuum:-$DEFAULT_VACUUM_DAYS}
DEFAULT_EXPORT_FORMAT="${new_format:-$DEFAULT_EXPORT_FORMAT}"
EOF

    echo -e "${GREEN}Configuration saved to $CONFIG_FILE${NC}"
    echo -e "${YELLOW}Restart the script to apply changes${NC}"
  fi
}

main() {
  while true; do
    print_header
    show_menu

    read -r choice

    case $choice in
    1)
      display_with_pagination "journalctl -n $DEFAULT_LINES" "View all logs (last $DEFAULT_LINES lines)"
      ;;
    2)
      echo -e "\n${YELLOW}Press Ctrl+C to stop following logs${NC}"
      execute_command "journalctl -f" "Follow logs in real-time"
      ;;
    3)
      display_with_pagination "journalctl -b -n $DEFAULT_LINES" "Logs from current boot (last $DEFAULT_LINES lines)"
      ;;
    4)
      display_with_pagination "journalctl -b -1 -n $DEFAULT_LINES" "Logs from previous boot (last $DEFAULT_LINES lines)"
      ;;
    5)
      echo -e "\nEnter service name (e.g., nginx, sshd):"
      read -r service
      if [[ -n "$service" ]]; then
        display_with_pagination "journalctl -u \"$service\" -n $DEFAULT_LINES" "Logs for service: $service"
      else
        echo -e "${RED}No service name provided${NC}"
      fi
      ;;
    6)
      display_with_pagination "journalctl -p err -n $DEFAULT_LINES" "Error and critical messages only"
      ;;
    7)
      display_with_pagination "journalctl -k -n $DEFAULT_LINES" "Kernel messages only"
      ;;
    8)
      display_with_pagination "journalctl --since '1 hour ago'" "Logs from last hour"
      ;;
    9)
      display_with_pagination "journalctl --since today" "Logs from today"
      ;;
    10)
      execute_command "journalctl --disk-usage" "Check journal disk usage" "true"
      ;;
    11)
      echo -e "\n${YELLOW}This will remove logs older than $DEFAULT_VACUUM_DAYS days${NC}"
      read -p "Continue? (y/N): " -r confirm
      if [[ "${confirm,,}" == "y" ]]; then
        execute_command "journalctl --vacuum-time=${DEFAULT_VACUUM_DAYS}d" "Clean up logs (keep $DEFAULT_VACUUM_DAYS days)" "true"
      fi
      ;;
    12)
      echo -e "\nEnter output filename (e.g., mylogs.txt):"
      read -r filename
      if [[ -n "$filename" ]]; then
        echo "Choose log type:"
        echo "1. All logs"
        echo "2. Current boot only"
        echo "3. Specific service"
        echo "4. Error logs only"
        read -r export_choice

        case $export_choice in
        1)
          eval "journalctl > \"$filename\""
          ;;
        2)
          eval "journalctl -b > \"$filename\""
          ;;
        3)
          echo "Enter service name:"
          read -r export_service
          if [[ -n "$export_service" ]]; then
            eval "journalctl -u \"$export_service\" > \"$filename\""
          else
            echo -e "${RED}No service name provided${NC}"
            continue
          fi
          ;;
        4)
          eval "journalctl -p err > \"$filename\""
          ;;
        *)
          echo -e "${RED}Invalid choice${NC}"
          continue
          ;;
        esac

        echo -e "${GREEN}Logs exported to $filename${NC}"
      else
        echo -e "${RED}No filename provided${NC}"
      fi
      ;;
    13)
      show_priority_menu
      read -r priority_choice
      case $priority_choice in
      0) priority="emerg" ;;
      1) priority="alert" ;;
      2) priority="crit" ;;
      3) priority="err" ;;
      4) priority="warning" ;;
      5) priority="notice" ;;
      6) priority="info" ;;
      7) priority="debug" ;;
      *)
        echo -e "${RED}Invalid priority level${NC}"
        continue
        ;;
      esac
      display_with_pagination "journalctl -p $priority -n $DEFAULT_LINES" "Logs with priority: $priority"
      ;;
    14)
      echo -e "\nEnter search pattern:"
      read -r search_pattern
      if [[ -n "$search_pattern" ]]; then
        display_with_pagination "journalctl -g \"$search_pattern\" -n $DEFAULT_LINES" "Logs matching: $search_pattern"
      else
        echo -e "${RED}No search pattern provided${NC}"
      fi
      ;;
    15)
      echo -e "\nEnter start time (e.g., '2023-01-01 10:00:00' or '1 hour ago'):"
      read -r start_time
      echo "Enter end time (optional, press Enter to skip):"
      read -r end_time

      if [[ -n "$start_time" ]]; then
        if [[ -n "$end_time" ]]; then
          display_with_pagination "journalctl --since \"$start_time\" --until \"$end_time\"" "Logs from $start_time to $end_time"
        else
          display_with_pagination "journalctl --since \"$start_time\"" "Logs since $start_time"
        fi
      else
        echo -e "${RED}No start time provided${NC}"
      fi
      ;;
    16)
      list_services
      ;;
    17)
      show_system_info
      ;;
    18)
      configure_settings
      ;;
    0)
      echo -e "\n${GREEN}Goodbye!${NC}"
      exit 0
      ;;
    *)
      echo -e "\n${RED}Invalid option. Please choose 0-18.${NC}"
      ;;
    esac

    echo -e "\n${BLUE}Press Enter to continue...${NC}"
    read -r
  done
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
  echo -e "${YELLOW}Warning: Running as root. Some operations may not need sudo.${NC}"
fi

# Check if journalctl is available
if ! command -v journalctl >/dev/null 2>&1; then
  echo -e "${RED}Error: journalctl not found. This script requires systemd.${NC}"
  exit 1
fi

main

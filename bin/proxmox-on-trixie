#!/usr/bin/env bash
set -euo pipefail

# Function to display usage information
show_usage() {
  echo "Usage: $0 <nic> <ip>"
  echo "Example: $0 ens33 192.168.184.135/24"
  echo ""
  echo "This script installs Proxmox VE on Debian Trixie"
  echo "and configures network bridging for the specified NIC."
}

# Function to validate IP address format
validate_ip() {
  local ip=$1
  local ip_regex='^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'

  if [[ ! $ip =~ $ip_regex ]]; then
    echo "Error: IP '$ip' is not in valid IP/CIDR format (e.g., 192.168.1.10/24)"
    return 1
  fi

  # Extract and validate IP octets
  local ip_part="${ip%/*}"
  IFS='.' read -ra ADDR <<<"$ip_part"
  for octet in "${ADDR[@]}"; do
    if ((octet > 255)); then
      echo "Error: IP octet '$octet' is out of range (0-255)"
      return 1
    fi
  done

  return 0
}

# Function to validate NIC name
validate_nic() {
  local nic=$1
  if [[ -z "$nic" ]]; then
    echo "Error: NIC name cannot be empty"
    return 1
  fi

  # Check if NIC exists (optional, may not exist before configuration)
  if ! ip link show "$nic" &>/dev/null; then
    echo "Warning: NIC '$nic' does not exist or is not accessible"
    echo "This may be expected if the NIC hasn't been configured yet"
  fi

  return 0
}

# Function to extract gateway from IP address
extract_gateway() {
  local ip=$1
  echo "$ip" | awk -F'/' '{split($1, octets, "."); print octets[1]"."octets[2]"."octets[3]".1"}'
}

# Function to display configuration summary
show_config_summary() {
  local nic=$1
  local ip=$2
  local gateway=$3
  local dns=$4

  echo "Configuration summary:"
  echo "  NIC: $nic"
  echo "  IP: $ip"
  echo "  Gateway: $gateway"
  echo "  DNS: $dns"
  echo ""
}

# Function to disable NetworkManager
disable_networkmanager() {
  local nic=$1
  echo "[1] Disabling NetworkManager on $nic"
  nmcli device set "$nic" managed no
  systemctl stop NetworkManager
  systemctl disable NetworkManager || true
}

# Function to configure network interfaces
configure_network() {
  local nic=$1
  local ip=$2
  local gateway=$3
  local dns=$4
  local bridge="vmbr0"

  echo "[2] Configuring /etc/network/interfaces"
  cp /etc/network/interfaces /etc/network/interfaces.bak

  cat >/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto $nic
iface $nic inet manual

auto $bridge
iface $bridge inet static
    address $ip
    gateway $gateway
    bridge_ports $nic
    bridge_stp off
    bridge_fd 0
    dns-nameservers $dns
EOF

  # Reload interfaces
  ifdown "$nic" || true
  ifreload -a
}

# Function to add Proxmox repository
add_proxmox_repo() {
  echo "[3] Adding Proxmox repository"
  echo "deb http://download.proxmox.com/debian/pve trixie pve-no-subscription" \
    >/etc/apt/sources.list.d/pve.list

  curl -fsSL https://enterprise.proxmox.com/debian/proxmox-release-trixie.gpg |
    gpg --dearmor -o /etc/apt/trusted.gpg.d/proxmox-release-trixie.gpg

  apt update
}

# Function to install Proxmox VE
install_proxmox() {
  echo "[4] Installing Proxmox VE"
  DEBIAN_FRONTEND=noninteractive apt install -y proxmox-ve postfix open-iscsi
}

# Function to install Proxmox kernel
install_proxmox_kernel() {
  echo "[5] Installing Proxmox kernel"
  apt install -y pve-kernel-6.8
  apt remove -y linux-image-amd64 linux-image-generic || true
}

# Function to initialize Proxmox cluster
initialize_cluster() {
  local hostname=$1
  echo "[6] Cleaning /etc/pve and initializing cluster"
  systemctl stop pve-cluster corosync || true
  umount -f /etc/pve 2>/dev/null || true
  rm -rf /etc/pve/*
  mkdir -p /etc/pve

  pmxcfs -l &
  sleep 10
  kill %1

  pvecm create "$hostname"
}

# Function to regenerate SSL certificates
regenerate_ssl() {
  echo "[7] Regenerating Proxmox SSL certificates"
  pvecm updatecerts --force
  systemctl restart pveproxy
  systemctl restart pve-cluster
}

# Function to verify services
verify_services() {
  echo "[8] Verifying services"
  systemctl status pveproxy pve-cluster | grep Active
  ss -tlnp | grep 8006
}

# Function to display completion message
show_completion() {
  local ip=$1
  echo "=== DONE ==="
  echo "Access Proxmox Web UI at https://$ip:8006 (ignore self-signed certificate warning)"
}

# Main function
main() {
  # Check arguments
  if [[ $# -ne 2 ]]; then
    show_usage
    exit 1
  fi

  # Set variables
  local hostname
  hostname="$(hostname)"
  local nic="$1"
  local ip="$2"
  local dns="1.1.1.1 8.8.8.8"

  # Validate inputs
  if ! validate_nic "$nic"; then
    exit 1
  fi

  if ! validate_ip "$ip"; then
    exit 1
  fi

  # Extract gateway from IP
  local gateway
  gateway=$(extract_gateway "$ip")

  # Show configuration summary
  show_config_summary "$nic" "$ip" "$gateway" "$dns"

  # Execute installation steps
  disable_networkmanager "$nic"
  configure_network "$nic" "$ip" "$gateway" "$dns"
  add_proxmox_repo
  install_proxmox
  install_proxmox_kernel
  initialize_cluster "$hostname"
  regenerate_ssl
  verify_services
  show_completion "$ip"
}

# Run main function with all arguments
main "$@"

#! /usr/bin/env bash

{

si() {
    for p in "$@"; do
      slog "Installing package $p"
      sudo apt-get -qq -y install "$p"
    done
}

update_packages() {
    slog "Updating"

    if ! { sudo apt-get -qq update && sudo apt-get -qq upgrade -y; }; then
      err_exit "apt-get update/upgrade failed, quitting"
    fi
}

core_install() {
    update_packages

    si software-properties-common apt-transport-https ca-certificates gpg cmake
    si curl wget git trash-cli tree command-not-found build-essential tar unzip

    cmd_check gcc g++ make cmake curl wget git trash tree command-not-found
}

sys_python_install() {
    slog "Installing python"

    si python3 python3-venv python3-virtualenv python3-pip python3-setuptools python3-wheel python-is-python3 pipx
    pipx install uv

    slog "Python installation done!"
    cmd_check uv
}

snap_install() {
    has_cmd snap && return 0

    slog "Installing snap..."
    si snapd
    sudo snap install core

    slog "snap installation done!"
}

essential_install() {
    slog "Installing essential packages"

    core_install

    si zip unar zsh micro
    si gawk tmux pkg-config urlview nala p7zip
    si libreadline-dev libsqlite3-dev libffi-dev libbz2-dev liblzma-dev

    cmd_check tmux zsh micro tar zup unar gawk

    sys_python_install

    webi_install
    mise_install
    brew_install
    snap_install

    cmd_check webi mise brew snap

    brew install -q just chezmoi atuin uutils-coreutils

    slog "Essential packages installation done!"
}

cli_install() {
    si gh shellcheck
    webi curlie shfmt
    si sd lsd gdu bat hyperfine fd-find fzf ripgrep zoxide
    gh extension install github/gh-copilot

    neovim_install

    cmd_check gh shellcheck curlie shfmt sd lsd gdu bat hyperfine fd fzf ripgrep zoxide
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb g++ libboost-all-dev catch2
    si clang llvm clang-tidy clang-format clang-tools libclang-dev
    si doxygen graphviz ccache cppcheck pre-commit
    si valgrind systemtap ltrace strace lldb lld

    cmd_check gcc g++ gdb clang clang-tidy clang-format

    cmake_install
    conan_install

    slog "C++ installation done!"
}

vscode_install() {
    has_cmd code && return 0

    if ! grep -q "https://packages.microsoft.com/repos/code stable main" /etc/apt/sources.list.d/vscode.list; then
        echo "code code/add-microsoft-repo boolean true" | sudo debconf-set-selections

        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg

        echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" |sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null

        rm -f packages.microsoft.gpg
    fi

    sudo apt-get update
    si code

    cmd_check code
}

ui_install() {
    si chromium-browser virt-manager gnome-keyring xsel xclip wl-clipboard
    cmd_check chromium-browser virt-manager xsel xclip

    vscode_install
    flathub_install
    flatpak_apps_install
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-sosreport cockpit-pcp cockpit-podman cockpit-storaged
    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

podman_install() {
    si podman podman-toolbox podman-compose

    cmd_check podman
}

libvirt_install() {
    si buildah libvirt-daemon distrobox
    sudo systemctl enable --now libvirtd
}

incus_install() {
    si incus
    incus_config_install
}

ct_install() {
    incus_install
    docker_install
    portainer_install
    podman_install
    si buildah distrobox
    cockpit_install

}

virt_install() {
    ct_install
    libvirt_install
    code_server_install
}

}

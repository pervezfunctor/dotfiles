#! /usr/bin/env bash

{

si() {
    for p in "$@"; do
      slog "Installing package $p"
      sudo apt-get -y install "$p"
    done
}

update_packages() {
    slog "Updating"

    if ! { sudo apt-get update && sudo apt-get upgrade -y; }; then
      err_exit "apt-get update/upgrade failed, quitting"
    fi
}

core_install() {
    si software-properties-common apt-transport-https ca-certificates
    si curl wget git trash-cli tree zsh micro
    si build-essential tar zip unzip unar

    si command-not-found
    sudo apt-get update
}

sys_python_install() {
    si python3 python3-venv python3-virtualenv python3-pip python3-setuptools python3-wheel python-is-python3 pipx
}

snap_install() {
    has_cmd snap && return 0

    slog "Installing snap..."
    si snapd
    sudo snap install core

    slog "snap installation done!"
}

essential_install() {
    update_packages

    slog "Installing essential packages"

    core_install

    si gawk tmux pkg-config urlview nala p7zip
    si libreadline-dev libsqlite3-dev libffi-dev libbz2-dev liblzma-dev

    sys_python_install

    webi_install
    webi brew pathman
    snap_install

    brew install just chezmoi atuin uutils-coreutils

    slog "Essential packages installation done!"
}

cli_install() {
    si gh shellcheck
    webi curlie shfmt
    si sd lsd gdu bat hyperfine fd-find fzf ripgrep zoxide
    gh extension install github/gh-copilot

    neovim_install
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb g++ libboost-all-dev catch2
    si clang llvm clang-tidy clang-format clang-tools libclang-dev
    si doxygen graphviz ccache cppcheck pre-commit
    si valgrind systemtap ltrace strace lldb lld

    cmake_install
    conan_install

    slog "C++ installation done!"
}

vscode_install() {
    has_cmd code && return 0

    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    sudo add-apt-repository -y "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    sudo apt-get update
    si code
}

ui_install() {
    si chromium-browser virt-manager gnome-keyring xsel xclip wl-clipboard
    vscode_install
    flathub_install
    flatpak_apps_install
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-sosreport cockpit-pcp cockpit-podman cockpit-storaged
    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

podman_install() {
    si podman podman-toolbox podman-compose
}

libvirt_install() {
    si buildah libvirt-daemon distrobox
    sudo systemctl enable --now libvirtd
}

ct_install() {
    docker_install
    podman_install
    si buildah distrobox
    cockpit_install

}

virt_install() {
    ct_install
    libvirt_install
    code_server_install
}

}

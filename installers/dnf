#! /usr/bin/env bash

{

si() {
    for p in "$@"; do
        slog "Installing package $p"
        sudo dnf -q -y install "$p"
    done
}

enable_epel() {
    slog "Enabling EPEL"
    sudo dnf config-manager --set-enabled crb
    si epel-release
}

update_packages() {
    slog "Updating packages"
    if ! { sudo dnf update -q -y && sudo dnf upgrade -q -y; }; then
        err_exit "dnf update/upgrade failed, quitting"
    fi
}


base_dev_install() {
    if dnf group list -q | grep -q "c-development"; then
        si @c-development
    elif dnf group list -q | grep -q "Development Tools"; then
        sudo dnf group install --setop=install_weak_deps=False --with-optional -y "Development Tools"
    else
        si gcc make cmake autoconf automake binutils expect flex bison glibc-devel
    fi
}

sys_python_install() {
    si python3 python3-virtualenv pipx python3-pip python3-setuptools python3-wheel
    pipx install uv
    pipx ensurepath
}

core_install() {
    si 'dnf-command(copr)'
    si 'dnf-command(config-manager)'
    is_fedora || enable_epel

    update_packages
    base_dev_install

    si curl wget git-core trash-cli cmake tree tar unzip stow
    si util-linux-user which fuse fuse-libs zstd
}

essential_install() {
    slog "Installing essential packages"

    core_install
    mise_install
    sys_python_install
    # snap_install

    si zip p7zip cmake unar
    si readline-devel sqlite-devel libffi-devel bzip2-devel xz-devel

    micro_install

    si gum


    slog "Essential packages installation done!"
}

cli_install() {
    brew_install
    webi_install

    si zsh neovim ShellCheck python3-neovim tmux pkg-config urlview htop
    si git-delta procs fzf ripgrep fd-find hyperfine bat zoxide gawk
    si rust-tree-sitter-cli

    gh extension install github/gh-copilot
}

snap_install() {
    has_cmd snap && return 1

    slog "Installing snapd"
    si snapd
    sudo systemctl enable --now snapd.socket
    [ -e /snap ] || sudo ln -s /var/lib/snapd/snap /snap

    slog "snapd setup done!"
}

cpp_install() {
    slog "Installing C++"

    si gcc gcc-c++ gdb valgrind systemtap ltrace strace
    si clang clang-devel clang-tools-extra clang-libs
    si clang-analyzer lldb lld llvm llvm-devel
    si graphviz ccache cppcheck pre-commit

    conan_install
    cmake_install

    if is_rocky; then
        si boost1.78 boost1.78-devel boost1.78-static catch-devel
    elif is_fedora; then
        si boost boost-devel boost-static catch-devel
        sudo dnf groupinstall -q -y --with-optional "C Development Tools and Libraries"
    fi

    slog "C++ installation done!"
}

vscode_install() {
    has_cmd code && return 1

    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    dnf check-update
    si code code-insiders

    cmd_check code
}

ghostty_install() {
    has_cmd ghostty && return 1

    sudo dnf copr -y enable pgdev/ghostty
    si ghostty
}

ui_install() {
    si virt-manager chromium gnome-keyring xsel xclip wl-clipboard

    ghostty_install
    vscode_install
    flathub_install
    apps_install
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-pcp cockpit-podman cockpit-storaged firewalld # cockpit-file-sharing
    sudo systemctl enable --now cockpit.socket
    sudo systemctl enable --now firewalld
    sudo firewall-cmd --add-service=cockpit
    sudo firewall-cmd --add-service=cockpit --permanent

    slog "cockpit installation done!"
}

docker_install() {
    has_cmd docker && return 1

    slog "Installing docker"

    si dnf-plugins-core

    is_rocky && sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    is_fedora && sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

    si docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    docker_common_install

    slog "docker installation done!"
}

podman_install() {
    si podman podman-compose podman-tui toolbox
}

incus_install() {
    if ! is_fedora; then
        sudo dnf -y copr enable neil/incus
    fi

    si incus
    incus_config_install
}

vm_install() {
    sudo dnf groupinstall -q -y --with-optional "System Tools"
    si libvirt buildah distrobox
    sudo systemctl enable --now libvirtd
}

ct_install() {
    incus_install
    docker_install
    portainer_install
    podman_install
    cockpit_install

    si buildah distrobox
}

virt_install() {
    ct_install
    vm_install

    code_server_install
}


more_virt_install() {
    si samba-dcerpc samba-ldb-ldap-modules samba-winbind-clients
    si samba-winbind-modules samba

    si cockpit-machines cockpit-networkmanager cockpit-system
    si cockpit-ostree cockpit-pcp cockpit-podman cockpit-selinux cockpit-storaged
    si podman-compose podman-tui podmansh powertop qemu-char-spice
    si qemu-device-display-virtio-gpu qemu-device-display-virtio-vga
    si qemu-device-usb-redirect qemu-img qemu-system-x86-core qemu-user-binfmt
    si qemu-user-static qemu rocm-hip rocm-opencl udica
    si virt-manager virt-viewer libvirt

    # si containerd.io dbus-x11 docker-ce docker-ce-cli docker-buildx-plugin docker-compose-plugin
    # si incus incus-agent lxc lxd-agent lxd kcli ubuntu-family-fonts
}

more_ui_install() {
    si wireguard-tools xprop solaar stress-ng usbmuxd
    si mesa-libGLU playerctl pulseaudio-utils

    if is_kde; then
        si libadwaita-qt5 libadwaita-qt6 kde-runtime-docs kdeplasma-addons plasma-wallpapers-dynamic
    elif is_gnome; then
        si gnome-shell-extension-appindicator gnome-shell-extension-blur-my-shell
        si gnome-shell-extension-caffeine gnome-shell-extension-dash-to-dock
        si gnome-shell-extension-gsconnect
        # si gnome-shell-extension-search-light gnome-shell-extension-logo-menu
        si libgda libgda-sqlite
        si libratbag-ratbagd nautilus-gsconnect openssh-askpass yaru-theme
    fi

}

more_fonts_install() {
    si cascadia-code-fonts adobe-source-code-pro-fonts mozilla-fira-mono-fonts fira-code-fonts
    si jetbrains-mono-fonts-all google-go-mono-fonts ibm-plex-mono-fonts
    si google-droid-sans-mono-fonts powerline-fonts
}

more_essential_install() {
    bi glow gum
    si rclone restic wl-clipboard

    si edk2-ovmf genisoimage iotop p7zip-plugins p7zip
    si bash-color-prompt bcache-tools evtest fastfetch firewall-config
    si hplip ifuse input-remapper libimobiledevice libxcrypt-compat
}

}

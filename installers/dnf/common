#! /usr/bin/env bash

{

si() {
    for p in "$@"; do
        slog "Installing package $p"
        sudo dnf -y install "$p"
    done
}

enable_epel() {
    slog "Enabling EPEL"
    sudo dnf config-manager --set-enabled crb
    si epel-release
}

update_packages() {
    slog "Updating packages"
    if ! { sudo dnf update -y && sudo dnf upgrade -y; }; then
        err_exit "dnf update/upgrade failed, quitting"
    fi
}

core_install() {
    si 'dnf-command(copr)'
    si 'dnf-command(config-manager)'

    si curl wget git trash-cli tree tar unar zip unzip zsh
    sudo dnf group install -y "C Development Tools and Libraries"

    micro_install
}

sys_python_install() {
    si python3 python3-virtualenv pipx python3-pip python3-setuptools python3-wheel
}

essential_install() {
    is_fedora || enable_epel

    slog "Installing essential packages"

    core_install

    si gawk tmux pkg-config urlview p7zip xclip xsel 
    si readline-devel sqlite-devel libffi-devel bzip2-devel xz-devel
   
    sys_python_install
    
    webi_install
    webi brew pathman

    snap_install
 
    slog "Essential packages installation done!"
}

cli_install() {
    si neovim ShellCheck python3-neovim
    webi curlie lsd shfmt gh lazygit
    gh extension install github/gh-copilot
    si git-delta procs fzf ripgrep fd-find hyperfine bat zoxide
    
    brew install gdu
    alias gdu=gdu-go
}

snap_install() {
    has_cmd snap && return 1

    slog "Installing snapd"
    si snapd
    sudo systemctl enable --now snapd.socket
    [ -e /snap ] || sudo ln -s /var/lib/snapd/snap /snap

    slog "snapd setup done!"
}

cpp_install() {
    slog "Installing C++"

    sudo dnf groupinstall "Development Tools" -y
    si gcc gcc-c++ gdb valgrind systemtap ltrace strace
    si clang clang-devel clang-tools-extra clang-libs
    si clang-analyzer lldb lld llvm llvm-devel
    si graphviz ccache cppcheck pre-commit

    conan_install
    cmake_install

    if is_rocky; then
        si boost1.78 boost1.78-devel boost1.78-static catch-devel
    elif is_fedora; then
        si boost boost-devel boost-static catch-devel
        sudo dnf groupinstall -y --with-optional "C Development Tools and Libraries"
    fi

    slog "C++ installation done!"
}

vscode_install() {
    has_cmd code && return 1

    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    dnf check-update
    si code code-insiders
}

apps_install() {
    vscode_install
    si virt-manager chromium gnome-keyring
    flathub_install
    flatpak_apps_install
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-file-sharing cockpit-machines cockpit-pcp cockpit-podman cockpit-storaged firewalld
    sudo systemctl enable --now cockpit.socket
    sudo systemctl enable --now firewalld
    sudo firewall-cmd --add-service=cockpit
    sudo firewall-cmd --add-service=cockpit --permanent

    slog "cockpit installation done!"
}

docker_install() {
    has_cmd docker && return 1

    slog "Installing docker"

    si dnf-plugins-core

    is_rocky && sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    is_fedora && sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

    si docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    docker_common_install

    slog "docker installation done!"
}

podman_install() {
    si podman podman-compose podman-tui toolbox
}

libvirt_install() {
    sudo dnf groupinstall -y --with-optional "System Tools"

    si libvirt buildah distrobox

    sudo systemctl enable --now libvirtd
}

ct_install() {
    docker_install
    podman_install
    cockpit_install
}

virt_install() {
    ct_install
    libvirt_install
    code_server_install
}

atomic_pkgs_install() {
    declare -a pkgs

    has_cmd pipx || pkgs+=("pipx")
    has_cmd xsel || pkgs+=("xsel")
    has_cmd xclip || pkgs+=("xclip")

    has_cmd git || pkgs+=("git")
    has_cmd tar || pkgs+=("tar")

    has_cmd wget || pkgs+=("wget")
    has_cmd unzip || pkgs+=("unzip")
    has_cmd trash || pkgs+=("trash-cli")
    has_cmd zsh || pkgs+=("zsh")
    has_cmd tmux || pkgs+=("tmux")
    has_cmd urlview || pkgs+=("urlview")
    has_cmd fzf || pkgs+=("fzf")
    has_cmd fd || pkgs+=("fd-find")
    has_cmd zoxide || pkgs+=("zoxide")
    has_cmd hyperfine || pkgs+=("hyperfine")
    has_cmd micro || pkgs+=("micro")

    sudo rpm-ostree install -y "${pkgs[@]}"
}

atomic_virt_install() {
    declare -a pkgs

    has_cmd virt-manager || pkgs+=("virt-manager" "libvirt")
    has_cmd distrobox || pkgs+=("distrobox")
    has_cmd cockpit || pkgs+=("cockpit" "cockpit-file-sharing" "cockpit-machines" "cockpit-pcp"
    "cockpit-podman" "cockpit-storaged")
    sudo rpm-ostree install -y "${pkgs[@]}"
}

}

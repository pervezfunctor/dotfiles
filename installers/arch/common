#! /usr/bin/env bash

{

si() {
    for p in "$@"; do
        slog "Installing package $p"
        sudo pacman -S --needed --quiet --noconfirm "$p"
    done
}

update_packages() {
    slog "Updating"

    if ! sudo pacman -Syu; then
        err_exit "pacman update/upgrade failed, quitting"
    fi
}

core_install() {
    si curl wget git base-devel trash-cli tar tree micro go unzip p7zip zip
    si zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions
}

sys_python_install() {
    si python python-pip python-virtualenv python-wheel python-pipx
}

yay_install() {
    srm /tmp/yay
    git clone https://aur.archlinux.org/yay.git /tmp/yay && cd /tmp/yay && makepkg -si && cd - && srm /tmp/yay
}

essential_install() {
    update_packages

    slog "Installing essential packages"

    core_install

    si tmux pkg-config fasd shfmt shellcheck xclip xsel micro github-cli

    sys_python_install

    si sd lsd gdu bat hyperfine fd fzf ripgrep zoxide

    slog "Essential packages installation done!"
}

flathub_install() {
    si flatpak
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb boost boost-libs catch2 libc++ clang llvm
    si doxygen graphviz ccache cppcheck pre-commit
    si valgrind ltrace strace lldb lld

    cmake_install
    conan_install

    slog "C++ installation done!"
}

vscode_install() {
    yay -Sy --noconfirm visual-studio-code-bin
}

# vscode_install() {
#     has_cmd code && return 0
#
#     wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
#     sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
#     sudo apt-get update
#     si code
# }
#
apps_install() {
    si chromium virt-manager
    flatpak_apps_install
}

docker_install() {
    has_cmd docker && return 0

    slog "Installing docker..."

    srm /tmp/get-docker.sh
    curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
    sudo sh /tmp/get-docker.sh
    srm /tmp/get-docker.sh


    docker_common_install

    slog "Docker installation done!"
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-packagekit cockpit-pcp cockpit-podman cockpit-storaged
    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

podman_install() {
    si podman podman-compose podman-docker
}

libvirt_install() {
    si buildah libvirt virt-install distrobox

    sudo systemctl enable --now libvirtd
}

ct_install() {
    docker_install
    podman_install
    cockpit_install
}

virt_install() {
    ct_install
    libvirt_install
    code_server_install
}

}

#! /usr/bin/env bash

{

cargoi() {
  for p in "$@"; do
    slog "Installing cargo package $p"
    cargo +stable install --locked "$p"
  done
}

flathub_install() {
    has_cmd flatpak || si flatpak

    if has_cmd flatpak; then
        slog "Adding flathub remote"
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
    else
        warn "flatpak not installed! Ignoring flathub config."
    fi
}

fpi() {
    for pkg in "$@"; do
        slog "Installing flatpak package $pkg"
        flatpak install -y --user flathub "$pkg"
    done
}

flatpak_apps_install() {
    if ! has_cmd flatpak; then
        warn "flatpak not installed, skipping flatpak apps"
        return 1
    fi

    slog "Installing flatpak apps"
    # fpi com.jetbrains.CLion
    # fpi com.google.Chrome
    fpi org.telegram.desktop
    fpi org.deluge_torrent.deluge
    fpi us.zoom.Zoom
    fpi org.wezfurlong.wezterm
    fpi io.github.shiftey.Desktop
    fpi io.github.dvlv.boxbuddyrs
    fpi md.obsidian.Obsidian

    alias wezterm="flatpak run org.wezfurlong.wezterm"
}

webi-shell_install() {
    webi node golang go-essentials shellcheck shfmt pathman
    webi bat curlie delta jq lsd rg gh fd sd
    # webi caddy xcaddy gitdeploy gitea rclone serviceman syncthing k9s kubectx kubens
    # webi pyenv
    # webi fd git watchexec rustlang
    # sudo apt install -y libreadline-dev libsqlite3-dev libffi-dev libbz2-dev liblzma-dev
}

astro_install() {
    slog "AstroNvim config"

    fmv $XDG_CONFIG_HOME/nvim $XDG_CONFIG_HOME/nvim.bak
    fmv ~/.local/share/nvim ~/.local/share/nvim.bak
    fmv ~/.local/state/nvim ~/.local/state/nvim.bak
    fmv ~/.cache/nvim ~/.cache/nvim.bak

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R nvim

    slog "AstroNvim config done!"
}

bash_install() {
    slog "Configuring bash"

    if ! has_cmd starship; then
        curl -sS https://starship.rs/install.sh | sh -s -- -y
    fi
    if ! grep -q starship ~/.bashrc ; then
        echo 'eval "$(starship init bash)"' >> ~/.bashrc
    fi

    if ! grep -q $DOT_DIR/stow/.local/share/shellrc ~/.bashrc; then
        echo "source $DOT_DIR/stow/.local/share/shellrc" >> ~/.bashrc
    fi

    slog "bash config done!"
}

vscode_config_install() {
    slog "vscode config"

    if is_mac; then
        scp $DOT_DIR/extras/vscode/settings.json "$HOME/Library/Application Support/Code/User/settings.json"
    else
        smd $XDG_CONFIG_HOME/Code/User
        scp $DOT_DIR/extras/vscode/settings.json $XDG_CONFIG_HOME/Code/User/settings.json
    fi

    slog "vscode config done!"
}

zsh_config_install() {
    slog "zsh config"

    smd $XDG_CONFIG_HOME/.config/zsh
    sclone --depth=1 https://github.com/sindresorhus/pure.git $XDG_CONFIG_HOME/.config/zsh/pure
    sclone --depth=1 https://github.com/djui/alias-tips.git $XDG_CONFIG_HOME/.config/zsh/alias-tips

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R zsh

    slog "zsh config done!"
}

tmux_config_install() {
    slog "tmux config"

    #smd $XDG_CONFIG_HOME/tmux
    # fln "${DOT_DIR}/configs/.config/tmux/tmux.conf" $XDG_CONFIG_HOME/tmux/tmux.conf

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R tmux

    slog "tmux config done!"
}

incus_config_install() {
    slog "incus config"

    if ! has_cmd incus; then
        warn "incus not installed, skipping incus config"
        return 0
    fi
    slog "incus config"

    sudo incus admin init --minimal
    sudo usermod -aG incus $USER

    if has_cmd firewalld; then
        sudo firewall-cmd --zone=trusted --change-interface=incusbr0 --permanent
        sudo firewall-cmd --reload
    fi

    slog "incus config done!"
}

treesitter_install() {
    has_cmd tree-sitter && return 0

    if has_cmd cargo; then
      cargo install tree-sitter-cli
    elif has_cmd pnpm; then
      pnpm install -g tree-sitter-cli
    elif has_cmd npm; then
      npm install -g tree-sitter-cli
    else
      slog "tree-sitter-cli not installed"
    fi

    cmd_check tree-sitter
}

neovim_install() {
    is_mac && return 0

    has_cmd nvim && return 0

    slog "Installing neovim..."

    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage

    ./nvim.appimage --appimage-extract

    sudo mv squashfs-root /
    sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
    frm nvim.appimage

    cmd_check nvim

    treesitter_install

    si luarocks

    if has_cmd npm; then
        npm install -g neovim
    elif has_cmd npm; then
        npm install -g neovim
    fi

    has_cmd pip && pip install --user neovim

    slog "Neovim installation done!"

    cmd_check nvim
}

micro_install() {
    has_cmd micro && return 0

    slog "Installing micro"

    curl https://getmic.ro | bash
    sudo mv micro /usr/bin/

    slog "micro installation done!"

    cmd_check micro
}

rust_install() {
    file_exists "$HOME/.cargo/env" && source "$HOME/.cargo/env"

    has_cmd rustup && return 0

    slog "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"

    slog "rust installation done!"

    cmd_check rustc
}

miniconda_install() {
    has_cmd conda && return 0
    dir_exists ~/miniconda3 && return 0

    slog "Installing miniconda"

    smd ~/miniconda3
    download_to https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
    frm ~/miniconda3/miniconda.sh
    has_cmd bash && ~/miniconda3/bin/conda init bash
    has_cmd zsh && ~/miniconda3/bin/conda init zsh

    slog "miniconda installation done!"

    cmd_check conda
}

pnpm_install() {
    has_cmd pnpm && return 0

    slog "Installing pnpm"
    curl -sSL https://get.pnpm.io/install.sh | sh -

    slog "Installing node"
    pnpm env use --global latest

    has_cmd bash && pnpm install-completion bash
    has_cmd zsh && pnpm install-completion zsh


    slog "pnpm/node installation done!"

    cmd_check pnpm
}

web_install() {
    slog "Installing npm packages globally"
    pnpm install -g ndb @antfu/ni
    pnpm install -g tsx vite-node zx turbo

    if ! grep "fs.inotify.max_user_watches" /etc/sysctl.conf > /dev/null; then
        echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf > /dev/null && sudo sysctl -p
    fi

    if is_apt; then
        pnpm dlx playwright install-deps
        pnpm dlx playwright install
    fi
}

brew_install() {
    has_cmd brew && return 0

    slog "Installing homebrew"
    NONINTERACTIVE=1 /bin/bash -c "$(curl -sSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    slog "homebrew installation done!"

    if has_cmd /opt/homebrew/bin/brew; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif has_cmd /home/linuxbrew/.linuxbrew/bin/brew; then
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    else
        warn "Homebrew not installed properly!"
    fi

    cmd_check brew
}

bi() {
    for p in "$@"; do
        slog "Installing package $p"
        brew install -q "$p"
    done
}

bis() {
    for p in "$@"; do
        slog "Installing package $p"
        has_cmd "$p" || brew install -q "$p"
    done
}

wis() {
    for p in "$@"; do
        slog "Installing webi package $p"
        has_cmd $p || webi $p
    done
}

monaspace_install() {
    file_exists ~/.local/share/fonts/MonaspaceRadon-Regular.otf && return 0

    smd ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
    wget -nv https://github.com/githubnext/monaspace/releases/download/v1.000/monaspace-v1.000.zip -O /tmp/monaspace.zip
    unzip -qq -d /tmp/monaspace -o /tmp/monaspace.zip


    cp /tmp/monaspace/monaspace-*/fonts/otf/* ~/.local/share/fonts
    cp /tmp/monaspace/monaspace-*/fonts/variable/* ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
}

nerd_font_install() {
    smd ~/.local/share/fonts

    if ! file_exists ~/.local/share/fonts/MonaspiceRnNerdFont-Regular.otf; then
        frm /tmp/monaspace /tmp/CascadiaMono.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/CascadiaMono.zip -O /tmp/CascadiaMono.zip
        unzip -qq -d /tmp/monaspace -o /tmp/CascadiaMono.zip
        cp /tmp/monaspace/*.ttf ~/.local/share/fonts
        frm /tmp/monaspace /tmp/CascadiaMono.zip
    fi

    if ! file_exists ~/.local/share/fonts/MonaspiceRnNerdFont-Regular.otf; then
        frm /tmp/monaspace /tmp/Monaspace.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Monaspace.zip -O /tmp/Monaspace.zip
        unzip -qq -d /tmp/monaspace -o /tmp/Monaspace.zip
        cp /tmp/monaspace/*.otf ~/.local/share/fonts
        frm /tmp/monaspace /tmp/Monaspace.zip
    fi

    if ! file_exists ~/.local/share/fonts/JetBrainsMonoNLNerdFontPropo-Regular.ttf; then
        frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip -O /tmp/jetbrains-mono.zip
        unzip -qq -d /tmp/jetbrains-mono -o /tmp/jetbrains-mono.zip
        cp /tmp/jetbrains-mono/*.ttf ~/.local/share/fonts
        frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
    fi

}

fonts_install() {
    if ! has_cmd wget || ! has_cmd unzip; then
        warn "wget and unzip not installed, skipping fonts"
        return 1
    fi

    slog "Installing fonts"

    monaspace_install
    nerd_font_install

    if is_apt; then
        si fonts-cascadia-code fonts-jetbrains-mono
    elif is_rh; then
        is_fedora || si cascadia-fonts-all jetbrains-mono-fonts-all
    fi

    slog "Fonts installation done!"
}

doom_install() {
    dir_exists $XDG_CONFIG_HOME/doom && return 0

    slog "Installing doom"

    sclone --depth=1 https://github.com/doomemacs/doomemacs $XDG_CONFIG_HOME/emacs
    fmv $XDG_CONFIG_HOME/doom $XDG_CONFIG_HOME/doom.backup
    sclone https://github.com/pervezfunctor/doomemacs-config $XDG_CONFIG_HOME/doom

    slog "Configure doom"
    doom sync
    doom env

    slog "doom installation done!"

    has_cmd update-locale && sudo update-locale LANG=en_US.UTF8
}

emacs_install() {
    slog "Installing emacs"

    if is_apt; then
        echo "postfix postfix/main_mailer_type select No configuration" | sudo debconf-set-selections
        si -y --no-install-recommends emacs
    elif is_rh; then
        si emacs
    elif is_mac; then
        brew tap railwaycat/emacsmacport
        bi emacs-mac --with-modules
        ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications/Emacs.app
    fi

    slog "emacs installation done!"

    cmd_check emacs
}

git_conf() {
    git config --global "$@"
}

git_config_install() {
    slog "Configuring git"

    is_wsl && git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager-core.exe"

    # stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R git

    git_conf init.defaultBranch main
    git_conf pull.ff only
    git_conf delta.navigate true
    git_conf delta.line-numbers true
    git_conf delta.syntax-theme "Monokai Extended"
    git_conf delta.side-by-side true
    git_conf merge.conflictStyle diff3
    git_conf interactive.diffFilter "delta --color-only"
    git_conf fetch.prune true

    if [[ "$USER" == "pervez" ]]; then
        git_conf user.name "Pervez Iqbal"
        git_conf user.email "pervefunctor@gmail.com"
    fi


    slog "git configuration done!"
}

go_install() {
    if ! has_cmd go; then
        slog "Installing go"

        sudo rm -rf /usr/local/go
        VERSION=$(curl -sSL "https://go.dev/VERSION?m=text" | head -n 1)
        frm /tmp/${VERSION}.linux-amd64.tar.gz
        wget -nv "https://dl.google.com/go/${VERSION}.linux-amd64.tar.gz" -O /tmp/"${VERSION}.linux-amd64.tar.gz"
        slog "Untar ${VERSION}.linux-amd64.tar.gz"
        sudo tar -C /usr/local -xzf /tmp/"${VERSION}.linux-amd64.tar.gz"
        frm /tmp/${VERSION}.linux-amd64.tar.gz
        export PATH=$PATH:/usr/local/go/bin

        slog "go installation done!"

        cmd_check go
    fi

    slog "Installing go dev tools..."

    go install golang.org/x/lint/golint@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/tools/gopls@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/ramya-rao-a/go-outline@latest
    go install github.com/acroca/go-symbols@latest
    go install github.com/mdempsky/gocode@latest
    go install github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest
    go install github.com/cweill/gotests/gotests@latest
    go install github.com/fatih/gomodifytags@latest
    go install github.com/josharian/impl@latest
    go install github.com/haya14busa/goplay/cmd/goplay@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/davidrjenni/reftools/cmd/fillstruct@latest
    go install github.com/godoctor/godoctor@latest
    go install github.com/zmb3/gogetdoc@latest
    go install github.com/jstemmer/gotags@latest
    go install github.com/fatih/motion@latest
    go install github.com/klauspost/asmfmt/cmd/asmfmt@latest
    go install github.com/kisielk/errcheck@latest
    go install mvdan.cc/gofumpt@latest
    go install github.com/fatih/gomodifytags@latest

    slog "go dev tools installation done!"
}

docker_common_install() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping docker post install configuration"
        return 1
    fi

    if has_cmd brew; then
        bi jesseduffield/lazydocker/lazydocker
        bi lazydocker
    fi

    sudo groupadd docker
    sudo usermod -aG docker ${USER}

    sudo systemctl --now enable docker
    sudo systemctl --now enable containerd
}

docker_install() {
    has_cmd docker && return 0

    slog "Installing docker..."

    frm /tmp/get-docker.sh
    curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
    sudo sh /tmp/get-docker.sh
    frm /tmp/get-docker.sh


    docker_common_install

    slog "Docker installation done!"
}

code_server_install() {
    has_cmd code-server && return 1

    slog "Installing code-server"
    curl -sSL https://code-server.dev/install.sh | sh
    slog "code-server installation done!"

    # slog "Installing coder"
    # curl -L https://coder.com/install.sh | sh
    # slog "coder installation done!"
}

conan_install() {
    has_cmd conan && return 1

    slog "Installing conan"
    pipx install conan
    slog "conan installation done!"

    cmd_check conan
}

cmake_install() {
    has_cmd /usr/local/bin/cmake && return 1

    CMAKE_VERSION="3.28.3"
    ARCH=$(uname -m)
    CMAKE_BINARY_NAME="cmake-${CMAKE_VERSION}-linux-${ARCH}.sh"
    CMAKE_CHECKSUM_NAME="cmake-${CMAKE_VERSION}-SHA-256.txt"

    slog "Installing latest cmake"
    TMP_DIR=$(mktemp -d -t cmake-XXXXXXXXXX)
    cd "${TMP_DIR}"
    curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_BINARY_NAME}" -O
    curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_CHECKSUM_NAME}" -O

    sha256sum -c --ignore-missing "${CMAKE_CHECKSUM_NAME}"
    sudo mkdir /opt/cmake
    sudo sh "${TMP_DIR}/${CMAKE_BINARY_NAME}" --prefix=/opt/cmake --skip-license

    sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
    sudo ln -s /opt/cmake/bin/ctest /usr/local/bin/ctest
    frm "${TMP_DIR}"

    slog "cmake installation done!"

    cmd_check cmake
}

webi_shell_install() {
    slog "shell tools with webi"
    wis shfmt gh dotenv bat curlie delta fd jq lsd sd yq
    slog "shell tools with webi done!"
}

brew_shell_install() {
    # bi yazi ffmpeg sevenzip jq poppler fd ripgrep fzf zoxide imagemagick font-symbols-only-nerd-font
    # bi -q glances

    slog "shell tools with brew"

    bis jq tree-sitter just lsd shfmt gh gtop tldr shellcheck gum httpie
    bis cheat curlie lazygit duf sd xh eza doggo atuin direnv dust ncdu
    bis procs fzf fd hyperfine zoxide starship nushell gping broot mcfly

    has_cmd gdu || has_cmd gdu-go || bi gdu
    has_cmd rg || bi ripgrep
    has_cmd batcat || has_cmd bat || bi bat
    has_cmd delta || bi git-delta
    has_cmd choose || bi choose-rust
    has_cmd btm || bi bottom
    alias gdu=gdu-go

    slog "shell tools with brew done!"

    cmd_check gawk gh shellcheck curlie shfmt sd lsd gdu bat hyperfine
    cmd_check fd fzf rg zoxide tmux zsh just eza doggo atuin direnv dust ncdu
    cmd_check procs gtop tldr gum cheat lazygit duf sd choose btm
    cmd_check starship delta
}

go_shell_install() {
    has_cmd go || return 1

    slog "shell tools with go"

    has_cmd cheat || go install github.com/cheat/cheat/cmd/cheat@latest
    has_cmd curlie || go install github.com/rs/curlie@latest
    has_cmd lazygit || go install github.com/jesseduffield/lazygit@latest
    has_cmd gdu || go install github.com/dundee/gdu/v5/cmd/gdu@latest
    has_cmd duf || go install github.com/muesli/duf@latest

    slog "shell tools with go done!"

    cmd_check cheat curlie lazygit gdu duf
}

rust_shell_install() {
    has_cmd rustup || return 1

    rustup update stable

    slog "shell tools with rust"

    has_cmd starship || cargoi starship
    has_cmd delta || cargoi git-delta
    has_cmd dust || cargoi du-dust
    has_cmd choose || cargoi choose
    has_cmd sd || cargoi sd
    has_cmd procs || cargoi procs
    has_cmd btm || cargoi bottom
    has_cmd xh || cargoi xh
    has_cmd lsd || cargoi lsd

    slog "shell tools with rust done!"

    cmd_check starship delta dust choose sd procs btm xh lsd
}

pnpm_shell_install() {
    has_cmd pnpm || return 1

    slog "shell tools with pnpm"
    pnpm install -g degit neovim
    has_cmd tldr || pnpm install -g tldr
    has_cmd gtop || pnpm install -g gtop
    cmd_check degit tldr gtop
}

shell_install() {
    cli_install

    webi_shell_install
    brew_shell_install

    go_shell_install
    rust_shell_install
    pnpm_shell_install

    bash_install
}

alacritty_config_install() {
    slog "alacritty config"

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R alacritty

    slog "alacritty config done!"
}

wezterm_config_install() {
        stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R wezterm
}

kitty_config_install() {
    slog "kitty config"

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R kitty

    slog "kitty config done!"
}

ghostty_config_install() {
    slog "ghostty config"

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R ghostty

    slog "ghostty config done!"
}

bin_config_install() {
    slog "bin config"

    stow -d $HOME/.dotfiles/stow -t $HOME --dotfiles -R bin

    slog "bin config done!"
}

config_install() {
    has_cmd zsh && zsh_config_install
    has_cmd tmux && tmux_config_install
    has_cmd nvim && astro_install
    has_cmd emacs && doom_install
    has_cmd git && git_config_install
    has_cmd alacritty && alacritty_config_install
    has_cmd wezterm && wezterm_config_install
    has_cmd code && vscode_config_install
    has_cmd kitty && kitty_config_install
    has_cmd ghostty && ghostty_config_install
    bin_config_install
}


poetry_install() {
    has_cmd poetry && return 0

    slog "Installing poetry"
    if has_cmd python3; then
        curl -sSL https://install.python-poetry.org | python3 -
        smd ~/.zfunc
        poetry completions zsh > ~/.zfunc/_poetry
        slog "poetry installation done!"
    else
        warn "python3 not installed, skipping poetry"
    fi

    cmd_check poetry
}

pyenv_install() {
    has_cmd pyenv && return 0

    slog "Installing pyenv"
    sclone  https://github.com/yyuu/pyenv.git ~/.pyenv
    sclone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
    slog "pyenv installation done!"

    cmd_check pyenv
}

anaconda_install() {
    if has_cmd pyenv; then
        if ! pyenv versions | grep anaconda > /dev/null; then
            slog "Installing anaconda"
            local anacondaversion=`pyenv install --list | grep anaconda | tail -1`
            pyenv install $anacondaversion
            smd ~/py
            if cd ~/py; then
                pyenv global $anacondaversion
                python -m pip install --user pipx neovim
                poetry_install
            else
                warn "~/py doesn't exist, skipping part of python install"
            fi
        fi
    else
        warn "pyenv not installed, skipping anaconda"
    fi

    cmd_check conda
}

pyenv_miniconda_install() {
    if has_cmd pyenv; then
        if ! pyenv versions | grep miniconda > /dev/null; then
            slog "Installing miniconda"
            local minicondaversion=`pyenv install --list | grep miniconda | tail -1`
            pyenv install $minicondaversion
            slog "miniconda installation done!"
        fi
    else
        warn "pyenv not installed, skipping miniconda"
    fi

    cmd_check conda
}

python_core_install() {
    pyenv_install

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
}

python_mini_install() {
    python_core_install
    pyenv_miniconda_install
}

python_install() {
     python_core_install
    anaconda_install
}

asdf_install() {
    has_cmd asdf && return 1
    dir_exists ~/.asdf && return 1

    slog "Installing asdf"
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0
    slog "asdf installation done!"
}

tailscale_install() {
    has_cmd tailscale && return 0

    slog "Installing tailscale"
    curl -fsSL https://tailscale.com/install.sh | sh
    slog "tailscale installation done!"
}

portainer_install() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping portainer"
        return 1
    fi

    if has_cmd docker && docker ps -a | grep -q portainer; then
        slog "Portainer is already installed"
        return 1
    fi

    if ! docker volume inspect portainer_data &>/dev/null; then
        slog "Creating portainer_data volume"
        docker volume create portainer_data
        docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

        slog "Portainer installation done!"
    fi
}

}

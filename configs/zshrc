dir_exists() {
    [[ -d "$1" ]]
}

file_exists() {
    [[ -f "$1" ]]
}

has_cmd() {
    command -v "$1" > /dev/null
}

ssource() {
    if [ -f "$1" ]; then
        source "$1"
    fi
}

spath_export() {
    dir_exists "$1" && export PATH="$1:$PATH"
}

ssource "$HOME/.asdf/asdf.sh"

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -e
zstyle :compinstall filename '$HOME/.zshrc'

setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT
setopt PUSHD_TO_HOME
setopt EXTENDED_GLOB
setopt AUTO_MENU            # Show completion menu on a successive tab press.
setopt AUTO_LIST            # Automatically list choices on ambiguous completion.

autoload -Uz compinit
compinit

zstyle ':completion:::::default' menu select

if ! dir_exists ~/.zsh/pure; then
    if has_cmd git; then
        git clone --depth=1 https://github.com/sindresorhus/pure.git ~/.zsh/pure
    else
        echo "git not installed"
    fi
fi

fpath+=($HOME/.zsh/pure)

autoload -U promptinit; promptinit
prompt pure

ssource /etc/zsh_command_not_found

if file_exists /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh; then
    source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
else
    if ! dir_exists ~/.zsh/zsh-syntax-highlighting; then
        has_cmd git && git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/zsh-syntax-highlighting
    fi
    ssource ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

if file_exists /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh; then
    source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
else
    if ! dir_exists ~/.zsh/zsh-autosuggestions; then
        has_cmd git && git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
    fi
    ssource ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

    if ! dir_exists ~/.zsh/alias-tips; then
        has_cmd git && git clone --depth=1  https://github.com/djui/alias-tips.git 
    fi
    ssource ~/.zsh/zsh-autosuggestions/alias-tips/alias-tips.plugin.zsh


ssource /usr/share/doc/fzf/examples/completion.zsh
ssource /usr/share/doc/fzf/examples/key-bindings.zsh

if ! dir_exists ~/.zsh/alias-tips; then
    has_cmd git && git clone --depth=1 https://github.com/djui/alias-tips.git ~/.zsh/alias-tips
fi

if has_cmd python3; then
    ssource ~/.zsh/alias-tips/alias-tips.plugin.zsh
fi

if has_cmd zoxide; then
    eval "$(zoxide init zsh)"
elif has_cmd fasd; then
    eval "$(fasd --init auto)"
fi

# # append completions to fpath
fpath=(${ASDF_DIR}/completions $fpath)
# initialise completions with ZSH's compinit
autoload -Uz compinit && compinit

alias cpr="cp -r"
alias md="mkdir -p"
alias rd="rmdir"

if dir_exists "$HOME/.local/share/pnpm"; then
    # pnpm
    export PNPM_HOME="$HOME/.local/share/pnpm"
    export PATH="$PNPM_HOME:$PATH"
    # pnpm end

    # tabtab source for packages
    # uninstall by removing these lines
    [[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true

    alias n='pnpm'
    alias ni='pnpm install'
    alias nid='pnpm install -D'
    alias nb='pnpm build'
    alias nl='pnpm lint:dev'
    alias ne='pnpm exec'
    alias nd='pnpm dev'
    alias nc='pnpm ci'
    alias nt='pnpm types:dev'
    alias ntc='pnpm types'
    alias ntt='pnpm test:dev'
    alias nttc='pnpm test:dev'
    alias nci='pnpm types && pnpm lint'
    alias ndb='pnpm db'
    alias ndbt='pnpm db:types'
    alias ndbp='pnpm db:push'
    alias ndbs='pnpm db:seed'
    alias ndbst='pnpm db:studio'
    alias ndbr='pnpm db:repl'
fi


alias g='git'
alias gs="git stash -u"
alias gst="git status"
alias gsu="git status -u"
alias gcan="git commit --amend --no-edit"
alias gsa='git stash apply'
alias gfm='git pull'
alias gp='git push'
alias gcm='git commit --message'
alias gia='git add'
alias gl='git log --topo-order --pretty=format:"$_git_log_medium_format"'
alias gco='git checkout'
alias gb='git branch'
alias gbc='git checkout -b'
alias gbc='git checkout -b'
alias gsl='git stash list'

if has_cmd code; then
    alias c='code'
    alias c.='code .'
fi

alias l='ls -1A'         # Lists in one column, hidden files.
alias ll='ls -lh'        # Lists human readable sizes.
alias lr='ll -R'         # Lists human readable sizes, recursively.
alias la='ll -A'         # Lists human readable sizes, hidden files.
alias lm='la | "$PAGER"' # Lists human readable sizes, hidden files through pager.
alias lk='ll -Sr'        # Lists sorted by size, largest last.
alias lt='ll -tr'        # Lists sorted by date, most recent last.
alias lc='lt -c'         # Lists sorted by date, most recent last, shows change time.
alias lu='lt -u'         # Lists sorted by date, most recent last, shows access time.
alias sl='ls'            # Correction for common spelling error.

alias md="mkdir -p"
alias rd="rmdir"

alias ipa="ip -brief a"
has_cmd batcat && alias cat="batcat"

has_cmd gdu || has_cmd gdu-go && alias gdu="gdu-go"

alias -g ..="../"
alias -g ...="../../"
alias -g ....="../../../"
alias -g .....="../../../../"
alias -g ......="../../../../../"

if has_cmd flatpak; then
  has_cmd wezterm || alias wezterm="flatpak run org.wezfurlong.wezterm"
  has_cmd telegram || alias telegram="flatpak run org.telegram.desktop"
  has_cmd clion || alias clion="flatpak run com.jetbrains.CLion"
  has_cmd chrome || alias chrome="flatpak run com.google.Chrome"
  has_cmd deluge || alias deluge="flatpak run org.deluge_torrent.deluge"
  has_cmd zoom || alias zoom="flatpak run us.zoom.Zoom"
  has_cmd shiftey || alias shiftey="flatpak run io.github.shiftey.Desktop"
  has_cmd code || alias code="flatpak run com.visualstudio.code"
  # has_cmd code || alias code="flatpak run com.visualstudio.code --password-store="gnome-libsecret""
  has_cmd nvim || alias nvim="flatpak run io.neovim.nvim"
  has_cmd emacs|| alias emacs="flatpak run org.gnu.emacs"
fi

ssource "$HOME/.cargo/env"

export DOTNET_ROOT="$HOME/.dotnet"
export GOPATH="$HOME/go"

spath_export "/usr/bin"
spath_export "/snap/bin"
spath_export "$GOPATH/bin"
spath_export "/home/linuxbrew/.linuxbrew/bin"
spath_export "$HOME/.config/dotfiles/bin"
spath_export "$HOME/.config/emacs/bin"
spath_export "$HOME/.local/bin"
spath_export "$HOME/.local/share/pypoetry"
spath_export "$HOME/.config/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin"
spath_export "$HOME/.console-ninja/.bin"

# if is_mac; then
#     export DOCKER_HOST='unix://$HOME/.local/share/containers/podman/machine/qemu/podman.sock'
# else
#     # export DOCKER_HOST=unix:///run/user/1000/docker.sock
# fi

if dir_exists "$HOME/.pyenv"; then
    export PYENV_ROOT="$HOME/.pyenv"
    spath_export "$PYENV_ROOT/bin"
    eval "$(pyenv init -)"
    # eval "$(pyenv virtualenv-init -)"
elif has_cmd /$HOME/miniconda3/bin/conda; then
  __conda_setup="$('/$HOME/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
          . "/$HOME/miniconda3/etc/profile.d/conda.sh"
      else
          export PATH="/$HOME/miniconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
fi

alias clone='gh repo clone'

if has_cmd github-copilot-cli; then
    eval "$(github-copilot-cli alias -- "$0")"
fi

# Copied from oh-my-zsh

# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets

# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# [PageUp] - Up a line of history
if [[ -n "${terminfo[kpp]}" ]]; then
  bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
fi
# [PageDown] - Down a line of history
if [[ -n "${terminfo[knp]}" ]]; then
  bindkey -M emacs "${terminfo[knp]}" down-line-or-history
fi

# Start typing + [Up-Arrow] - fuzzy find history forward
if [[ -n "${terminfo[kcuu1]}" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# Start typing + [Down-Arrow] - fuzzy find history backward
if [[ -n "${terminfo[kcud1]}" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# [Home] - Go to beginning of line
if [[ -n "${terminfo[khome]}" ]]; then
  bindkey -M emacs "${terminfo[khome]}" beginning-of-line
fi
# [End] - Go to end of line
if [[ -n "${terminfo[kend]}" ]]; then
  bindkey -M emacs "${terminfo[kend]}"  end-of-line
fi

# [Shift-Tab] - move through the completion menu backwards
if [[ -n "${terminfo[kcbt]}" ]]; then
  bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
fi

# [Backspace] - delete backward
bindkey -M emacs '^?' backward-delete-char
# [Delete] - delete forward
if [[ -n "${terminfo[kdch1]}" ]]; then
  bindkey -M emacs "${terminfo[kdch1]}" delete-char
else
  bindkey -M emacs "^[[3~" delete-char

  bindkey -M emacs "^[3;5~" delete-char
fi

# [Ctrl-Delete] - delete whole forward-word
bindkey -M emacs '^[[3;5~' kill-word

# [Ctrl-RightArrow] - move forward one word
bindkey -M emacs '^[[1;5C' forward-word
# [Ctrl-LeftArrow] - move backward one word
bindkey -M emacs '^[[1;5D' backward-word


bindkey '\ew' kill-region                             # [Esc-w] - Kill from the cursor to the mark
bindkey -s '\el' 'ls\n'                               # [Esc-l] - run command: ls
bindkey '^r' history-incremental-search-backward      # [Ctrl-r] - Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
bindkey ' ' magic-space                               # [Space] - don't do history expansion


# Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# file rename magick
bindkey "^[m" copy-prev-shell-word

bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
bindkey '^[^[[C' emacs-forward-word
bindkey '^[^[[D' emacs-backward-word

bindkey -s '^X^Z' '%-^M'
bindkey '^[e' expand-cmd-path
bindkey '^[^I' reverse-menu-complete
bindkey '^X^N' accept-and-infer-next-history
bindkey '^W' kill-region
bindkey '^I' complete-word
## Fix weird sequence that rxvt produces
#bindkey -s '^[[Z' '\t'
#

# take parameters from the command line and pass it to git push
function safe_push() {
    git stash -u && git push "$@" && git stash pop
}

alias gpp=safe_push "$@"

[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

ssource "$HOME/.localzshrc"
ssource "$HOME/.config/localzshrc"
ssource "$HOME/.config/dotfiles/configs/localzshrc"

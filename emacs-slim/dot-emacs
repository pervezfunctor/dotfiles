;; This should be in your early-init.el file
(setq package-enable-at-startup nil)

(load-theme 'wombat t)

;; (when (not (display-graphic-p))
;;   (custom-set-faces
;;    '(default ((t (:background "unspecified-bg"))))))

(unless (display-graphic-p)
  (set-face-background 'default "unspecified-bg"))

(when (display-graphic-p)
  (set-face-attribute 'default nil
                      :family "JetBrains Mono"
                      :weight 'bold
                      :height 120))

(setq initial-major-mode 'text-mode)

(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(defconst *is-a-mac* (eq system-type 'darwin))
(defconst *is-a-linux* (eq system-type 'gnu/linux))
(defconst *is-a-windows* (eq system-type 'windows-nt))

(when *is-a-mac*
  (setq mac-option-modifier 'meta)
  (custom-set-variables '(ns-use-srgb-colorspace nil)))

(when *is-a-windows*
  (setq default-directory "~/")

  (setq inhibit-compacting-font-caches t)

  (setq w32-pass-lwindow-to-system nil)
  (setq w32-lwindow-modifier 'super)

  (setq w32-pass-rwindow-to-system nil)
  (setq w32-rwindow-modifier 'super)

  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper))


;; do not ask follow link
(customize-set-variable 'find-file-visit-truename t)

(fset 'yes-or-no-p 'y-or-n-p)

(use-package emacs
  :init
  (setq create-lockfiles nil)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq ring-bell-function 'ignore)

  :custom
  (create-lockfiles nil)
  (make-backup-files nil)
  (auto-save-default nil)
  (scroll-conservatively 100)
  (use-short-answers t))

(use-package emacs
  :init
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
  (setq inhibit-compacting-font-caches t)
  :config
  (setq frame-inhibit-implied-resize t)
  (setq fast-but-imprecise-scrolling t)
  (setq redisplay-skip-fontification-on-input t))

(use-package emacs
  :init
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'set-scroll-bar-mode)
      (set-scroll-bar-mode nil))
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  :custom
  (cursor-type 'bar)
  (blink-cursor-mode nil))

(use-package emacs
  :custom
  (delete-by-moving-to-trash t)
  (confirm-kill-processes nil)
  (create-lockfiles nil)
  (auto-save-default nil)
  (make-backup-files nil))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-expand-minimally t)

(use-package package
  :custom
  (package-archives '(("melpa" . "https://melpa.org/packages/")
                      ("org" . "https://orgmode.org/elpa/")
                      ("elpa" . "https://elpa.gnu.org/packages/")))
  :config
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t))

(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(fido-mode 1)
(fido-vertical-mode 1)

;; Ensure `xdg` is installed
(use-package xdg
  :ensure t
  :config
  ;; Example usage of xdg functions (corrected)
  (setq user-emacs-directory (expand-file-name "emacs/" (xdg-config-home)))
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  ;; Save backup and auto-save files to XDG standard directories
  (setq backup-directory-alist `(("." . ,(expand-file-name "emacs/backups" (xdg-state-home)))))
  (setq auto-save-file-name-transforms `((".*" ,(expand-file-name "emacs/autosaves/" (xdg-cache-home)) t)))
  (setq auto-save-list-file-prefix (expand-file-name "emacs/auto-save-list/saves-" (xdg-cache-home)))
  (setq url-history-file (expand-file-name "emacs/url/history" (xdg-state-home)))

  ;; Use XDG paths for other configurations
  (setq bookmark-default-file (expand-file-name "emacs/bookmarks" (xdg-data-home)))
  (setq recentf-save-file (expand-file-name "emacs/recentf" (xdg-state-home)))
  (setq auto-save-list-file-prefix (expand-file-name "emacs/auto-save-list/saves-" (xdg-cache-home)))
  (setq auto-save-list-file-prefix (expand-file-name "emacs/auto-save-list/saves-" (xdg-cache-home)))
  ;; Desktop save mode (if you use it)
  (setq desktop-dirname (expand-file-name "emacs/desktop/" (xdg-state-home)))
  (setq desktop-path (list desktop-dirname))
  (setq desktop-base-file-name "emacs.desktop")

  (setq org-directory (expand-file-name "emacs/org/" (xdg-data-home)))
  (setq tramp-persistency-file-name (expand-file-name "emacs/tramp" (xdg-state-home))))

(use-package ace-window
  :ensure nil
  :bind ("C-x o" . ace-window)
  :init
  (setq aw-dispatch-always t))

(winner-mode)
(windmove-default-keybindings)

(use-package buffer-move
  :ensure nil
  :bind (("<C-S-up>" . buf-move-up)
         ("<C-S-down>" . buf-move-down)
         ("<C-S-left>" . buf-move-left)
         ("<C-S-right>" . buf-move-right)))

(bind-key [remap just-one-space] 'cycle-spacing)
(bind-key "RET" 'newline-and-indent)

(use-package move-dup
  :ensure nil
  :bind (("M-S-<down>" . md/move-lines-down)
         ("M-s-<down>" . md/duplicate-down)
         ("M-s-<up>" . md/duplicate-up)
         ("M-S-<up>" . md/move-lines-up)))

(use-package frame
  :ensure nil
  :config
  (blink-cursor-mode -1)
  (when (display-graphic-p)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1))
  (menu-bar-mode -1))

(use-package simple
  :ensure nil
  :config
  (column-number-mode 1)
  (size-indication-mode 1)
  (global-visual-line-mode 1))

(use-package paren
  :ensure nil
  :config
  (show-paren-mode 1))

(use-package delsel
  :ensure nil
  :config
  (delete-selection-mode 1))

(use-package elec-pair
  :ensure nil
  :config
  (electric-pair-mode 1))

(use-package files
  :ensure nil
  :custom
  (require-final-newline t)
  (load-prefer-newer t))

(use-package isearch
  :ensure nil
  :custom
  (search-highlight t)
  (search-whitespace-regexp ".*?")
  (isearch-lax-whitespace t)
  (isearch-regexp-lax-whitespace nil)
  (isearch-lazy-highlight t))

(use-package dired
  :ensure nil
  :custom
  (dired-listing-switches "-alh")
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always))

(use-package prog-mode
  :ensure nil
  :config
  (add-hook 'prog-mode-hook #'hs-minor-mode))

(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :init
  (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
  (add-hook 'ielm-mode-hook #'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  :custom
  (eldoc-idle-delay 0.2))

(use-package cc-mode
  :ensure nil)

(use-package python
  :ensure nil
  :custom
  (python-indent-offset 2))

(use-package vc
  :ensure nil
  :custom
  (vc-follow-symlinks t))

(use-package recentf
  :ensure nil
  :config
  (recentf-mode 1)
  :custom
  (recentf-max-saved-items 100)
  (recentf-exclude '("/tmp/" "/ssh:")))

(use-package savehist
  :ensure nil
  :config
  (savehist-mode 1)
  :custom
  (savehist-additional-variables '(search-ring regexp-search-ring))
  (savehist-autosave-interval 60))

(use-package uniquify
  :ensure nil
  :custom
  (uniquify-buffer-name-style 'forward)
  (uniquify-separator "/")
  (uniquify-after-kill-buffer-p t)
  (uniquify-ignore-buffers-re "^\\*"))

(use-package eglot
  :ensure nil
  :hook ((python-mode . eglot-ensure)
         (rust-mode . eglot-ensure)
         (c++-mode . eglot-ensure)
         (c-mode . eglot-ensure)
         (go-mode . eglot-ensure))
  :config
  (add-to-list 'eglot-server-programs '(go-mode . ("gopls")))
  (add-to-list 'eglot-server-programs
               '(python-mode . ("pyright"))
               '((c++-mode c-mode) . ("clangd" "ccls")))
  (setq eglot-autoshutdown t))

(use-package treesit
  :ensure nil
  :config
  (setq treesit-language-source-alist
        '((python "https://github.com/tree-sitter/tree-sitter-python")
          (rust "https://github.com/tree-sitter/tree-sitter-rust")))
  (dolist (lang '(python rust))
    (add-to-list 'major-mode-remap-alist
                 (cons (intern (format "%s-mode" lang))
                       (intern (format "%s-ts-mode" lang))))))
(use-package comp
  :ensure nil  ; built-in since Emacs 28
  :custom
  (native-comp-async-report-warnings-errors 'silent)
  (native-comp-deferred-compilation t)
  :config
  (when (fboundp 'native-comp-available-p)
    (message "Native compilation is available")))
(use-package project
  :ensure nil  ; built-in since Emacs 28
  :bind-keymap ("C-x p" . project-prefix-map)
  :config
  (setq project-switch-commands
        '((project-find-file "Find file")
          (project-find-regexp "Find regexp")
          (project-dired "Dired")
          (project-vc-dir "VC-Dir")
          (project-shell "Shell")
          (project-eshell "Eshell"))))

(use-package pixel-scroll
  :ensure nil
  :config
  (pixel-scroll-precision-mode 1))

(use-package tab-bar
  :ensure nil
  :custom
  (tab-bar-show 1)
  (tab-bar-new-tab-choice "*scratch*")
  :config
  (tab-bar-mode 1))

(use-package json
  :ensure nil
  :custom
  (json-serialize-pretty t)
  (json-object-type 'plist))

(use-package display-line-numbers
  :ensure nil
  :custom
  (display-line-numbers-width 2)
  (display-line-numbers-widen t)
  :config
  (setq display-line-numbers-type 'relative)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (global-display-line-numbers-mode))

(use-package repeat
  :ensure nil
  :config
  (repeat-mode 1))

(use-package mouse
  :ensure nil
  :custom
  (mouse-drag-and-drop-region t)
  (mouse-drag-and-drop-region-cut-when-buffers-differ t)
  (mouse-drag-and-drop-region-show-tooltip t)
  (mouse-drag-and-drop-region-show-cursor t)
  :config
  (unless (display-graphic-p)
    (require 'mouse)
    (xterm-mouse-mode 1)
    (global-set-key [mouse-4] (lambda () (interactive) (scroll-down 5)))
    (global-set-key [mouse-5] (lambda () (interactive) (scroll-up 5)))))

(use-package electric
  :ensure nil
  :config
  (electric-quote-mode 1))

(use-package thread
  :ensure nil)

(use-package generator
  :ensure nil)

(use-package eldoc
  :ensure nil
  :config
  (global-eldoc-mode 1))

(use-package cc-mode
  :ensure nil
  :custom
  (c-default-style "linux")
  (c-basic-offset 4))

(use-package transient
  :ensure nil
  :custom
  (transient-default-level 5))

(use-package eshell
  :ensure nil
  :custom
  (eshell-scroll-to-bottom-on-input t)
  (eshell-error-if-no-glob t)
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t)
  (eshell-prefer-lisp-functions nil))

(use-package server
  :ensure nil
  :config
  (unless (server-running-p)
    (server-start)))

(use-package so-long
  :ensure nil
  :config
  (global-so-long-mode 1))

(use-package saveplace
  :ensure nil
  :config
  (save-place-mode 1)
  :custom
  (save-place-file (locate-user-emacs-file "places")))

(use-package recentf
  :ensure nil
  :config
  (recentf-mode 1)
  :custom
  (recentf-max-saved-items 100)
  (recentf-max-menu-items 15)
  (recentf-auto-cleanup 'never)
  (recentf-save-file (locate-user-emacs-file "recentf"))
  :bind ("C-x C-r" . recentf-open-files))

(use-package savehist
  :ensure nil
  :config
  (savehist-mode 1)
  :custom
  (savehist-file (locate-user-emacs-file "history"))
  (savehist-additional-variables '(search-ring regexp-search-ring))
  (savehist-autosave-interval 60))

(use-package bookmark
  :ensure nil
  :custom
  (bookmark-default-file (locate-user-emacs-file "bookmarks"))
  (bookmark-save-flag 1))

(use-package org
  :ensure nil
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture))
  :config
  (setq org-log-done 'time
        org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)"))
        org-agenda-files '("~/org")
        org-default-notes-file "~/org/notes.org"
        org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
  :hook
  (org-mode . visual-line-mode))

(use-package dabbrev
  :ensure nil
  :custom
  (dabbrev-abbrev-char ?_)
  (dabbrev-case-fold-search nil)
  (dabbrev-check-all-buffers t))

(use-package completion
  :ensure nil
  :custom
  (completion-auto-help t)
  (completion-ignore-case t)
  (completion-cycle-threshold 5))


(use-package ediff
  :ensure nil
  :init
  (setq  ediff-window-setup-function 'ediff-setup-windows-plain
         ediff-split-window-function 'split-window-horizontally
         ediff-merge-split-window-function 'split-window-horizontally))

(use-package iedit
  :ensure nil
  :bind ("C-;" . iedit-mode)
  :config
  (setq iedit-toggle-key-default nil)
  (setq iedit-case-sensitive 'smart)
  (setq iedit-transient-mark-sensitive t)
  (setq iedit-auto-buffering t)

  (defun iedit-dwim (arg)
    "Start iedit on current word or region."
    (interactive "P")
    (if arg
        (iedit-mode)
      (if (use-region-p)
          (iedit-mode)
        (iedit-mode 0)
        (iedit-start (current-word) (point-min) (point-max)))))

  :bind ("C-:" . iedit-dwim))

(use-package isearch
  :ensure nil
  :custom
  (isearch-allow-scroll t)
  (isearch-lazy-highlight t)
  (isearch-lazy-count t)
  (lazy-highlight-initial-delay 0)
  (lazy-highlight-cleanup nil)
  (search-highlight t)
  (search-whitespace-regexp ".*?")
  (isearch-lax-whitespace t)
  (isearch-regexp-lax-whitespace nil)
  :config
  (define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)
  (define-key isearch-mode-map "\C-h" 'isearch-delete-char))

(use-package grep
  :ensure nil
  :custom
  (grep-command "grep --color=auto -nHi -e ")
  (grep-use-null-device nil)
  (grep-find-command '("find . -type f -exec grep --color=auto -nHi -e  {} +" . 34))
  :config
  (when (eq system-type 'windows-nt)
    (setq grep-use-null-device t)))

(use-package replace
  :ensure nil
  :bind (("M-s o" . occur))
  :custom
  (list-matching-lines-default-context-lines 1))

(use-package deadgrep
  :ensure nil
  :if (>= emacs-major-version 27)
  :bind ("C-c s" . deadgrep))

(use-package desktop
  :ensure nil
  :config
  (desktop-save-mode 1)
  :custom
  (desktop-path (list user-emacs-directory))
  (desktop-auto-save-timeout 30)
  (desktop-restore-eager 5)
  (desktop-load-locked-desktop t))

(use-package dired
  :ensure nil
  :config
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'always
        dired-dwim-target t
        delete-by-moving-to-trash t)
  (put 'dired-find-alternate-file 'disabled nil)
  :hook
  (dired-mode . dired-hide-details-mode))

;; C++ specific settings
(add-hook 'c++-mode-hook
          (lambda ()
            (setq c-basic-offset 4)))

(use-package flymake
  :ensure nil
  :hook (prog-mode . flymake-mode)
  :custom
  (flymake-start-on-flymake-mode t)
  (flymake-no-changes-timeout 1))

(use-package blackout
  :ensure t
  :config
  (blackout 'auto-fill-mode)
  (blackout 'flymake-mode)
  (blackout 'rainbow-mode)
  (blackout 'apheleia-mode)
  (blackout 'word-wrap-whitespace-mode)
  (blackout 'flycheck-mode)
  (blackout 'which-key-mode)
  (blackout 'visual-line-mode)
  (blackout 'auto-revert-mode)
  (blackout 'company-mode))

(use-package sudo-edit)

(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-refine-hunk 'all)  ;; Highlight word changes in diffs
  (magit-save-repository-buffers 'dontask)  ;; Prevent Magit from asking to save buffers
  ;; (magit-repository-directories '(("~/programs" . 2) ("~/.ilm" . 1)))  ;; Define Git repos
  :config
  ;; Improve Magit performance on large repositories
  (setq magit-refresh-status-buffer nil)

  ;; ** Automatically Refresh Magit Buffers**
  (add-hook 'after-save-hook #'magit-after-save-refresh-status)

  (with-eval-after-load 'project
    (define-key project-prefix-map (kbd "m") #'magit-project-status)))

;; ** GitHub/GitLab Issues & PRs**
(use-package forge
  :after magit
  :custom
  (forge-topic-list-limit '(100 . -10))  ;; Show last 100 issues & PRs
  (auth-sources '("~/.authinfo.gpg")))  ;; Store credentials securely

(use-package which-key
  :init
  (which-key-mode))

(use-package sqlite3)

(use-package wgrep
  :custom
  (wgrep-auto-save-buffer t)
  (wgrep-change-readonly-file t))

(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)

(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((eglot (styles orderless)))))

(use-package xclip
  :config
  (xclip-mode +1))

;; Flycheck for on-the-fly syntax checking
;; (use-package flycheck
;;   :init (global-flycheck-mode))

;; format code automatically using clang-format, prettier, ruff etc
;; (use-package apheleia
;;   :ensure t
;;   :config
;;   ;; Optional: Add or tweak formatters
;;   (setq apheleia-formatters
;;         (append apheleia-formatters
;;                 '((clang-format . ("clang-format" "-style=file"))
;;                   (prettier . ("prettier" "--stdin-filepath" filepath)))))
;;   (setf (alist-get 'ruff apheleia-formatters)
;;         '("ruff" "format" "-"))
;;   ;; Set ruff as the default formatter for Python
;;   (setf (alist-get 'python-mode apheleia-mode-alist) 'ruff)

;;   (apheleia-global-mode +1))

;; ;; Example: Automatically format C++ on save
;; (add-hook 'c++-mode-hook
;;           (lambda ()
;;             (setq apheleia-formatter 'clang-format)
;;             (apheleia-mode 1)))

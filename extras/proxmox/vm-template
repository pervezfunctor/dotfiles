#!/usr/bin/env bash

set -euo pipefail

PROXMOX_STORAGE="local-lvm"
VM_ID=""
VM_NAME=""
IMAGE_URL=""
DISK_SIZE="32G"
MEMORY="8192"
CORES="4"
USERNAME=""
PASSWORD=""
DISTRO=""
SSH_KEY=""

echo_error() {
  echo "[ERROR] $1" >&2
  exit 1
}

usage() {
  echo "Usage: $0 -D <distro> [OPTIONS]"
  echo
  echo "Required:"
  echo "  -D, --distro <distro>           Specify the distribution: debian, fedora, ubuntu, alpine, or centos."
  echo
  echo "Options:"
  echo "  -s, --storage <storage>         Proxmox storage target (default: local-lvm)."
  echo "  -i, --vm-id <id>                Unique ID for the new VM (default: auto-assigned)."
  echo "  -n, --vm-name <name>            Name for the VM (default: auto-assigned)."
  echo "  -d, --disk-size <size>          Size of the VM disk (default: 32G)."
  echo "  -m, --memory <mb>               VM memory in MB (default: 8192)."
  echo "  -c, --cores <num>               Number of CPU cores (default: 4)."
  echo "  -u, --username <user>           Username for cloud-init (default: distro-specific)."
  echo "  -p, --password <pass>           Password for cloud-init (only if no SSH key is provided)."
  echo "  -k, --ssh-key <path>            Path to an SSH public key file to add to the VM."
  echo "  -U, --image-url <url>           URL of the cloud image (default: latest for the distro)."
  echo "  -h, --help                      Display this help message."
}

parse_args() {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
    -D | --distro)
      DISTRO="$2"
      shift
      ;;
    -s | --storage)
      PROXMOX_STORAGE="$2"
      shift
      ;;
    -i | --vm-id)
      VM_ID="$2"
      shift
      ;;
    -n | --vm-name)
      VM_NAME="$2"
      shift
      ;;
    -d | --disk-size)
      DISK_SIZE="$2"
      shift
      ;;
    -m | --memory)
      MEMORY="$2"
      shift
      ;;
    -c | --cores)
      CORES="$2"
      shift
      ;;
    -u | --username)
      USERNAME="$2"
      shift
      ;;
    -p | --password)
      PASSWORD="$2"
      shift
      ;;
    -k | --ssh-key)
      SSH_KEY="$2"
      shift
      ;;
    -U | --image-url)
      IMAGE_URL="$2"
      shift
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown parameter: $1"
      usage
      exit 1
      ;;
    esac
    shift
  done
}

check_prerequisites() {
  if ! command -v qm >/dev/null; then
    echo_error "The 'qm' command is required. This script must be run on a Proxmox host."
  fi

  if [[ -z "$DISTRO" ]]; then
    echo_error "The --distro argument is required."
  fi

  if [[ -n "$SSH_KEY" && ! -f "$SSH_KEY" ]]; then
    echo_error "SSH key file not found at '$SSH_KEY'"
  fi

  if [[ -n "$VM_ID" && $(qm list | awk -v id="$VM_ID" '$1 == id') ]]; then
    echo_error "VM ID $VM_ID is already in use."
  fi

  if [[ -n "$VM_NAME" && $(qm list | awk -v name="$VM_NAME" '$2 == name') ]]; then
    echo_error "VM name $VM_NAME is already in use."
  fi
}

configure_distribution() {
  case "$DISTRO" in
  "debian")
    VM_ID=${VM_ID:-9100}
    VM_NAME=${VM_NAME:-debian-template}
    IMAGE_URL=${IMAGE_URL:-"https://cdimage.debian.org/cdimage/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2"}
    USERNAME=${USERNAME:-debian}
    ;;
  "fedora")
    VM_ID=${VM_ID:-9200}
    VM_NAME=${VM_NAME:-fedora-template}
    IMAGE_URL=${IMAGE_URL:-"https://download.fedoraproject.org/pub/fedora/linux/releases/40/Cloud/x86_64/images/Fedora-Cloud-Base-Generic-40-1.14.x86_64.qcow2"}
    USERNAME=${USERNAME:-fedora}
    ;;
  "ubuntu")
    VM_ID=${VM_ID:-9400}
    VM_NAME=${VM_NAME:-ubuntu-template}
    IMAGE_URL=${IMAGE_URL:-"https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"}
    USERNAME=${USERNAME:-ubuntu}
    ;;
  "alpine")
    VM_ID=${VM_ID:-9300}
    VM_NAME=${VM_NAME:-alpine-template}
    IMAGE_URL=${IMAGE_URL:-"https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/generic_alpine-3.22.0-x86_64-uefi-cloudinit-r0.qcow2"}
    USERNAME=${USERNAME:-alpine}
    ;;
  "centos")
    VM_ID=${VM_ID:-9500}
    VM_NAME=${VM_NAME:-centos-template}
    IMAGE_URL=${IMAGE_URL:-"https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2"}
    USERNAME=${USERNAME:-centos}
    ;;
  *)
    echo_error "Unsupported distribution: '$DISTRO'. Please use debian, fedora, ubuntu, alpine, or centos."
    ;;
  esac

  if [[ -z "$SSH_KEY" ]]; then
    PASSWORD=${PASSWORD:-$USERNAME}
  fi
}

main() {
  parse_args "$@"
  check_prerequisites
  configure_distribution

  local TEMP_IMAGE_PATH
  TEMP_IMAGE_PATH="/tmp/${DISTRO}-cloud.qcow2"

  echo "Downloading $DISTRO image..."
  if [[ ! -f "$TEMP_IMAGE_PATH" ]]; then
    if ! wget -q --show-progress -O "$TEMP_IMAGE_PATH" "$IMAGE_URL"; then
      echo_error "Failed to download $DISTRO image from $IMAGE_URL."
    fi
  fi

  echo "Creating VM $VM_NAME with ID $VM_ID..."
  declare -a qm_create_args
  qm_create_args=(
    "$VM_ID"
    --name "$VM_NAME"
    --memory "$MEMORY"
    --cores "$CORES"
    --ostype l26
    --agent 1
    --cpu host
    --net0 "virtio,bridge=vmbr0")

  if [[ "$DISTRO" == "ubuntu" ]]; then
    qm_create_args+=(--bios ovmf --efidisk0 "$PROXMOX_STORAGE:0,pre-enrolled-keys=0")
  fi
  if ! qm create "${qm_create_args[@]}"; then
    echo_error "Failed to create VM."
  fi

  echo "Importing disk to Proxmox storage..."
  if ! qm importdisk "$VM_ID" "$TEMP_IMAGE_PATH" "$PROXMOX_STORAGE"; then
    echo_error "Failed to import disk."
  fi

  DISK_TARGET=$([[ "$DISTRO" == "ubuntu" ]] && echo "virtio0" || echo "scsi0")
  echo "Attaching disk to VM..."
  if [[ "$DISTRO" == "ubuntu" ]]; then
    if ! qm set "$VM_ID" --scsihw virtio-scsi-pci --virtio0 "$PROXMOX_STORAGE:vm-$VM_ID-disk-0,discard=on"; then
      echo_error "Failed to attach disk."
    fi
  else
    if ! qm set "$VM_ID" --scsihw virtio-scsi-pci --scsi0 "$PROXMOX_STORAGE:vm-$VM_ID-disk-0,discard=on,ssd=1"; then
      echo_error "Failed to attach disk."
    fi
  fi

  echo "Resizing disk to $DISK_SIZE..."
  if ! qm resize "$VM_ID" "$DISK_TARGET" "$DISK_SIZE"; then
    echo_error "Failed to resize disk."
  fi

  echo "Configuring boot options..."
  if ! qm set "$VM_ID" --boot c --bootdisk "$DISK_TARGET"; then
    echo_error "Failed to configure boot options."
  fi

  echo "Adding cloud-init drive..."
  if ! qm set "$VM_ID" --ide2 "$PROXMOX_STORAGE:cloudinit"; then
    echo_error "Failed to add cloud-init drive."
  fi

  echo "Configuring cloud-init settings..."
  declare -a qm_set_args
  qm_set_args=(
    "$VM_ID" --serial0 socket --vga serial0 --ipconfig0 ip=dhcp --ciuser "$USERNAME"
  )

  if [[ -n "$SSH_KEY" ]]; then
    qm_set_args+=(--sshkeys "$SSH_KEY")
  else
    qm_set_args+=(--cipassword "$PASSWORD")
  fi

  if ! qm set "${qm_set_args[@]}"; then
    echo_error "Failed to configure cloud-init."
  fi

  echo "Converting VM to template..."
  if ! qm template "$VM_ID"; then
    echo_error "Failed to convert VM to template."
  fi

  echo "$DISTRO template '$VM_NAME' created successfully."
}

main "$@"

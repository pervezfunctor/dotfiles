#! /usr/bin/env bash

set -euo pipefail

DOT_DIR=${DOT_DIR:-"$HOME/.ilm"}
# shellcheck disable=SC1091
source "$DOT_DIR/share/utils"

container_exists() {
  pct status "$1" &>/dev/null
}

check_container() {
  if ! container_exists "$1"; then
    fail "Container '$1' does not exist"
    return 1
  fi
}

container_privileged() {
  grep -q '^unprivileged: 0' "/etc/pve/lxc/$1.conf"
}

choose_from_list() {
  local -n arr="$1"

  if [ "${#arr[@]}" -eq 0 ]; then
    echo "No options available."
    return 1
  fi

  local i
  for i in "${!arr[@]}"; do
    echo "[$i] ${arr[$i]}"
  done

  local choice
  while true; do
    read -r -p "Select number: " choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 0 ] && [ "$choice" -lt "${#arr[@]}" ]; then
      echo "${arr[$choice]}"
      return 0
    else
      echo "Invalid selection."
    fi
  done
}

lxc_create() {
  local tmpl=$1

  local VMID
  VMID=$(pct list | awk 'NR>1 {print $1}' | sort -n | tail -n 1)
  VMID=${VMID:-99}
  VMID=$((VMID + 1))

  local HOSTNAME
  HOSTNAME=$(basename "$tmpl" | sed -E 's/\.tar\..*//')

  local PASSWORD="program"
  local ROOTFS_STORAGE="local-lvm"
  local DISK_SIZE="8G"
  local MEMORY="2048"
  local CPUS="2"
  local NET_BRIDGE="vmbr0"

  local TEMPLATE_PATH="/var/lib/vz/template/cache/$tmpl"
  if [[ ! -f $TEMPLATE_PATH ]]; then
    echo "Template $TEMPLATE_PATH not found!"
    return 1
  fi

  echo "Creating container $VMID from $tmpl..."

  pct create "$VMID" "$TEMPLATE_PATH" \
    --hostname "$HOSTNAME" \
    --password "$PASSWORD" \
    --storage "$ROOTFS_STORAGE" \
    --rootfs "${ROOTFS_STORAGE}:${DISK_SIZE}" \
    --memory "$MEMORY" \
    --cores "$CPUS" \
    --net0 name=eth0,bridge="$NET_BRIDGE",ip=dhcp \
    --start 1

  echo "Waiting for container to start..."
  wait_for "UP" 30 2 pct status "$VMID"

  local IP
  IP=$(pct exec "$VMID" -- hostname -I | awk '{print $1}')

  echo "✅ Container $VMID ($HOSTNAME) created successfully with IP: $IP"
}

lxc_templates() {
  pveam available
}

# Let's provide options for all lxc templates to pick from
read_template() {
  local templates
  templates=$(pveam available)
  echo "$templates" | gum choose --header="Select LXC Template"
}

scaling_governor_setup() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/scaling-governor.sh)"
}

simple_backup() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/host-backup.sh)"
}

kernel_clean() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/kernel-clean.sh)"
}

kernel_pin() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/kernel-pin.sh)"
}

lxc_trim() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/fstrim.sh)"
}

monitoring_setup() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/monitor-all.sh)"
}

lxc_update() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/update-lxcs.sh)"
}

vm_exists() {
  qm status "$1" &>/dev/null
}

check_vm() {
  if ! vm_exists "$1"; then
    fail "VM '$1' does not exist"
    return 1
  fi
}

vm_is_template() {
  grep -q '^template: 1' "/etc/pve/qemu-server/$1.conf"
}

vm_create() {
  local template_id="$1"
  local vm_name="${2:-}"
  local vm_id="${3:-}"

  if [[ -z "$template_id" ]]; then
    fail "Template ID is required"
    return 1
  fi

  check_vm "$template_id" || return 1

  if ! vm_is_template "$template_id"; then
    fail "VM '$template_id' is not a template"
    return 1
  fi

  # Auto-generate VM ID if not provided
  if [[ -z "$vm_id" ]]; then
    vm_id=$(qm list | awk 'NR>1 && $2 !~ /template/ {print $1}' | sort -n | tail -n 1)
    vm_id=${vm_id:-99}
    vm_id=$((vm_id + 1))
  fi

  # Auto-generate VM name if not provided
  if [[ -z "$vm_name" ]]; then
    vm_name="vm-$vm_id"
  fi

  echo "Cloning VM from template $template_id to new VM $vm_id ($vm_name)..."

  qm clone "$template_id" "$vm_id" --name "$vm_name" --full

  echo "Waiting for VM clone to complete..."
  sleep 2

  echo "✅ VM $vm_id ($vm_name) created successfully from template $template_id"
}

vm_templates() {
  echo "Available VM templates:"
  qm list | awk 'NR>1 && $2 ~ /template/ {print $1 " " $2}'
}

vm_update() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/tools/pve/update-vms.sh)"
}

find_template_by_distro() {
  local distro="$1"
  local template_dir="/var/lib/vz/template/cache"

  local latest_template
  latest_template=$(find "$template_dir" -name "${distro}-*" -type f | sort -V | tail -n 1 2>/dev/null)

  if [[ -z "$latest_template" ]]; then
    echo "Error: No template found for distro '$distro' in $template_dir" >&2
    return 1
  fi

  basename "$latest_template"
}

hostname_from_template() {
  local template_name="$1"
  local suffix="${2:-ct}"

  if [[ -z "$template_name" ]]; then
    fail "Template name is required for hostname generation"
    return 1
  fi

  # Extract just the base distro name (first part before any hyphen or underscore)
  local distro_name
  distro_name=$(echo "$template_name" | cut -d'-' -f1 | sed 's/_.*//')

  # Clean up the distro name to be DNS-compliant
  distro_name=$(echo "$distro_name" | tr '[:upper:]' '[:lower:]')

  # Create a valid hostname (max 63 chars, no underscores, alphanumeric and hyphens only)
  local hostname="${distro_name}-${suffix}"
  hostname=$(echo "$hostname" | sed 's/[^a-z0-9-]//g' | sed 's/--*/-/g')

  # Ensure hostname doesn't exceed 63 characters
  if [[ ${#hostname} -gt 63 ]]; then
    hostname="${hostname:0:60}-${suffix}"
  fi

  echo "$hostname"
}

validate_positive_integer() {
  local value="$1"
  local error_message="${2:-Value must be a positive integer}"

  if [[ ! "$value" =~ ^[0-9]+$ ]]; then
    echo "Error: $error_message" >&2
    return 1
  fi

  if [[ "$value" -lt 0 ]]; then
    echo "Error: $error_message" >&2
    return 1
  fi

  return 0
}

validate_ct_id() {
  local ct_id="$1"

  if ! validate_positive_integer "$ct_id" "Container ID must be a positive integer"; then
    return 1
  fi

  if [[ "$ct_id" -lt 100 || "$ct_id" -gt 255 ]]; then
    echo "Error: Container ID must be between 100 and 255" >&2
    return 1
  fi

  if pct status "$ct_id" &>/dev/null; then
    echo "Error: Container with ID $ct_id already exists" >&2
    return 1
  fi

  return 0
}

get_template_dir() {
  local template_dir="/var/lib/vz/template/cache"

  if [[ ! -d "$template_dir" && -d "/tmp/template-cache" ]]; then
    template_dir="/tmp/template-cache"
  fi

  echo "$template_dir"
}

has_distro_templates() {
  local distro="$1"
  local template_dir="${2:-$(get_template_dir)}"

  if ! find "$template_dir" -name "${distro}-*" -type f | grep -q "."; then
    return 1
  fi

  return 0
}

list_available_distros() {
  local template_dir="${1:-$(get_template_dir)}"
  local limit="${2:-10}"

  find "$template_dir" -name "*-*" -type f | sed 's/^\(.*\)-.*$/\1/' | sort -u | head -n "$limit"
}

#!/usr/bin/env bash

set -euo pipefail

log() { printf '[+] %s\n' "$*"; }
err() {
  printf '[!] %s\n' "$*" >&2
  exit 1
}

usage() {
  cat <<EOF
Change static IP configuration on Proxmox VE

USAGE:
    $0 <interface> <new_ip> <gateway> <dns>

ARGUMENTS:
    interface    Network interface name (e.g., vmbr0)
    new_ip       New IP address with optional CIDR (e.g., 192.168.1.10 or 192.168.1.10/24)
                 If CIDR is not provided, /24 will be assumed
    gateway      Gateway IP address (e.g., 192.168.1.1)
    dns          DNS servers, comma-separated (e.g., 8.8.8.8,8.8.4.4)

EXAMPLES:
    $0 vmbr0 192.168.1.10 192.168.1.1 8.8.8.8,8.8.4.4
    $0 eth0 10.0.0.50/24 10.0.0.1 1.1.1.1

EOF
  exit 1
}

validate_ip() {
  local ip="$1"
  local regex='^([0-9]{1,3}\.){3}[0-9]{1,3}$'

  if [[ ! "$ip" =~ $regex ]]; then
    return 1
  fi

  # Check if each octet is between 0-255
  IFS='.' read -ra ADDR <<<"$ip"
  for i in "${ADDR[@]}"; do
    if [[ "$i" -gt 255 ]] || [[ "$i" -lt 0 ]]; then
      return 1
    fi
  done

  return 0
}

validate_ip_with_cidr() {
  local ip_cidr="$1"

  # Split IP and CIDR
  if [[ "$ip_cidr" =~ ^(.+)/([0-9]+)$ ]]; then
    local ip="${BASH_REMATCH[1]}"
    local cidr="${BASH_REMATCH[2]}"

    # Validate IP part
    if ! validate_ip "$ip"; then
      return 1
    fi

    # Validate CIDR (should be between 0-32)
    if [[ "$cidr" -lt 0 ]] || [[ "$cidr" -gt 32 ]]; then
      return 1
    fi

    return 0
  elif validate_ip "$ip_cidr"; then
    # If no CIDR is provided but it's a valid IP, assume /24
    return 0
  else
    return 1
  fi
}

validate_interface() {
  local iface="$1"

  # Check if interface exists
  if ! ip link show "$iface" &>/dev/null; then
    err "Interface $iface does not exist"
  fi

  return 0
}

validate_dns() {
  local dns="$1"
  IFS=',' read -ra DNS_SERVERS <<<"$dns"

  for dns_server in "${DNS_SERVERS[@]}"; do
    # Trim whitespace
    dns_server=$(echo "$dns_server" | xargs)

    if ! validate_ip "$dns_server"; then
      return 1
    fi
  done

  return 0
}

validate_arguments() {
  local iface="$1" ip="$2" gw="$3" dns="$4"

  # Validate interface
  validate_interface "$iface"

  # Validate IP with CIDR
  if ! validate_ip_with_cidr "$ip"; then
    err "Invalid IP address format: $ip. Expected format: 192.168.1.10/24"
  fi

  # Validate gateway
  if ! validate_ip "$gw"; then
    err "Invalid gateway IP address: $gw"
  fi

  # Validate DNS
  if ! validate_dns "$dns"; then
    err "Invalid DNS server(s): $dns. Expected comma-separated IP addresses"
  fi

  return 0
}

backup_file() {
  local file="$1"
  [[ -f "$file" ]] || err "$file not found"
  cp "$file" "${file}.bak.$(date +%F-%H%M%S)"
  log "Backup created: ${file}.bak.$(date +%F-%H%M%S)"
}

show_summary() {
  local iface="$1" ip="$2" gw="$3" dns="$4"
  echo
  echo "Proposed configuration:"
  echo "--------------------------------"
  echo "Interface:  $iface"
  echo "IP Address: $ip"
  echo "Gateway:    $gw"
  echo "DNS:        $dns"
  echo "--------------------------------"
  read -rp "Proceed with changes? [y/N]: " confirm
  [[ "$confirm" =~ ^[Yy]$ ]] || err "Aborted by user"
}

update_interfaces() {
  local iface="$1" ip="$2" gw="$3" dns="$4"
  local file="/etc/network/interfaces"

  backup_file "$file"

  awk -v iface="$iface" -v ip="$ip" -v gw="$gw" -v dns="$dns" '
  BEGIN { in_block=0 }
  {
    if ($1=="iface" && $2==iface && $3=="inet" && $4=="static") {
      print $0
      in_block=1
      next
    }
    if (in_block && /^iface /) in_block=0
    if (in_block && $1=="address") next
    if (in_block && $1=="gateway") next
    if (in_block && $1=="dns-nameservers") next
    print $0
  }
  END {
    print ""
    print "iface " iface " inet static"
    print "  address " ip
    print "  gateway " gw
    print "  dns-nameservers " dns
  }' "$file" >"${file}.tmp"

  mv "${file}.tmp" "$file"
  log "Updated $file for interface $iface"
}

apply_network_changes() {
  log "Applying network changes..."
  systemctl restart networking || err "Failed to restart networking"
  ip addr show
}

main() {
  # Check for help flag
  if [[ $# -eq 1 ]] && { [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; }; then
    usage
  fi

  [[ $EUID -eq 0 ]] || err "Run as root"
  [[ $# -eq 4 ]] || usage

  local iface="$1" ip="$2" gw="$3" dns="$4"

  # Add /24 CIDR if not provided
  if [[ ! "$ip" =~ / ]]; then
    ip="$ip/24"
  fi

  # Validate all arguments
  validate_arguments "$iface" "$ip" "$gw" "$dns"

  show_summary "$iface" "$ip" "$gw" "$dns"
  update_interfaces "$iface" "$ip" "$gw" "$dns"
  apply_network_changes
  log "IP successfully updated to $ip on $iface"
}

main "$@"

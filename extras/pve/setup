#!/usr/bin/env bash

# shellcheck disable=SC1090
source <(curl -sSL https://is.gd/anumof)

readonly DOT_DIR=${DOT_DIR:-$HOME/.ilm}

readonly COMMUNITY_SCRIPTS_BASE="https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"

declare -g CT_TEMPLATES=0
declare -g VM_TEMPLATES=0
declare -g CT_ALL=0
declare -g VM_ALL=0
declare -g ALL=0

check_proxmox() {
    if ! file_exists "/etc/pve/local/pve-ssl.pem"; then
        error "This script is designed to run on Proxmox VE"
        exit 1
    fi
}

cpu-governor_install() {
    bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/scaling-governor.sh)"
}

post-install_install() {
    bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/post-pve-install.sh)"
}

ct-templates_install() {
    slog "Installing container templates..."

    local templates=(
        "ubuntu.*standard"
        "debian.*standard"
        "fedora.*default"
        "centos.*default"
        "archlinux-base"
        "opensuse.*default"
        "alpine.*default"
    )

    for pattern in "${templates[@]}"; do
        local template
        template=$(pveam available | awk '{print $2}' | grep -E "^${pattern}" | sort -r | head -n 1)

        if [[ -n "$template" ]]; then
            slog "Downloading template: $template"
            pveam download local "$template" || warn "Failed to download $template"
        else
            warn "No template found for pattern: $pattern"
        fi
    done
}

vm-templates_install() {
    slog "Installing VM templates..."

    local current_dir
    current_dir="$(dirname "$0")"

    local distros=("debian" "fedora" "ubuntu" "alpine" "centos")

    for distro in "${distros[@]}"; do
        if file_exists "$current_dir/vm-template"; then
            slog "Creating $distro VM template..."
            "$current_dir/vm-template" --distro "$distro" || warn "Failed to create $distro template"
        else
            warn "VM template script not found: $current_dir/vm-template"
        fi
    done
}

ct-all_install() {
    slog "Creating containers from all templates..."

    local template_dir="/var/lib/vz/template/cache"

    if ! dir_exists "$template_dir"; then
        error "Template directory not found: $template_dir"
        return 1
    fi

    for template in "$template_dir"/*; do
        if file_exists "$template"; then
            local template_name
            template_name=$(basename "$template")
            slog "Creating LXC from template: $template_name"

            create_lxc_from_template "$template_name" || warn "Failed to create LXC from $template_name"
        fi
    done
}

vm-all_install() {
    slog "Creating VMs from all templates..."

    local templates=(
        "211:201:debian-vm"
        "212:202:fedora-vm"
        "213:203:ubuntu-vm"
        "214:204:alpine-vm"
        "215:205:centos-vm"
    )

    pushd "$DOT_DIR/extras/proxmox" || {
        error "Cannot access $DOT_DIR/extras/proxmox"
        return 1
    }

    for template_info in "${templates[@]}"; do
        IFS=':' read -r source_id dest_id vm_name <<<"$template_info"

        if qm status "$source_id" >/dev/null 2>&1; then
            slog "Cloning VM $source_id to $dest_id ($vm_name)"
            qm clone "$source_id" "$dest_id" --name "$vm_name" || warn "Failed to clone VM $source_id"
        else
            warn "Source VM $source_id not found"
        fi
    done

    popd || true

}

si() {
    local packages=("$@")
    for package in "${packages[@]}"; do
        if ! has_cmd "$package"; then
            slog "Installing $package..."
            apt-get -qq -y --no-install-recommends install "$package" || warn "Failed to install $package"
        fi
    done
}

systools_install() {
    si powertop smartmontools sanoid live-build zfsutils-linux rsync dialog proxmox-backup-client restic
}

core_install() {
    slog "Installing core components..."

    local packages=("git-core" "micro" "zsh-theme-powerlevel9k" "zsh" "curl" "wget")
    si "${packages[@]}"

    if ! dir_exists ~/.ilm; then
        slog "Cloning dotfiles..."
        git clone https://github.com/pervezfunctor/dotfiles.git ~/.ilm || {
            error "Failed to clone dotfiles"
            return 1
        }
    fi

    local timestamp
    timestamp=$(date +%Y%m%d-%H%M%S)

    if file_exists ~/.zshrc; then
        slog "Backing up .zshrc"
        mv ~/.zshrc "/tmp/.zshrc.backup-$timestamp"
    fi

    if ! grep -q "source ~/.ilm/share/bashrc" ~/.bashrc; then
        echo "source ~/.ilm/share/bashrc" >~/.bashrc
    fi
    ln -sf ~/.ilm/share/dot-zshrc ~/.zshrc

    success "Core installation completed"
}

create_lxc_from_template() {
    local template="$1"
    slog "Creating LXC from template: $template"

    local distro
    distro=$(echo "$template" | cut -d'.' -f1)

    if ! pct create 101 /var/lib/vz/template/cache/"$template" \
        --hostname my-"$distro"-ct \
        --memory 1024 \
        --cores 1 \
        --rootfs local-lvm:8 \
        --net0 name=eth0,bridge=vmbr0,ip=dhcp \
        --storage local-lvm; then
        error "Failed to create LXC from $template"
        return 1
    fi

    # pct start 101
    # pct exec 101 bash -c "echo 'root:password' | chpasswd"

    return 0
}

usage() {
    cat <<EOF
Usage: $0 [OPTIONS] [SERVICES...]

Proxmox VE Installation and Configuration Script

OPTIONS:
    --ct-templates      Install container templates
    --vm-templates      Install VM templates
    --ct-all           Create all containers from templates
    --vm-all           Create all VMs from templates
    --all              Install everything
    --verbose          Enable verbose output
    --dry-run          Show what would be done without executing
    --help             Show this help message

SERVICES:
    Core Services:
        post-install, core

    Container Services:
        casaos, jellyfin, plex, code-server, backup-server, tailscale,
        file-browser, docker-lxc, dockge, adguard, pihole, authelia,
        duplicati, deluge, qbittorrent, rclone, syncthing, paperless-ai,
        ollama, caddy, nginx-proxy, rustdesk, guacamole, vaultwarden,
        backrest, uptime-kuma, alpine-lxc, twofauth, iventoy

    VM Services:
        docker, openwrt, umbrel, opnsense, nextcloud, ubuntu,
        debian, arch

Examples:
    $0 --all                    # Install everything
    $0 casaos jellyfin plex     # Install specific services
    $0 --ct-templates           # Install only container templates

EOF
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
        --ct-templates)
            CT_TEMPLATES=1
            shift
            ;;
        --vm-templates)
            VM_TEMPLATES=1
            shift
            ;;
        --ct-all)
            CT_ALL=1
            shift
            ;;
        --vm-all)
            VM_ALL=1
            shift
            ;;
        --all)
            ALL=1
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            # Store remaining arguments for service installation
            break
            ;;
        esac
    done
}

main() {
    slog "Starting Proxmox installation script..."

    parse_args "$@"
    cpu-governor_install
    post-install_install

    check_root_user
    check_proxmox
    setup_directories
    systools_install
    core_install

    if [[ $ALL -eq 1 ]]; then
        CT_TEMPLATES=1
        VM_TEMPLATES=1
        CT_ALL=1
        VM_ALL=1
    fi

    [[ $CT_TEMPLATES -eq 1 ]] && ct-templates_install
    [[ $VM_TEMPLATES -eq 1 ]] && vm-templates_install
    [[ $CT_ALL -eq 1 ]] && ct-all_install
    [[ $VM_ALL -eq 1 ]] && vm-all_install

    local failed_services=()

    for service in "$@"; do
        if [[ "$service" =~ ^-- ]]; then
            continue
        fi

        local function_name="${service}_install"

        if fn_exists "$function_name"; then
            slog "Installing service: $service"
            if ! "$function_name"; then
                failed_services+=("$service")
            fi
        else
            warn "Unknown service: $service"
            failed_services+=("$service")
        fi
    done

    if [[ ${#failed_services[@]} -eq 0 ]]; then
        success "All installations completed successfully!"
    else
        error "The following services failed to install:"
        for service in "${failed_services[@]}"; do
            error "  - $service"
        done
        exit 1
    fi

    slog "Installation script completed. Check $LOG_FILE for details."
}

main "$@"

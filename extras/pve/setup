#!/usr/bin/env bash

set -euo pipefail

# shellcheck disable=SC1090
source <(curl -sSL https://raw.githubusercontent.com/pervezfunctor/dotfiles/refs/heads/main/share/utils)

# print an error message with line no on error
trap 'echo "Error on line $LINENO" >&2' ERR

readonly DOT_DIR=${DOT_DIR:-$HOME/.ilm}
readonly COMMUNITY_SCRIPTS_BASE="https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"

declare -g CORE=0
declare -g CT_TEMPLATES=0
declare -g VM_TEMPLATES=0
declare -g CT_ALL=0
declare -g VM_ALL=0
declare -g ALL=0

check_proxmox() {
    file_exists "/etc/pve/local/pve-ssl.pem" && return 0
    error "This script is designed to run on Proxmox VE"
    exit 1
}

cpu-governor_install() {
    bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/scaling-governor.sh)"
}

post-install_install() {
    bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/post-pve-install.sh)"
}

ct-templates_install() {
    slog "Installing container templates..."
    local templates=(
        "ubuntu.*standard"
        "debian.*standard"
        "fedora.*default"
        "centos.*default"
        "archlinux-base"
        "opensuse.*default"
        "alpine.*default"
    )

    for pattern in "${templates[@]}"; do
        local template
        template=$(pveam available | awk '{print $2}' | grep -E "^${pattern}" | sort -r | head -n 1)

        if [[ -n "$template" ]]; then
            slog "Downloading template: $template"
            pveam download local "$template" || warn "Failed to download $template"
        else
            warn "No template found for pattern: $pattern"
        fi
    done
}

tailscale_install() {
    has_cmd tailscale && return 0

    sudo mkdir -p --mode=0755 /usr/share/keyrings

    if ! file_exists /usr/share/keyrings/tailscale-archive-keyring.gpg; then
        curl -fsSL https://pkgs.tailscale.com/stable/debian/trixie.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
    fi

    if ! file_exists /etc/apt/sources.list.d/tailscale.list; then
        curl -fsSL https://pkgs.tailscale.com/stable/debian/trixie.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
    fi

    sudo apt-get update && sudo apt-get install tailscale

    sudo tailscale up
}

vm-templates_install() {
    slog "Installing VM templates..."
    local current_dir
    current_dir="$(dirname "$0")"
    local distros=("debian" "fedora" "ubuntu" "alpine" "centos")

    for distro in "${distros[@]}"; do
        if file_exists "$current_dir/vm-template"; then
            slog "Creating $distro VM template..."
            "$current_dir/vm-template" --distro "$distro" || warn "Failed to create $distro template"
        else
            warn "VM template script not found: $current_dir/vm-template"
        fi
    done
}

ct-all_install() {
    slog "Creating containers from all templates..."
    local template_dir="/var/lib/vz/template/cache"

    if ! dir_exists "$template_dir"; then
        error "Template directory not found: $template_dir"
        return 1
    fi

    for template in "$template_dir"/*; do
        if file_exists "$template"; then
            local template_name
            template_name=$(basename "$template")
            slog "Creating LXC from template: $template_name"
            create_lxc_from_template "$template_name" || warn "Failed to create LXC from $template_name"
        fi
    done
}

vm-all_install() {
    slog "Creating VMs from all templates..."
    local templates=(
        "211:201:debian-vm"
        "212:202:fedora-vm"
        "213:203:ubuntu-vm"
        "214:204:alpine-vm"
        "215:205:centos-vm"
    )

    for template_info in "${templates[@]}"; do
        IFS=':' read -r source_id dest_id vm_name <<<"$template_info"
        if qm status "$source_id" >/dev/null 2>&1; then
            slog "Cloning VM $source_id to $dest_id ($vm_name)"
            qm clone "$source_id" "$dest_id" --name "$vm_name" || warn "Failed to clone VM $source_id"
        else
            warn "Source VM $source_id not found"
        fi
    done
}

si() {
    local packages=("$@")
    for package in "${packages[@]}"; do
        if ! has_cmd "$package"; then
            slog "Installing $package..."
            apt-get -qq -y --no-install-recommends install "$package" || warn "Failed to install $package"
        fi
    done
}

core_install() {
    post-install_install
    cpu-governor_install

    slog "Installing core components..."
    si git-core micro zsh-theme-powerlevel9k zsh curl wget htop pciutils jq \
        smartmontools zfsutils-linux rsync whiptail dialog numactl fio stress \
        usbutils restic ethtool nvme-cli lsof lm-sensors udisks2 dysk just duf \
        proxmox-backup-client libguestfs-tools rclone stow ripgrep jq yq

    if ! dir_exists "$DOT_DIR"; then
        slog "Cloning dotfiles..."
        git clone https://github.com/pervezfunctor/dotfiles.git "$DOT_DIR" || {
            error "Failed to clone dotfiles"
            return 1
        }
    fi

    local timestamp
    timestamp=$(date +%Y%m%d-%H%M%S)

    if file_exists ~/.zshrc; then
        slog "Backing up .zshrc"
        mv ~/.zshrc "/tmp/.zshrc.backup-$timestamp"
    fi

    if ! grep -q "source ~/.ilm/share/bashrc" ~/.bashrc; then
        echo "source ~/.ilm/share/bashrc" >>~/.bashrc
    fi
    ln -sf "$DOT_DIR/share/dot-zshrc" ~/.zshrc

    success "Core installation completed"
}

create_lxc_from_template() {
    local template="$1"
    slog "Creating LXC from template: $template"
    local distro
    distro=$(echo "$template" | cut -d'.' -f1)

    if ! pct create 101 /var/lib/vz/template/cache/"$template" \
        --hostname my-"$distro"-ct \
        --memory 1024 \
        --cores 1 \
        --rootfs local-lvm:8 \
        --net0 name=eth0,bridge=vmbr0,ip=dhcp \
        --storage local-lvm; then
        error "Failed to create LXC from $template"
        return 1
    fi
    return 0
}

usage() {
    cat <<EOF
Usage: $0 [OPTIONS] [SERVICES...]

Proxmox VE Installation and Configuration Script

OPTIONS:
    ct-templates      Install container templates
    vm-templates      Install VM templates
    ct-all            Create all containers from templates
    vm-all            Create all VMs from templates
    all               Install everything
    help|-h|--help              Show this help message

Examples:
    $0 all                    # Install everything
    $0 ct-templates           # Install only container templates

EOF
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
        ct-templates) CT_TEMPLATES=1 ;;
        vm-templates) VM_TEMPLATES=1 ;;
        ct-all) CT_ALL=1 ;;
        vm-all) VM_ALL=1 ;;
        all) ALL=1 ;;
        help | -h | --help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        esac
        shift
    done
}

main() {
    slog "Starting Proxmox installation script..."
    check_root_user
    check_proxmox

    if [[ $# -eq 0 ]]; then
        CORE=1
        CT_TEMPLATES=1
        VM_TEMPLATES=1
    else
        parse_args "$@"

        if [[ $ALL -eq 1 ]]; then
            CT_TEMPLATES=1
            VM_TEMPLATES=1
            CT_ALL=1
            VM_ALL=1
        fi
    fi

    [[ $CORE -eq 1 ]] && core_install
    [[ $CT_TEMPLATES -eq 1 ]] && ct-templates_install
    [[ $VM_TEMPLATES -eq 1 ]] && vm-templates_install
    [[ $CT_ALL -eq 1 ]] && ct-all_install
    [[ $VM_ALL -eq 1 ]] && vm-all_install

    slog "Installation done!"
}

main "$@"

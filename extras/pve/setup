#!/usr/bin/env bash

set -euo pipefail

# shellcheck disable=SC1090
source <(curl -sSL https://raw.githubusercontent.com/pervezfunctor/dotfiles/refs/heads/main/share/utils)

# print an error message with line no on error
trap 'echo "Error on line $LINENO" >&2' ERR

readonly DOT_DIR=${DOT_DIR:-$HOME/.ilm}
readonly COMMUNITY_SCRIPTS_BASE="https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"

declare -g CORE=0
declare -g CT_TEMPLATES=0
declare -g CT_ALL=0
declare -g ALL=0

check_proxmox() {
    echo "Checking if running on Proxmox VE..."
    file_exists "/etc/pve/local/pve-ssl.pem" && return 0
    fail "This script is designed to run on Proxmox VE"
    exit 1
}

cpu-governor_install() {
    echo "Installing CPU governor scaling..."
    bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/scaling-governor.sh)"
    echo "CPU governor scaling installation done!"
}

post-install_install() {
    echo "Running post PVE installation script..."
    bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/post-pve-install.sh)"
    echo "Post PVE installation script done!"
}

tailscale_install() {
    echo "Installing Tailscale..."
    has_cmd tailscale && {
        echo "Tailscale already installed!"
        return 0
    }

    sudo mkdir -p --mode=0755 /usr/share/keyrings

    if ! file_exists /usr/share/keyrings/tailscale-archive-keyring.gpg; then
        curl -fsSL https://pkgs.tailscale.com/stable/debian/trixie.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
    fi

    if ! file_exists /etc/apt/sources.list.d/tailscale.list; then
        curl -fsSL https://pkgs.tailscale.com/stable/debian/trixie.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
    fi

    sudo apt-get update && sudo apt-get install tailscale

    sudo tailscale up
    echo "Tailscale installation and setup done!"
}

ct-templates_install() {
    echo "Installing container templates..."

    if ! has_cmd pveam; then
        echo "pveam command not found. Is Proxmox VE installed?"
        return 1
    fi

    local templates=(
        "ubuntu.*standard"
        "debian.*standard"
        "fedora.*default"
    )

    local available_templates
    if ! available_templates=$(pveam available 2>&1); then
        echo "Failed to retrieve available templates: $available_templates"
        return 1
    fi

    local downloaded=0
    local failed=0

    for pattern in "${templates[@]}"; do
        local template
        echo "looking for template matching pattern: $pattern"

        template=$(echo "$available_templates" |
            awk '{print $2}' |
            grep -E "${pattern}" |
            sort -V |
            tail -n 1)
        echo "got template: $template"

        if [[ -n "$template" ]]; then
            if pveam list local 2>/dev/null | grep -q "$template"; then
                echo "Template already exists: $template"
                ((downloaded++)) || true
            elif pveam download local "$template"; then
                echo "Downloaded template: $template"
                ((downloaded++)) || true
            else
                echo "Failed to download $template"
                ((failed++)) || true
            fi
        else
            echo "No template found for pattern: $pattern"
            ((failed++)) || true
        fi
    done

    echo "Container templates installation done: $downloaded succeeded, $failed failed"
    return 0
}

ct-all_install() {
    echo "Creating containers from all templates..."
    local template_dir="/var/lib/vz/template/cache"
    local ct_id=150

    if ! dir_exists "$template_dir"; then
        fail "Template directory not found: $template_dir"
        return 1
    fi

    for template in "$template_dir"/*; do
        if file_exists "$template"; then
            local template_name
            template_name=$(basename "$template")
            echo "Creating LXC from template: $template_name"
            create_lxc_from_template "$template_name" "$((ct_id++))" || echo "Failed to create LXC from $template_name"
        fi
    done

    echo "Creating containers from all templates done!"
}

si() {
    echo "Installing packages: $*"
    local packages=("$@")
    for package in "${packages[@]}"; do
        if ! has_cmd "$package"; then
            echo "Installing $package..."
            apt-get -qq -y --no-install-recommends install "$package" || echo "Failed to install $package"
        fi
    done
    echo "Package installation done!"
}

core_install() {
    echo "Starting core installation..."
    post-install_install
    cpu-governor_install

    echo "Installing core components..."
    si git-core micro zsh-theme-powerlevel9k zsh curl wget htop pciutils jq \
        smartmontools zfsutils-linux rsync whiptail dialog numactl fio stress \
        usbutils restic ethtool nvme-cli lsof lm-sensors udisks2 dysk just duf \
        proxmox-backup-client libguestfs-tools rclone stow ripgrep jq yq gum fzf

    if ! dir_exists "$DOT_DIR"; then
        echo "Cloning dotfiles..."
        git clone https://github.com/pervezfunctor/dotfiles.git "$DOT_DIR" || {
            fail "Failed to clone dotfiles"
            return 1
        }
        echo "Dotfiles cloned slogfully!"
    fi

    local timestamp
    timestamp=$(date +%Y%m%d-%H%M%S)

    if file_exists ~/.zshrc; then
        echo "Backing up .zshrc"
        mv ~/.zshrc "/tmp/.zshrc.backup-$timestamp"
    fi

    if ! grep -q "source ~/.ilm/share/bashrc" ~/.bashrc; then
        echo "source ~/.ilm/share/bashrc" >>~/.bashrc
    fi
    ln -sf "$DOT_DIR/share/dot-zshrc" ~/.zshrc

    echo "Core installation completed!"
}

create_lxc_from_template() {
    local template="$1"
    local ct_id="$2"
    echo "Creating LXC from template: $template with ID: $ct_id"
    local distro
    # Extract just the base distro name (first part before any hyphen or underscore)
    distro=$(echo "$template" | cut -d'-' -f1 | sed 's/_.*//')

    # Clean up the distro name to be DNS-compliant
    distro=$(echo "$distro" | tr '[:upper:]' '[:lower:]')

    # Create a valid hostname (max 63 chars, no underscores, alphanumeric and hyphens only)
    local hostname="${distro}-ct"
    hostname=$(echo "$hostname" | sed 's/[^a-z0-9-]//g' | sed 's/--*/-/g')

    # Ensure hostname doesn't exceed 63 characters
    if [[ ${#hostname} -gt 63 ]]; then
        hostname="${hostname:0:60}-ct"
    fi

    echo "Using hostname: $hostname for template: $template"

    if ! pct create "$ct_id" /var/lib/vz/template/cache/"$template" \
        --hostname "$hostname" \
        --memory 4096 \
        --cores 2 \
        --rootfs local-lvm:8 \
        --net0 name=eth0,bridge=vmbr0,ip=dhcp \
        --storage local-lvm \
        --console 0 \
        --tty 2 \
        --unprivileged 1; then
        fail "Failed to create LXC from $template"
        return 1
    fi
    echo "LXC creation from template $template with ID $ct_id done!"
    return 0
}

usage() {
    cat <<EOF
Usage: $0 [OPTIONS] [SERVICES...]

Proxmox VE Installation and Configuration Script

OPTIONS:
    ct-templates      Install container templates
    ct-all            Create all containers from templates
    all               Install everything
    help|-h|--help              Show this help message

Examples:
    $0 all                    # Install everything
    $0 ct-templates           # Install only container templates

EOF
}

parse_args() {
    echo "Parsing command line arguments..."
    while [[ $# -gt 0 ]]; do
        case $1 in
        ct-templates) CT_TEMPLATES=1 ;;
        ct-all) CT_ALL=1 ;;
        all) ALL=1 ;;
        help | -h | --help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        esac
        shift
    done
    echo "Command line arguments parsed!"
}

main() {
    echo "Starting Proxmox installation script..."
    check_root_user
    check_proxmox

    if [[ $# -eq 0 ]]; then
        CORE=1
        CT_TEMPLATES=1
    else
        parse_args "$@"

        if [[ $ALL -eq 1 ]]; then
            CT_TEMPLATES=1
            CT_ALL=1
        fi
    fi

    [[ $CORE -eq 1 ]] && core_install
    [[ $CT_TEMPLATES -eq 1 ]] && ct-templates_install
    [[ $CT_ALL -eq 1 ]] && ct-all_install

    echo "Proxmox installation script completed slogfully!"
}

main "$@"

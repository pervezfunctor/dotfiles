#!/usr/bin/env bash

# shellcheck disable=SC1090
source <(curl -sSL https://is.gd/anumof)

readonly DOT_DIR=${DOT_DIR:-$HOME/.ilm}

readonly COMMUNITY_SCRIPTS_BASE="https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"

declare -g CT_TEMPLATES=0
declare -g VM_TEMPLATES=0
declare -g CT_ALL=0
declare -g VM_ALL=0
declare -g ALL=0

check_proxmox() {
    if ! file_exists "/etc/pve/local/pve-ssl.pem"; then
        error "This script is designed to run on Proxmox VE"
        exit 1
    fi
}

setup_directories() {
    local dirs=("$DOT_DIR" "$DOT_DIR/config" "$DOT_DIR/logs" "$DOT_DIR/backups")

    for dir in "${dirs[@]}"; do
        if ! dir_exists "$dir"; then
            mkdir -p "$dir"
            slog "Created directory: $dir"
        fi
    done
}

safe_download() {
    local url="$1"
    local max_retries=3
    local retry_count=0

    while [[ $retry_count -lt $max_retries ]]; do
        if curl -fsSL --connect-timeout 10 --max-time 30 "$url"; then
            return 0
        fi

        retry_count=$((retry_count + 1))
        warn "Download failed, retrying ($retry_count/$max_retries)..."
        sleep 2
    done

    error "Failed to download from: $url"
    return 1
}

execute_install() {
    local name="$1"
    local url="$2"
    local pre_install_msg="${3:-}"

    slog "Starting installation of $name..."

    if [[ -n "$pre_install_msg" ]]; then
        warn "$pre_install_msg"
    fi

    if safe_download "$url" | bash; then
        success "$name installation completed successfully"
        return 0
    else
        error "$name installation failed"
        return 1
    fi
}

post-install_install() {
    execute_install "Post-PVE Install" "${COMMUNITY_SCRIPTS_BASE}/misc/post-pve-install.sh"
}

remove-subscription_install() {
    execute_install "Remove Subscription Notice" \
        "${COMMUNITY_SCRIPTS_BASE}/misc/remove-subscription-notice.sh"
}

casaos_install() {
    execute_install "CasaOS" "${COMMUNITY_SCRIPTS_BASE}/ct/casaos.sh"
}

jellyfin_install() {
    execute_install "Jellyfin" "${COMMUNITY_SCRIPTS_BASE}/ct/jellyfin.sh"
}

plex_install() {
    execute_install "Plex" "${COMMUNITY_SCRIPTS_BASE}/ct/plex.sh"
}

code_server_install() {
    execute_install "Code Server" \
        "${COMMUNITY_SCRIPTS_BASE}/tools/addon/coder-code-server.sh" \
        "Create a Debian LXC container first"
}

backup_server_install() {
    execute_install "Proxmox Backup Server" \
        "${COMMUNITY_SCRIPTS_BASE}/ct/proxmox-backup-server.sh"
}

backup_server_post_install() {
    execute_install "Proxmox Backup Server Post-Install" \
        "${COMMUNITY_SCRIPTS_BASE}/tools/pve/post-pbs-install.sh"
}

tailscale_install() {
    execute_install "Tailscale" \
        "${COMMUNITY_SCRIPTS_BASE}/tools/addon/add-tailscale-lxc.sh"
}

file_browser_install() {
    execute_install "File Browser" \
        "${COMMUNITY_SCRIPTS_BASE}/tools/addon/filebrowser.sh" \
        "Create a Debian LXC container first"
}

docker_lxc_install() {
    execute_install "Docker LXC" "${COMMUNITY_SCRIPTS_BASE}/ct/docker.sh"
}

dockge_install() {
    execute_install "Dockge" "${COMMUNITY_SCRIPTS_BASE}/ct/dockge.sh"
}

adguard_install() {
    execute_install "AdGuard Home" "${COMMUNITY_SCRIPTS_BASE}/ct/adguard.sh"
}

pihole_install() {
    execute_install "Pi-hole" "${COMMUNITY_SCRIPTS_BASE}/ct/pihole.sh"
    slog "Use 'pihole setpassword' to set password for Pi-hole"
}

authelia_install() {
    execute_install "Authelia" "${COMMUNITY_SCRIPTS_BASE}/ct/authelia.sh"
}

duplicati_install() {
    execute_install "Duplicati" "${COMMUNITY_SCRIPTS_BASE}/ct/duplicati.sh"
}

deluge_install() {
    execute_install "Deluge" "${COMMUNITY_SCRIPTS_BASE}/ct/deluge.sh"
}

qbittorrent_install() {
    execute_install "qBittorrent" "${COMMUNITY_SCRIPTS_BASE}/ct/qbittorrent.sh"
}

rclone_install() {
    execute_install "Rclone" "${COMMUNITY_SCRIPTS_BASE}/ct/rclone.sh"
    slog "Use 'htpasswd -b -B /opt/login.pwd newuser newuserpassword' to add new user"
}

syncthing_install() {
    execute_install "Syncthing" "${COMMUNITY_SCRIPTS_BASE}/ct/syncthing.sh"
}

paperless_ai_install() {
    execute_install "Paperless-ng with AI" "${COMMUNITY_SCRIPTS_BASE}/ct/paperless-ai.sh"
}

ollama_install() {
    execute_install "Ollama" "${COMMUNITY_SCRIPTS_BASE}/ct/ollama.sh"
}

caddy_install() {
    execute_install "Caddy" "${COMMUNITY_SCRIPTS_BASE}/ct/caddy.sh"
}

nginx_proxy_install() {
    execute_install "Nginx Proxy Manager" \
        "${COMMUNITY_SCRIPTS_BASE}/ct/nginxproxymanager.sh"
}

rustdesk_install() {
    execute_install "RustDesk Server" "${COMMUNITY_SCRIPTS_BASE}/ct/rustdeskserver.sh"
}

guacamole_install() {
    execute_install "Apache Guacamole" "${COMMUNITY_SCRIPTS_BASE}/ct/apache-guacamole.sh"
}

vaultwarden_install() {
    execute_install "Vaultwarden" "${COMMUNITY_SCRIPTS_BASE}/ct/vaultwarden.sh"
}

backrest_install() {
    execute_install "Backrest" "${COMMUNITY_SCRIPTS_BASE}/ct/backrest.sh"
}

uptime_kuma_install() {
    execute_install "Uptime Kuma" "${COMMUNITY_SCRIPTS_BASE}/ct/uptimekuma.sh"
}

alpine_lxc_install() {
    execute_install "Alpine LXC" "${COMMUNITY_SCRIPTS_BASE}/ct/alpine.sh"
}

twofauth_install() {
    execute_install "2FAuth" "${COMMUNITY_SCRIPTS_BASE}/ct/2fauth.sh"
}

iventoy_install() {
    execute_install "iVentoy" "${COMMUNITY_SCRIPTS_BASE}/ct/iventoy.sh" \
        "Container MUST be privileged"
}

docker_install() {
    execute_install "Docker" "${COMMUNITY_SCRIPTS_BASE}/vm/docker-vm.sh"
}

openwrt_install() {
    execute_install "OpenWrt" "${COMMUNITY_SCRIPTS_BASE}/vm/openwrt.sh"
}

umbrel_install() {
    execute_install "Umbrel OS" "${COMMUNITY_SCRIPTS_BASE}/vm/umbrel-os-vm.sh"
}

opnsense_install() {
    execute_install "OPNsense" "${COMMUNITY_SCRIPTS_BASE}/vm/opnsense-vm.sh"
}

nextcloud_install() {
    execute_install "Nextcloud" "${COMMUNITY_SCRIPTS_BASE}/vm/nextcloud-vm.sh"
}

ubuntu_install() {
    execute_install "Ubuntu" "${COMMUNITY_SCRIPTS_BASE}/vm/ubuntu2504-vm.sh"
}

debian_install() {
    execute_install "Debian" "${COMMUNITY_SCRIPTS_BASE}/vm/debian-vm.sh"
}

arch_install() {
    execute_install "Arch Linux" "${COMMUNITY_SCRIPTS_BASE}/vm/archlinux-vm.sh"
}

ct_templates_install() {
    slog "Installing container templates..."

    local templates=(
        "ubuntu.*standard"
        "debian.*standard"
        "rockylinux.*default"
        "fedora.*default"
        "archlinux-base"
        "centos.*default"
        "opensuse.*default"
    )

    for pattern in "${templates[@]}"; do
        local template
        template=$(pveam available | awk '{print $2}' | grep -E "^${pattern}" | sort -r | head -n 1)

        if [[ -n "$template" ]]; then
            slog "Downloading template: $template"
            pveam download local "$template" || warn "Failed to download $template"
        else
            warn "No template found for pattern: $pattern"
        fi
    done
}

vm_templates_install() {
    slog "Installing VM templates..."

    local current_dir
    current_dir="$(dirname "$0")"

    local distros=("debian" "fedora" "ubuntu" "alpine" "centos")

    for distro in "${distros[@]}"; do
        if file_exists "$current_dir/vm-template"; then
            slog "Creating $distro VM template..."
            "$current_dir/vm-template" --distro "$distro" || warn "Failed to create $distro template"
        else
            warn "VM template script not found: $current_dir/vm-template"
        fi
    done
}

ct_all_install() {
    slog "Creating containers from all templates..."

    local template_dir="/var/lib/vz/template/cache"

    if ! dir_exists "$template_dir"; then
        error "Template directory not found: $template_dir"
        return 1
    fi

    for template in "$template_dir"/*; do
        if file_exists "$template"; then
            local template_name
            template_name=$(basename "$template")
            slog "Creating LXC from template: $template_name"

            create_lxc_from_template "$template_name" || warn "Failed to create LXC from $template_name"
        fi
    done
}

vm_all_install() {
    slog "Creating VMs from all templates..."

    local templates=(
        "201:101:debian-vm"
        "202:102:fedora-vm"
        "203:103:rocky-vm"
        "204:104:ubuntu-vm"
    )

    pushd "$DOT_DIR/extras/proxmox" || {
        error "Cannot access $DOT_DIR/extras/proxmox"
        return 1
    }

    for template_info in "${templates[@]}"; do
        IFS=':' read -r source_id dest_id vm_name <<<"$template_info"

        if qm status "$source_id" >/dev/null 2>&1; then
            slog "Cloning VM $source_id to $dest_id ($vm_name)"
            qm clone "$source_id" "$dest_id" --name "$vm_name" || warn "Failed to clone VM $source_id"
        else
            warn "Source VM $source_id not found"
        fi
    done

    popd || true

}

si() {
    local packages=("$@")
    for package in "${packages[@]}"; do
        if ! has_cmd "$package"; then
            slog "Installing $package..."
            apt-get -qq -y --no-install-recommends install "$package" || warn "Failed to install $package"
        fi
    done
}

systools_install() {
    si powertop smartmontools sanoid live-build zfsutils-linux rsync dialog proxmox-backup-client restic
}

core_install() {
    slog "Installing core components..."

    local packages=("git-core" "micro" "zsh-theme-powerlevel9k" "zsh" "curl" "wget")
    si "${packages[@]}"

    if ! dir_exists ~/.ilm; then
        slog "Cloning dotfiles..."
        git clone https://github.com/pervezfunctor/dotfiles.git ~/.ilm || {
            error "Failed to clone dotfiles"
            return 1
        }
    fi

    if has_cmd ilmi; then
        slog "Core installation already completed"
        return 0
    fi

    local timestamp
    timestamp=$(date +%Y%m%d-%H%M%S)

    if file_exists ~/.bashrc; then
        slog "Backing up .bashrc"
        mv ~/.bashrc "/tmp/.bashrc.backup-$timestamp"
    fi

    if file_exists ~/.zshrc; then
        slog "Backing up .zshrc"
        mv ~/.zshrc "/tmp/.zshrc.backup-$timestamp"
    fi

    echo "source ~/.ilm/share/bashrc" >~/.bashrc
    ln -sf ~/.ilm/share/dot-zshrc ~/.zshrc

    success "Core installation completed"
}

create_lxc_from_template() {
    local template="$1"
    slog "Creating LXC from template: $template"
    # @TODO: Implement LXC creation from template
    return 0
}

usage() {
    cat <<EOF
Usage: $0 [OPTIONS] [SERVICES...]

Proxmox VE Installation and Configuration Script

OPTIONS:
    --ct-templates      Install container templates
    --vm-templates      Install VM templates
    --ct-all           Create all containers from templates
    --vm-all           Create all VMs from templates
    --all              Install everything
    --verbose          Enable verbose output
    --dry-run          Show what would be done without executing
    --help             Show this help message

SERVICES:
    Core Services:
        post, remove-subscription, core

    Container Services:
        casaos, jellyfin, plex, code-server, backup-server, tailscale,
        file-browser, docker-lxc, dockge, adguard, pihole, authelia,
        duplicati, deluge, qbittorrent, rclone, syncthing, paperless-ai,
        ollama, caddy, nginx-proxy, rustdesk, guacamole, vaultwarden,
        backrest, uptime-kuma, alpine-lxc, twofauth, iventoy

    VM Services:
        docker, openwrt, umbrel, opnsense, nextcloud, ubuntu,
        debian, arch

Examples:
    $0 --all                    # Install everything
    $0 casaos jellyfin plex     # Install specific services
    $0 --ct-templates           # Install only container templates

EOF
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
        --ct-templates)
            CT_TEMPLATES=1
            shift
            ;;
        --vm-templates)
            VM_TEMPLATES=1
            shift
            ;;
        --ct-all)
            CT_ALL=1
            shift
            ;;
        --vm-all)
            VM_ALL=1
            shift
            ;;
        --all)
            ALL=1
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            # Store remaining arguments for service installation
            break
            ;;
        esac
    done
}

proxmox-backup-server_install() {
    execute_install "Proxmox Backup Server" \
        "${COMMUNITY_SCRIPTS_BASE}/ct/proxmox-backup-server.sh"
}

main() {
    slog "Starting Proxmox installation script..."

    parse_args "$@"
    post-install_install

    check_root_user
    check_proxmox
    setup_directories
    systools_install
    core_install

    if [[ $ALL -eq 1 ]]; then
        CT_TEMPLATES=1
        VM_TEMPLATES=1
        CT_ALL=1
        VM_ALL=1
    fi

    [[ $CT_TEMPLATES -eq 1 ]] && ct_templates_install
    [[ $VM_TEMPLATES -eq 1 ]] && vm_templates_install
    [[ $CT_ALL -eq 1 ]] && ct_all_install
    [[ $VM_ALL -eq 1 ]] && vm_all_install

    local failed_services=()

    for service in "$@"; do
        if [[ "$service" =~ ^-- ]]; then
            continue
        fi

        # Convert hyphens to underscores for function names
        local function_name="${service//-/_}_install"

        if fn_exists "$function_name"; then
            slog "Installing service: $service"
            if ! "$function_name"; then
                failed_services+=("$service")
            fi
        else
            warn "Unknown service: $service"
            failed_services+=("$service")
        fi
    done

    if [[ ${#failed_services[@]} -eq 0 ]]; then
        success "All installations completed successfully!"
    else
        error "The following services failed to install:"
        for service in "${failed_services[@]}"; do
            error "  - $service"
        done
        exit 1
    fi

    slog "Installation script completed. Check $LOG_FILE for details."
}

main "$@"

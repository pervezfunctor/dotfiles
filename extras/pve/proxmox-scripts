#! /usr/bin/env bash

set -euo pipefail

export DOT_DIR=${DOT_DIR:-$HOME/.ilm}
# shellcheck disable=SC1091
source "$DOT_DIR/share/utils"

readonly COMMUNITY_SCRIPTS_BASE="https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main"

casaos-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/casaos.sh)"
}

jellyfin-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/jellyfin.sh)"
}

plex-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/plex.sh)"
}

backup-server-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/proxmox-backup-server.sh)"
}

docker-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/docker.sh)"
}

dockge-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/dockge.sh)"
}

adguard-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/adguard.sh)"
}

pihole-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/pihole.sh)"
  slog "Use 'pihole setpassword' to set password for Pi-hole"
}

authelia-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/authelia.sh)"
}

duplicati-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/duplicati.sh)"
}

deluge-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/deluge.sh)"
}

qbittorrent_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/qbittorrent.sh)"
}

rclone-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/rclone.sh)"
  slog "Use 'htpasswd -b -B /opt/login.pwd newuser newuserpassword' to add new user"
}

syncthing-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/syncthing.sh)"
}

paperless-ai_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/paperless-ai.sh)"
}

ollama-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/ollama.sh)"
}

caddy-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/caddy.sh)"
}

nginx-proxy-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/nginxproxymanager.sh)"
}

rustdesk-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/rustdeskserver.sh)"
}

guacamole-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/apache-guacamole.sh)"
}

vaultwarden-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/vaultwarden.sh)"
}

backrest-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/backrest.sh)"
}

uptime-kuma-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/uptimekuma.sh)"
}

alpine-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/alpine.sh)"
}

twofauth-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/2fauth.sh)"
}

iventoy-lxc_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/ct/iventoy.sh)"
}

docker-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/docker-vm.sh)"
}

openwrt-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/openwrt.sh)"
}

umbrel-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/umbrel-os-vm.sh)"
}

opnsense-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/opnsense-vm.sh)"
}

nextcloud-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/nextcloud-vm.sh)"
}

ubuntu-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/ubuntu2504-vm.sh)"
}

debian-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/debian-vm.sh)"
}

arch-vm_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/vm/archlinux-vm.sh)"
}

backup-server-lxc_post_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/pve/post-pbs-install.sh)"
}

code-server-addon_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/addon/coder-code-server.sh)"
}
tailscale-addon_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/addon/add-tailscale-lxc.sh)"
}

file-browser-addon_install() {
  bash -c "$(curl -fsSL ${COMMUNITY_SCRIPTS_BASE}/tools/addon/filebrowser.sh)"
}

show_dialog() {
  local -a options=("$@")
  local -a checklist_entries=()

  for option in "${options[@]}"; do
    checklist_entries+=("$option" "$option" "off")
  done

  local selected_output
  if ! selected_output=$(whiptail --separate-output --checklist "Select services to install" 20 60 15 \
    "${checklist_entries[@]}" \
    3>&1 1>&2 2>&3); then
    printf '%s\n' "Selection cancelled." >&2
    return 1
  fi

  local -a selected=()
  mapfile -t selected <<<"$selected_output"
  echo "${selected[@]}"
}

addon_dialog() {
  local -a addons=(
    "tailscale"
    "file-browser"
    "code-server"
  )
  show_dialog "${addons[@]}"
}

lxc_dialog() {
  local -a lxc_services=(
    "backup-server" "docker" "dockge" "adguard" "pihole"
    "authelia" "duplicati" "deluge" "qbittorrent" "rclone"
    "syncthing" "paperless-ai" "ollama" "caddy" "nginx-proxy"
    "rustdesk" "guacamole" "vaultwarden" "backrest"
    "uptime-kuma" "alpine" "twofauth" "iventoy"
  )
  show_dialog "${lxc_services[@]}"
}

vm_dialog() {
  local -a vm_services=(
    "docker" "openwrt" "umbrel" "opnsense"
    "nextcloud" "ubuntu" "debian" "arch"
  )
  show_dialog "${vm_services[@]}"
}

show_category_menu() {
  local category
  if ! category=$(whiptail --menu "Choose a service category" 15 40 5 \
    lxc "LXC containers" \
    addon "Addons" \
    vm "Virtual Machines" \
    3>&1 1>&2 2>&3); then
    printf '%s\n' "Selection cancelled." >&2
    return 1
  fi

  echo "$category"
}

execute_service() {
  local category="$1"
  local service="$2"
  "${service}-${category}_install"
}

main() {
  if [[ $# -ne 0 ]]; then
    for service in "$@"; do
      if fn_exists "${service}_install"; then
        echo "Installing ${service}"
        sleep 5
        execute_service "${service}_install"
      else
        echo "No installer found for $service"
      fi
    done
    return 0
  fi

  local category
  category=$(show_category_menu)

  local -a selected

  case "$category" in
  lxc)
    read -r -a selected < <(lxc_dialog)
    ;;
  addon)
    read -r -a selected < <(addon_dialog)
    ;;
  vm)
    read -r -a selected < <(vm_dialog)
    ;;
  *)
    echo "Invalid selection" >&2
    exit 1
    ;;
  esac

  echo "Selected services: ${selected[*]}"

  for service in "${selected[@]}"; do
    echo "Installing $service($category)..."
    sleep 5
    execute_service "$category" "$service"
  done

  echo "Done!"
}

main "$@"

#!/usr/bin/env bash

set -euo pipefail

# Default configuration
DEFAULT_POOL="vmusers"
DEFAULT_LOGFILE="/var/log/setup-proxmox-vm-manager.log"
DEFAULT_SSH_CONFIG="/etc/ssh/sshd_config"
DRY_RUN=false
ROLLBACK_FILE=""

# Global variables for rollback
ROLLBACK_ACTIONS=()

# Initialize LOGFILE later after parsing arguments

log() { echo "üü© [$(date '+%F %T')] $*"; }
warn() { echo "üü® [$(date '+%F %T')] $*" >&2; }
error() {
  echo "üü• [$(date '+%F %T')] $*" >&2
  if [[ -n "$ROLLBACK_FILE" ]]; then
    rollback_changes
  fi
  exit 1
}

dry_run_log() {
  if "$DRY_RUN"; then
    echo "üîç [$(date '+%F %T')] DRY-RUN: $*"
  fi
}

add_rollback_action() {
  local action="$1"
  ROLLBACK_ACTIONS+=("$action")
  if [[ -n "$ROLLBACK_FILE" ]]; then
    echo "$action" >>"$ROLLBACK_FILE"
  fi
}

rollback_changes() {
  log "Initiating rollback due to error... üîÑ"
  for action in "${ROLLBACK_ACTIONS[@]}"; do
    log "Rolling back: $action"
    eval "$action" 2>/dev/null || warn "Failed to rollback: $action"
  done
  log "Rollback completed. ‚ö†Ô∏è"
}

usage() {
  cat <<EOF
Usage: $0 <username> [OPTIONS]

Required:
  username        Username for the new user

Options:
  --admin         Give user near-root permissions (Administrator role)
  --vm-manager    Give VM management permissions (default)
  --auditor       Give read-only Auditor permissions
  --pool NAME     Set pool name (default: $DEFAULT_POOL)
  --ssh-key FILE  Add SSH key from file (disables password auth for user)
  --password-auth Enable password authentication (default: yes)
  --no-ssh-config Skip SSH configuration changes
  --dry-run       Show what would be done without making changes
  --logfile FILE  Log to specific file (default: $DEFAULT_LOGFILE)
  --help          Show this help message

Privilege levels:
  --admin         Full Administrator access
  --vm-manager    VM/Container management with datastore access
  --auditor       Read-only Auditor access

Examples:
  $0 myuser --admin
  $0 myuser --vm-manager --ssh-key ~/.ssh/id_rsa.pub
  $0 myuser --pool developers --no-ssh-config
EOF
  exit 1
}

validate_username() {
  local username="$1"

  # Check if username is provided
  if [[ -z "$username" ]]; then
    error "Username cannot be empty."
  fi

  # Check username format (alphanumeric, underscores, hyphens, no spaces)
  if [[ ! "$username" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    error "Invalid username format. Only alphanumeric characters, underscores, and hyphens are allowed."
  fi

  # Check username length
  if [[ ${#username} -lt 3 || ${#username} -gt 32 ]]; then
    error "Username must be between 3 and 32 characters."
  fi

  # Check if username starts with a letter or underscore
  if [[ ! "$username" =~ ^[a-zA-Z_] ]]; then
    error "Username must start with a letter or underscore."
  fi

  # Check if username is a reserved name
  local reserved_names=("root" "admin" "daemon" "bin" "sys" "sync" "games" "man" "lp" "mail" "news" "uucp" "proxy" "www-data" "backup" "list" "irc" "gnats" "nobody" "systemd-network" "systemd-resolve" "syslog" "messagebus" "uuidd" "dnsmasq" "usbmux" "rtkit" "pulse" "speech-dispatcher" "avahi" "saned" "colord" "hplip" "geoclue" "gnome-initial-setup" "gdm")
  for reserved in "${reserved_names[@]}"; do
    if [[ "$username" == "$reserved" ]]; then
      error "Username '$username' is reserved and cannot be used."
    fi
  done
}

check_root() {
  if ! "$DRY_RUN" && [[ $EUID -ne 0 ]]; then
    error "Must be run as root."
  elif "$DRY_RUN" && [[ $EUID -ne 0 ]]; then
    warn "Dry-run mode: Not checking for root privileges."
  fi
}

create_user() {
  local user="$1"
  local ssh_key_file="$2"
  local password_auth="$3"

  if ! id "$user" &>/dev/null; then
    dry_run_log "Creating system user '$user'."
    if ! "$DRY_RUN"; then
      useradd -m -s /bin/bash "$user"
      add_rollback_action "userdel -r $user 2>/dev/null || true"

      if [[ -n "$ssh_key_file" ]]; then
        # Setup SSH key authentication
        local user_home="/home/$user"
        local ssh_dir="$user_home/.ssh"
        mkdir -p "$ssh_dir"
        chmod 700 "$ssh_dir"
        cp "$ssh_key_file" "$ssh_dir/authorized_keys"
        chmod 600 "$ssh_dir/authorized_keys"
        chown -R "$user:$user" "$ssh_dir"

        # Disable password for this user if SSH key is provided
        passwd -l "$user" 2>/dev/null || true
        log "SSH key added and password disabled for '$user'. üîê"
      elif "$password_auth"; then
        # Prompt for password
        log "Setting password for '$user'. Please enter a secure password."
        passwd "$user"
      else
        # Lock the account if no password auth and no SSH key
        passwd -l "$user" 2>/dev/null || true
        log "Account '$user' created but locked. No authentication method enabled. ‚ö†Ô∏è"
      fi
    fi
  else
    log "‚úÖ System user '$user' already exists."
  fi

  if ! pveum user list | awk '{print $1}' | grep -qx "${user}@pam"; then
    dry_run_log "Creating Proxmox user '${user}@pam'."
    if ! "$DRY_RUN"; then
      pveum useradd "${user}@pam" -comment "VM manager account"
      add_rollback_action "pveum userdel ${user}@pam 2>/dev/null || true"
    fi
  else
    log "‚úÖ Proxmox user '${user}@pam' already exists."
  fi
}

ensure_pool() {
  local pool="$1"
  if ! pveum pool list | awk '{print $1}' | grep -qx "$pool"; then
    dry_run_log "Creating pool '$pool'."
    if ! "$DRY_RUN"; then
      pveum pooladd "$pool" -comment "VM management pool"
      add_rollback_action "pveum pooldel $pool 2>/dev/null || true"
    fi
  else
    log "‚úÖ Pool '$pool' already exists."
  fi
}

assign_vm_permissions() {
  local user="$1"
  local pool="$2"
  dry_run_log "Assigning VM management roles to '${user}@pam'."

  if ! "$DRY_RUN"; then
    pveum usermod "${user}@pam" -append -pool "$pool" || true
  fi

  declare -a ROLES=(
    "PVEDatastoreAdmin:/"
    "PVEVMAdmin:/"
    "PVEPoolAdmin:/pool/${pool}"
  )

  for entry in "${ROLES[@]}"; do
    local role=${entry%%:*}
    local path=${entry##*:}
    if ! pveum acl list | grep -q "${user}@pam" | grep -q "$path" | grep -q "$role"; then
      dry_run_log "Adding ACL: role=$role path=$path"
      if ! "$DRY_RUN"; then
        pveum aclmod "$path" -user "${user}@pam" -role "$role"
        add_rollback_action "pveum aclmod $path -user ${user}@pam -role None 2>/dev/null || true"
      fi
    else
      log "‚úÖ ACL $role on $path already present."
    fi
  done
}

assign_admin_permissions() {
  local user="$1"
  dry_run_log "Assigning Administrator role to '${user}@pam'."
  if ! pveum acl list | grep -q "${user}@pam" | grep -q "/" | grep -q "Administrator"; then
    if ! "$DRY_RUN"; then
      pveum aclmod / -user "${user}@pam" -role Administrator
      add_rollback_action "pveum aclmod / -user ${user}@pam -role None 2>/dev/null || true"
    fi
  else
    log "‚úÖ Administrator privileges already set."
  fi
}

assign_auditor_permissions() {
  local user="$1"
  dry_run_log "Assigning Auditor role to '${user}@pam'."
  if ! pveum acl list | grep -q "${user}@pam" | grep -q "/" | grep -q "PVEAuditor"; then
    if ! "$DRY_RUN"; then
      pveum aclmod / -user "${user}@pam" -role PVEAuditor
      add_rollback_action "pveum aclmod / -user ${user}@pam -role None 2>/dev/null || true"
    fi
  else
    log "‚úÖ Auditor privileges already set."
  fi
}

configure_ssh() {
  local user="$1"
  local ssh_key_file="$2"
  local password_auth="$3"
  local conf="$DEFAULT_SSH_CONFIG"
  local backup
  backup="${conf}.backup.$(date +%Y%m%d_%H%M%S)"

  dry_run_log "Creating backup of SSH config at $backup"
  if ! "$DRY_RUN"; then
    cp "$conf" "$backup"
    add_rollback_action "mv $backup $conf 2>/dev/null || true"
  fi

  dry_run_log "Hardening SSH configuration."
  if ! "$DRY_RUN"; then
    # Disable root login
    sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin no/' "$conf"

    # Configure password authentication based on settings
    if [[ -n "$ssh_key_file" ]] && ! "$password_auth"; then
      sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication no/' "$conf"
      log "Password authentication disabled for SSH. üîí"
    else
      sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' "$conf"
      log "Password authentication enabled for SSH. üîì"
    fi

    # Configure AllowUsers
    if ! grep -q "^AllowUsers" "$conf"; then
      echo "AllowUsers $user" >>"$conf"
    elif ! grep -q "$user" "$conf"; then
      sed -i "s/^AllowUsers.*/& $user/" "$conf"
    fi

    # Restart SSH service
    if systemctl reload sshd 2>/dev/null; then
      log "‚úÖ SSH configuration updated and reloaded."
    else
      systemctl restart sshd
      log "‚úÖ SSH configuration updated and restarted."
    fi
  fi
}

main() {
  # Default values
  local privilege="vm-manager"
  local pool="$DEFAULT_POOL"
  local ssh_key_file=""
  local password_auth=true
  local configure_ssh_setting=true

  # Parse command line arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
    --admin)
      privilege="admin"
      shift
      ;;
    --vm-manager)
      privilege="vm-manager"
      shift
      ;;
    --auditor)
      privilege="auditor"
      shift
      ;;
    --pool)
      pool="$2"
      shift 2
      ;;
    --ssh-key)
      ssh_key_file="$2"
      if [[ ! -f "$ssh_key_file" ]]; then
        error "SSH key file not found: $ssh_key_file"
      fi
      password_auth=false
      shift 2
      ;;
    --password-auth)
      password_auth=true
      shift
      ;;
    --no-password-auth)
      password_auth=false
      shift
      ;;
    --no-ssh-config)
      configure_ssh_setting=false
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    --logfile)
      LOGFILE="$2"
      shift 2
      ;;
    --help)
      usage
      ;;
    -*)
      error "Unknown option: $1"
      ;;
    *)
      if [[ -z "${username:-}" ]]; then
        username="$1"
      else
        error "Multiple usernames provided. Only one username is allowed."
      fi
      shift
      ;;
    esac
  done

  # Check if username is provided
  if [[ -z "${username:-}" ]]; then
    usage
  fi

  # Setup logging after parsing arguments
  exec > >(tee -a "$LOGFILE") 2>&1

  # Setup rollback file
  if ! "$DRY_RUN"; then
    ROLLBACK_FILE="/tmp/proxmox-vm-user-rollback-$(date +%Y%m%d_%H%M%S).sh"
    echo "#!/bin/bash" >"$ROLLBACK_FILE"
    chmod +x "$ROLLBACK_FILE"
    log "Rollback file created: $ROLLBACK_FILE"
  fi

  check_root
  validate_username "$username"
  log "Starting setup for user '$username' (privilege=$privilege, pool=$pool)."

  ensure_pool "$pool"
  create_user "$username" "$ssh_key_file" "$password_auth"

  case "$privilege" in
  "admin")
    assign_admin_permissions "$username"
    ;;
  "vm-manager")
    assign_vm_permissions "$username" "$pool"
    ;;
  "auditor")
    assign_auditor_permissions "$username"
    ;;
  *)
    error "Unknown privilege level: $privilege"
    ;;
  esac

  if "$configure_ssh_setting"; then
    configure_ssh "$username" "$ssh_key_file" "$password_auth"
  fi

  # Clear rollback file on success
  if [[ -n "$ROLLBACK_FILE" ]]; then
    rm -f "$ROLLBACK_FILE"
  fi

  log "‚úÖ User '$username' setup complete."
  case "$privilege" in
  "admin")
    log "Privileges: Administrator (full control)."
    ;;
  "vm-manager")
    log "Privileges: VM/CT management only."
    ;;
  "auditor")
    log "Privileges: Auditor (read-only)."
    ;;
  esac
  if "$configure_ssh_setting"; then
    log "SSH hardened. Root SSH disabled."
  fi
  log "All actions logged to $LOGFILE"
}

main "$@"

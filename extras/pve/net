#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<EOF
Usage: $0 <command> [interface]

Commands:
  list                 List all configured interfaces
  show <iface>         Show configuration for given interface
  up <iface>           Bring up interface
  down <iface>         Bring down interface
  reload               Reload all interfaces (safe way to apply changes)
  check                Validate configuration
  bridges              Show Linux bridge and port info
  raw                  Dump /etc/network/interfaces file
  backup               Create a backup of interfaces file
  restore <backup>     Restore from a backup file
  list-backups         List available backup files

Examples:
  $0 list
  $0 show vmbr0
  $0 up enp3s0
  $0 reload
  $0 bridges
  $0 backup
  $0 restore interfaces.backup.20231030_143022
  $0 list-backups
EOF
}

IFACES_FILE="/etc/network/interfaces"
BACKUP_DIR="/etc/network/backups"

# Create backup directory if it doesn't exist
[[ -d "$BACKUP_DIR" ]] || mkdir -p "$BACKUP_DIR"

backup_config() {
  local timestamp
  timestamp=$(date +%Y%m%d_%H%M%S)
  local backup_file="${BACKUP_DIR}/interfaces.backup.${timestamp}"

  if cp "$IFACES_FILE" "$backup_file"; then
    echo "✅ Backup created: $backup_file"
    return 0
  else
    echo "❌ Failed to create backup"
    return 1
  fi
}

list_backups() {
  echo "📁 Available backups:"
  if [[ -d "$BACKUP_DIR" ]] && [[ -n "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]]; then
    find "$BACKUP_DIR" -name "interfaces.backup.*" -printf "%f\t%t\n" | sed 's/\.backup\./\t/' | awk -F'\t' '{print $1, $2, $3}'
  else
    echo "No backups found in $BACKUP_DIR"
  fi
}

restore_config() {
  local backup_file="$1"

  if [[ -z "$backup_file" ]]; then
    echo "❌ Please provide backup file name."
    echo "Use '$0 list-backups' to see available backups."
    return 1
  fi

  # Handle relative paths
  if [[ ! "$backup_file" == /* ]]; then
    backup_file="${BACKUP_DIR}/${backup_file}"
  fi

  if [[ ! -f "$backup_file" ]]; then
    echo "❌ Backup file not found: $backup_file"
    return 1
  fi

  # Create a backup before restoring
  echo "🔄 Creating backup of current configuration before restoring..."
  backup_config

  if cp "$backup_file" "$IFACES_FILE"; then
    echo "✅ Configuration restored from: $backup_file"
    echo "💡 Run '$0 reload' to apply the restored configuration"
    return 0
  else
    echo "❌ Failed to restore configuration"
    return 1
  fi
}

cmd="${1:-}"
arg="${2:-}"

case "$cmd" in
list)
  ifquery --list
  ;;
show)
  if [[ -z "$arg" ]]; then
    echo "❌ Please provide interface name."
    usage
    exit 1
  fi
  ifquery "$arg"
  ;;
up)
  if [[ -z "$arg" ]]; then
    echo "❌ Please provide interface name."
    usage
    exit 1
  fi
  echo "🔄 Creating backup before bringing up interface..."
  backup_config
  ifup "$arg"
  ;;
down)
  if [[ -z "$arg" ]]; then
    echo "❌ Please provide interface name."
    usage
    exit 1
  fi
  echo "🔄 Creating backup before bringing down interface..."
  backup_config
  ifdown "$arg"
  ;;
reload)
  echo "🔄 Creating backup before reloading interfaces..."
  backup_config
  ifreload -a
  ;;
check)
  ifreload --check
  ;;
bridges)
  echo "🔧 Active Linux bridges and ports:"
  bridge link
  echo
  echo "🔧 Bridge summary:"
  bridge vlan
  ;;
raw)
  cat "$IFACES_FILE"
  ;;
backup)
  backup_config
  ;;
restore)
  restore_config "$arg"
  ;;
list-backups)
  list_backups
  ;;
*)
  usage
  exit 1
  ;;
esac

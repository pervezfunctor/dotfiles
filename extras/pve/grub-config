#!/usr/bin/env bash
# VFIO Configuration Script for Proxmox VE
#
# This script configures VFIO (Virtual Function I/O) device passthrough
# by selecting PCI devices and configuring them for passthrough to VMs.
#
# Prerequisites:
# - IOMMU must be enabled in BIOS/UEFI
# - Kernel parameters: intel_iommu=on iommu=pt (Intel) or amd_iommu=on iommu=pt (AMD)
# - Root privileges
#
# Usage: $0 [--dry-run] [--help]

set -euo pipefail
IFS=$'\n\t'

# Configuration paths
VFIO_CONF="/etc/modprobe.d/vfio.conf"
MODULES_FILE="/etc/modules"
INITRD_HOOK="/etc/initramfs-tools/modules"
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
BACKUP_DIR="/etc/modprobe.d/vfio-backups"
DRY_RUN=false

#--- Functions ------------------------------------------------------------

usage() {
  cat <<EOF
VFIO Configuration Script for Proxmox VE

This script configures VFIO device passthrough by selecting PCI devices and
configuring them for passthrough to virtual machines.

Prerequisites:
- IOMMU must be enabled in BIOS/UEFI
- Kernel parameters: intel_iommu=on iommu=pt (Intel) or amd_iommu=on iommu=pt (AMD)
- Root privileges

Usage: $0 [OPTIONS]

Options:
  --dry-run    Show what would be done without making changes
  --help       Show this help message

Example:
  $0 --dry-run    # Preview changes without applying them
  $0              # Apply VFIO configuration

EOF
  exit 0
}

require_cmd() {
  local cmd="$1"
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "‚ùå Missing dependency: $cmd"
    echo "Please install the package providing '$cmd' and try again."
    exit 1
  fi
}

check_root() {
  if ! "$DRY_RUN" && [[ $EUID -ne 0 ]]; then
    echo "‚ùå This script must be run as root."
    echo "Try: sudo $0 $*"
    exit 1
  elif "$DRY_RUN" && [[ $EUID -ne 0 ]]; then
    echo "‚ö†Ô∏è  Dry-run mode: Not checking for root privileges."
  fi
}

check_iommu() {
  echo "üîç Checking IOMMU support..."

  # Check if IOMMU is enabled in kernel
  if [[ -d /sys/kernel/iommu_groups ]]; then
    local iommu_groups
    iommu_groups=$(find /sys/kernel/iommu_groups -maxdepth 1 -type d | wc -l)
    if [[ "$iommu_groups" -gt 1 ]]; then
      echo "‚úÖ IOMMU detected with $((iommu_groups - 1)) IOMMU groups"
    else
      echo "‚ö†Ô∏è  IOMMU groups found but may not be properly configured"
    fi
  else
    echo "‚ùå IOMMU not detected. Please ensure:"
    echo "   1. IOMMU is enabled in BIOS/UEFI"
    echo "   2. Kernel parameters are set: intel_iommu=on iommu=pt (Intel) or amd_iommu=on iommu=pt (AMD)"
    echo "   3. System has been rebooted after adding kernel parameters"
    if ! "$DRY_RUN"; then
      exit 1
    fi
  fi

  # Check for VFIO modules
  local missing_modules=()
  for mod in vfio vfio_pci vfio_iommu_type1 vfio_virqfd; do
    if ! lsmod | grep -q "^$mod "; then
      missing_modules+=("$mod")
    fi
  done

  if [[ ${#missing_modules[@]} -gt 0 ]]; then
    echo "‚ö†Ô∏è  VFIO modules not currently loaded: ${missing_modules[*]}"
    echo "   This is normal if VFIO hasn't been configured yet."
  fi
}

confirm() {
  read -r -p "üö® This may affect boot. Continue? [y/N] " ans
  [[ "$ans" =~ ^[Yy]$ ]] || {
    echo "‚ùå Aborted."
    exit 1
  }
}

ensure_dir() {
  local dir="$1"
  [[ -d "$dir" ]] || {
    if "$DRY_RUN"; then
      echo "Would create directory: $dir"
    else
      mkdir -p "$dir"
    fi
  }
}

backup_if_exists() {
  local file="$1"
  if [[ -f "$file" ]]; then
    ensure_dir "$BACKUP_DIR"
    # Create a unique backup filename for each file
    local backup_file
    backup_file="$BACKUP_DIR/$(basename "$file").$TIMESTAMP.bak"
    if "$DRY_RUN"; then
      echo "Would back up $file ‚Üí $backup_file"
    else
      cp "$file" "$backup_file"
      echo "üíæ Backup created: $backup_file"
    fi
  fi
}

ensure_module() {
  local mod="$1" file="$2"
  if ! grep -q -E "^\s*${mod}\b" "$file" 2>/dev/null; then
    if "$DRY_RUN"; then
      echo "Would add module '$mod' to $file"
    else
      echo "$mod" >>"$file"
      echo "üß© Added $mod to $file"
    fi
  fi
}

select_pci_ids() {
  echo "üîç Scanning PCI devices..."
  echo "üí° Use TAB to select multiple devices, ENTER to confirm"
  local selection
  if ! selection="$(lspci -nn | fzf --multi --prompt='Select devices to bind via VFIO > ' --header='Use TAB to mark multiple devices, ENTER to confirm')" || [[ -z "$selection" ]]; then
    echo "‚ùå No selection made."
    exit 1
  fi

  # Extract PCI IDs with better error handling
  local pci_ids
  if ! pci_ids="$(echo "$selection" | grep -Eo '\[[0-9a-f]{4}:[0-9a-f]{4}\]' | tr -d '[]' | sort -u)"; then
    echo "‚ùå Failed to extract PCI IDs from selection."
    exit 1
  fi

  if [[ -z "$pci_ids" ]]; then
    echo "‚ùå No valid PCI IDs found in selection."
    exit 1
  fi

  echo "$pci_ids"
}

#--- Parse arguments ------------------------------------------------------

# Parse all arguments properly
while [[ $# -gt 0 ]]; do
  case "$1" in
  --dry-run)
    DRY_RUN=true
    shift
    ;;
  --help)
    usage
    ;;
  *)
    echo "‚ùå Unknown option: $1"
    echo "Use --help for usage information."
    exit 1
    ;;
  esac
done

#--- Checks ---------------------------------------------------------------

# Check for root privileges
check_root "$@"

# Check for required commands
require_cmd fzf
require_cmd lspci
require_cmd update-grub
require_cmd update-initramfs

# Check IOMMU support
check_iommu

confirm

mapfile -t PCI_IDS < <(select_pci_ids)
if [[ "${#PCI_IDS[@]}" -eq 0 ]]; then
  echo "‚ùå No valid PCI IDs selected."
  exit 1
fi

#--- Core logic -----------------------------------------------------------

echo "üß© Ensuring VFIO modules load on boot..."
for mod in vfio vfio_pci vfio_iommu_type1 vfio_virqfd; do
  ensure_module "$mod" "$MODULES_FILE"
  ensure_module "$mod" "$INITRD_HOOK"
done

echo "üéØ Configuring VFIO device bindings..."
backup_if_exists "$VFIO_CONF"

NEW_IDS="$(
  IFS=,
  echo "${PCI_IDS[*]}"
)"

# Extract current IDs with better error handling
CURRENT_IDS=""
if [[ -f "$VFIO_CONF" ]]; then
  if grep -q '^options vfio-pci ids=' "$VFIO_CONF" 2>/dev/null; then
    CURRENT_IDS="$(grep -E '^options vfio-pci ids=' "$VFIO_CONF" | awk -F= '{print $2}' || true)"
  fi
fi

if [[ "$NEW_IDS" == "$CURRENT_IDS" ]]; then
  echo "‚úÖ VFIO configuration already up to date."
else
  if "$DRY_RUN"; then
    echo "Would write: options vfio-pci ids=$NEW_IDS ‚Üí $VFIO_CONF"
  else
    echo "options vfio-pci ids=$NEW_IDS" >"$VFIO_CONF"
    echo "‚öôÔ∏è  Updated $VFIO_CONF with: $NEW_IDS"
  fi
fi

if "$DRY_RUN"; then
  echo "Would update initramfs and grub"
else
  echo "üîÑ Updating initramfs and grub..."
  update-initramfs -u || echo "‚ö†Ô∏è Warning: initramfs update failed"
  update-grub || echo "‚ö†Ô∏è Warning: grub update failed"
fi

echo "üîç Current VFIO device binding status:"
if lspci -nnk 2>/dev/null | grep -q 'Kernel driver in use'; then
  lspci -nnk | grep -A2 'Kernel driver in use' | grep -E 'vfio-pci|NVIDIA' || echo "   No VFIO or NVIDIA drivers currently in use"
else
  echo "   No kernel driver information available"
fi

echo "‚úÖ VFIO setup complete."
echo "‚ÑπÔ∏è Reboot required. Ensure GRUB has 'intel_iommu=on iommu=pt' or 'amd_iommu=on iommu=pt'."

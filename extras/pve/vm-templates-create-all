#!/usr/bin/env bash

set -euo pipefail

SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
readonly SCRIPT_NAME

# Array of supported distributions
readonly SUPPORTED_DISTRIBUTIONS=("debian" "fedora" "ubuntu" "alpine" "centos" "tumbleweed")

# Logging functions
log_info() {
  echo "ℹ️  [INFO] $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_warn() {
  echo "⚠️  [WARN] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
}

log_error() {
  echo "❌ [ERROR] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
}

log_success() {
  echo "✅ [SUCCESS] $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_debug() {
  if [[ "${DEBUG:-0}" == "1" ]]; then
    echo "🐛 [DEBUG] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
  fi
}

# Get the directory where this script is located
get_script_dir() {
  local script_dir
  script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  echo "$script_dir"
}

# Check if vm-template script exists
check_prerequisites() {
  local script_dir
  script_dir="$(get_script_dir)"
  local vm_template_script="$script_dir/vm-template"

  if [[ ! -f "$vm_template_script" ]]; then
    log_error "vm-template script not found at: $vm_template_script"
    return 1
  fi

  if [[ ! -x "$vm_template_script" ]]; then
    log_error "vm-template script is not executable: $vm_template_script"
    return 1
  fi

  # Check if qm command is available (Proxmox) - skip in dry-run mode
  if [[ "$DRY_RUN" != "true" ]] && ! command -v qm >/dev/null 2>&1; then
    log_error "The 'qm' command is required. This script must be run on a Proxmox host."
    return 1
  fi

  log_debug "Prerequisites check passed"
  return 0
}

# Display usage information
display_usage() {
  cat <<EOF
🚀 Usage: $SCRIPT_NAME [OPTIONS]

📋 Description:
  Creates VM templates for all supported distributions using the vm-template script.
  Supported distributions: debian, fedora, ubuntu, alpine, centos, tumbleweed

📋 Options:
  -s, --storage STORAGE            💾 Proxmox storage target (default: local-lvm)
  -d, --disk-size DISK_SIZE        💿 Size of the VM disks (default: 32G)
  -m, --memory MEMORY               🧠 VM memory in MB (default: 8192)
  -c, --cores CORES                 ⚙️  Number of CPU cores (default: 4)
  -u, --username USERNAME           👤 Username for cloud-init (default: distro-specific)
  -p, --password PASSWORD           🔐 Password for cloud-init (default: empty, use CLOUD_INIT_PASSWORD)
  -k, --ssh-key SSH_KEY             🔑 Path to SSH public key file (default: empty, use SSH_KEY_PATH)
  -f, --failed-only                 🚨 Only create templates for distributions that failed previously
  -l, --list                        📋 List supported distributions and their default VM IDs
  -h, --help                        ❓ Display this help message
  --debug                           🐛 Enable debug logging
  --dry-run                         🔍 Show what would be done without executing

📝 Examples:
  $SCRIPT_NAME                                    # Create all templates with defaults
  $SCRIPT_NAME -s local-zfs -m 4096 -c 2          # Custom storage, memory, and cores
  $SCRIPT_NAME -k ~/.ssh/id_rsa.pub               # Use SSH key authentication
  $SCRIPT_NAME -f                                 # Only retry failed distributions
  $SCRIPT_NAME --dry-run                          # Preview what would be done

EOF
}

# Parse command line arguments
parse_arguments() {
  local script_dir
  script_dir="$(get_script_dir)"
  VM_TEMPLATE_SCRIPT="$script_dir/vm-template"

  # Default values
  PROXMOX_STORAGE="local-lvm"
  DISK_SIZE="32G"
  MEMORY="8192"
  CORES="4"
  USERNAME=""
  PASSWORD=""
  SSH_KEY=""
  FAILED_ONLY=false
  LIST_ONLY=false
  DRY_RUN=false

  while [[ "$#" -gt 0 ]]; do
    case $1 in
    -s | --storage)
      PROXMOX_STORAGE="$2"
      shift 2
      ;;
    -d | --disk-size)
      DISK_SIZE="$2"
      shift 2
      ;;
    -m | --memory)
      MEMORY="$2"
      shift 2
      ;;
    -c | --cores)
      CORES="$2"
      shift 2
      ;;
    -u | --username)
      USERNAME="$2"
      shift 2
      ;;
    -p | --password)
      PASSWORD="$2"
      shift 2
      ;;
    -k | --ssh-key)
      SSH_KEY="$2"
      shift 2
      ;;
    -f | --failed-only)
      FAILED_ONLY=true
      shift
      ;;
    -l | --list)
      LIST_ONLY=true
      shift
      ;;
    -h | --help)
      display_usage
      exit 0
      ;;
    --debug)
      export DEBUG=1
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    *)
      log_error "Unknown parameter: $1"
      display_usage
      exit 1
      ;;
    esac
  done
}

# List supported distributions and their default VM IDs
list_distributions() {
  echo "📋 Supported distributions and their default VM IDs:"
  echo ""

  for distro in "${SUPPORTED_DISTRIBUTIONS[@]}"; do
    local vm_id
    case "$distro" in
    debian) vm_id="201" ;;
    fedora) vm_id="202" ;;
    ubuntu) vm_id="203" ;;
    alpine) vm_id="204" ;;
    centos) vm_id="205" ;;
    tumbleweed) vm_id="206" ;;
    esac
    echo "  🐧 $distro (VM ID: $vm_id)"
  done
  echo ""
}

# Check if a VM template already exists
template_exists() {
  local distro="$1"
  local vm_id

  case "$distro" in
  debian) vm_id="201" ;;
  fedora) vm_id="202" ;;
  ubuntu) vm_id="203" ;;
  alpine) vm_id="204" ;;
  centos) vm_id="205" ;;
  tumbleweed) vm_id="206" ;;
  esac

  # In dry-run mode, assume templates don't exist
  if [[ "${DRY_RUN:-false}" == "true" ]]; then
    return 1
  fi

  if qm list 2>/dev/null | awk -v id="$vm_id" '$1 == id { found=1 } END { exit !found }'; then
    return 0 # Template exists
  else
    return 1 # Template doesn't exist
  fi
}

# Get distributions to process
get_distributions_to_process() {
  local distributions_to_process=()

  if [[ "$FAILED_ONLY" == "true" ]]; then
    # Only include distributions that don't have templates yet
    for distro in "${SUPPORTED_DISTRIBUTIONS[@]}"; do
      if ! template_exists "$distro"; then
        distributions_to_process+=("$distro")
      fi
    done
  else
    # Include all supported distributions
    distributions_to_process=("${SUPPORTED_DISTRIBUTIONS[@]}")
  fi

  echo "${distributions_to_process[@]}"
}

# Create template for a single distribution
create_template() {
  local distro="$1"
  local vm_template_args=("-D" "$distro")

  # Add common arguments
  [[ -n "$PROXMOX_STORAGE" ]] && vm_template_args+=("-s" "$PROXMOX_STORAGE")
  [[ -n "$DISK_SIZE" ]] && vm_template_args+=("-d" "$DISK_SIZE")
  [[ -n "$MEMORY" ]] && vm_template_args+=("-m" "$MEMORY")
  [[ -n "$CORES" ]] && vm_template_args+=("-c" "$CORES")
  [[ -n "$USERNAME" ]] && vm_template_args+=("-u" "$USERNAME")
  [[ -n "$PASSWORD" ]] && vm_template_args+=("-p" "$PASSWORD")
  [[ -n "$SSH_KEY" ]] && vm_template_args+=("-k" "$SSH_KEY")

  log_info "Creating template for $distro..."
  log_debug "Command: $VM_TEMPLATE_SCRIPT ${vm_template_args[*]}"

  if [[ "$DRY_RUN" == "true" ]]; then
    log_info "[DRY RUN] Would execute: $VM_TEMPLATE_SCRIPT ${vm_template_args[*]}"
    return 0
  fi

  # Execute the vm-template script
  if "$VM_TEMPLATE_SCRIPT" "${vm_template_args[@]}"; then
    log_success "$distro template created successfully"
    return 0
  else
    log_error "Failed to create $distro template"
    return 1
  fi
}

# Main function
main() {
  echo "🚀 Starting VM template creation for all distributions"

  parse_arguments "$@"

  if [[ "$LIST_ONLY" == "true" ]]; then
    list_distributions
    exit 0
  fi

  check_prerequisites || exit 1

  local distributions_to_process
  read -ra distributions_to_process <<<"$(get_distributions_to_process)"

  if [[ ${#distributions_to_process[@]} -eq 0 ]]; then
    log_info "No distributions to process. All templates may already exist."
    exit 0
  fi

  log_info "Processing distributions: ${distributions_to_process[*]}"

  local failed_distributions=()
  local successful_distributions=()

  for distro in "${distributions_to_process[@]}"; do
    if template_exists "$distro"; then
      log_warn "$distro template already exists, skipping..."
      continue
    fi

    if create_template "$distro"; then
      successful_distributions+=("$distro")
    else
      failed_distributions+=("$distro")
    fi

    echo "" # Add spacing between distributions
  done

  # Summary
  echo "📊 Summary:"
  if [[ ${#successful_distributions[@]} -gt 0 ]]; then
    log_success "Successfully created templates for: ${successful_distributions[*]}"
  fi

  if [[ ${#failed_distributions[@]} -gt 0 ]]; then
    log_error "Failed to create templates for: ${failed_distributions[*]}"
    echo ""
    log_info "You can retry only the failed distributions with:"
    log_info "  $SCRIPT_NAME -f"
    exit 1
  fi

  log_success "All templates created successfully!"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi

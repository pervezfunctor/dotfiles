#!/usr/bin/env bash

set -euo pipefail

# shellcheck disable=SC1091
source "$(dirname "$0")/utils"

TEMPLATE_STORAGE="local"
ROOTFS_STORAGE="local-lvm"
DISK_SIZE="8G"
MEMORY="2048"
CPUS="2"
NET_BRIDGE="vmbr0"
SCRIPT_TO_RUN=""
IP="dhcp"
UNPRIVILEGED=1

usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -i, --ctid <ID>              Unique container ID (required)"
  echo "  -n, --hostname <NAME>        Container hostname (required)"
  echo "  -k, --ssh-key <PATH|KEY>     SSH public key or path to key file for root user"
  echo "  -p, --password <PASS>        Password for root user (optional if ssh-key is provided)"
  echo "  -t, --template-storage <NAME>  Storage for templates (default: 'local')"
  echo "  -r, --rootfs-storage <NAME>  Storage for rootfs (default: 'local-lvm')"
  echo "  -d, --disk-size <SIZE>       Disk size (default: '8G')"
  echo "  -m, --memory <MB>            Memory in MB (default: '2048')"
  echo "  -c, --cpus <NUM>             Number of CPUs (default: '2')"
  echo "  -b, --net-bridge <NAME>      Network bridge (default: 'vmbr0')"
  echo "  -s, --script <PATH>          Path to a script to run after creation"
  echo "  -u, --unprivileged <0|1>     Unprivileged container (default: 1)"
  echo "  -a, --ip <IP>                IP address (default: dhcp)"
  echo "  -h, --help                   Display this help message"
  exit 1
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -i | --ctid)
      CTID="$2"
      shift
      ;;
    -n | --hostname)
      HOSTNAME="$2"
      shift
      ;;
    -k | --ssh-key)
      if [[ -f "$2" ]]; then
        SSH_KEY=$(<"$2")
      else
        SSH_KEY="$2"
      fi
      shift
      ;;
    -p | --password)
      PASSWORD="$2"
      shift
      ;;
    -t | --template-storage)
      TEMPLATE_STORAGE="$2"
      shift
      ;;
    -r | --rootfs-storage)
      ROOTFS_STORAGE="$2"
      shift
      ;;
    -d | --disk-size)
      DISK_SIZE="$2"
      shift
      ;;
    -m | --memory)
      MEMORY="$2"
      shift
      ;;
    -c | --cpus)
      CPUS="$2"
      shift
      ;;
    -b | --net-bridge)
      NET_BRIDGE="$2"
      shift
      ;;
    -s | --script)
      SCRIPT_TO_RUN="$2"
      shift
      ;;
    -u | --unprivileged)
      UNPRIVILEGED="$2"
      shift
      ;;
    -a | --ip)
      IP="$2"
      shift
      ;;
    -h | --help)
      usage
      ;;
    *)
      echo "Unknown parameter: $1" >&2
      usage
      ;;
    esac
    shift
  done
}

wait_for_container() {
  local CTID="$1"
  local timeout=300
  local start_time
  start_time=$(date +%s)

  echo "Waiting for container $CTID to start..."
  while true; do
    if pct status "$CTID" | grep -q "status: running"; then
      echo "Container $CTID is running."
      sleep 5
      return 0
    fi

    local current_time
    current_time=$(date +%s)
    if ((current_time - start_time > timeout)); then
      echo "Error: Timeout waiting for container $CTID to start." >&2
      return 1
    fi
    sleep 2
  done
}

main() {
  if ! command -v pct >/dev/null; then
    echo "Error: 'pct' command not found. This script must be run on a Proxmox host." >&2
    exit 1
  fi

  parse_args "$@"

  if [[ -z "${CTID:-}" ]]; then
    echo "Error: --ctid is a required argument." >&2
    exit 1
  fi

  if [[ -z "${HOSTNAME:-}" ]]; then
    echo "Error: --hostname is a required argument." >&2
    exit 1
  fi

  if [[ -z "${SSH_KEY:-}" && -z "${PASSWORD:-}" ]]; then
    echo "Error: Either --ssh-key or --password is required." >&2
    exit 1
  fi

  pveam update
  local TEMPLATE
  TEMPLATE=$(read_template)

  if ! pveam list "$TEMPLATE_STORAGE" | grep -q "$TEMPLATE"; then
    echo "Downloading template..."
    pveam download "$TEMPLATE_STORAGE" "$TEMPLATE"
  fi

  echo "Creating LXC container..."

  local auth_args=()
  if [[ -n "$SSH_KEY" ]]; then
    auth_args+=(--ssh-public-keys "$SSH_KEY")
  elif [[ -n "$PASSWORD" ]]; then
    auth_args+=(--password "$PASSWORD")
  fi

  local unpriv_flag=""
  if [[ "$UNPRIVILEGED" == "1" ]]; then
    unpriv_flag="--unprivileged"
  fi

  if ! pct create "$CTID" "/var/lib/vz/template/cache/$TEMPLATE" \
    "${auth_args[@]}" \
    --hostname "$HOSTNAME" \
    --storage "$ROOTFS_STORAGE" \
    --rootfs "${ROOTFS_STORAGE}:${DISK_SIZE}" \
    --memory "$MEMORY" \
    --cores "$CPUS" \
    --net0 name=eth0,bridge="$NET_BRIDGE",ip="$IP" \
    $unpriv_flag \
    --start 1; then
    echo "Failed to create LXC container." >&2
    exit 1
  fi

  if ! wait_for_container "$CTID"; then
    exit 1
  fi

  if [[ -n "$SCRIPT_TO_RUN" ]]; then
    echo "Pushing script to container..."
    local SCRIPT_NAME
    SCRIPT_NAME="setup-$(date +%s).sh"
    if ! pct push "$CTID" "$SCRIPT_TO_RUN" "/root/$SCRIPT_NAME"; then
      echo "Failed to push script to LXC container." >&2
      exit 1
    fi
    trap 'pct exec "$CTID" -- rm "/root/$SCRIPT_NAME"' EXIT

    if ! pct exec "$CTID" -- chmod +x "/root/$SCRIPT_NAME"; then
      echo "Failed to chmod the script inside LXC container." >&2
      exit 1
    fi

    echo "Executing script inside LXC container..."
    if ! pct exec "$CTID" -- bash "/root/$SCRIPT_NAME"; then
      echo "Failed to execute script inside LXC container." >&2
      exit 1
    fi

    echo "Script execution inside LXC container complete."
  fi

  echo "LXC container $CTID ($HOSTNAME) created successfully."
}

main "$@"

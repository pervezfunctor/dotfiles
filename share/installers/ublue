#! /usr/bin/env bash

{

source <(curl -sSL https://dub.sh/z3pTnAK)

brew_setup() {
    if ! has_cmd brew; then
        warn "brew not installed; skipping shell utilities installation."
        return 1
    fi

    brew_shell_slim_install
}

emacs_setup() {
    slog "emacs installation and setup"

    bis emacs
    bi emacs-clang-complete-async
    srm ~/.emacs
    # srm ~/.emacs.d
    # srm $XDG_CONFIG_HOME/emacs
    stowdf emacs-slim # or emacs

    slog "emacs installation done!"
}

cpp_setup() {
    slog "cpp installation"

    bi llvm lld
    bis clang-format cmake

    slog "cpp isntallation done!"
}

apps_setup() {
    if ! has_cmd flatpak; then
        warn "flatpak not installed; skipping apps installation"
        return 1
    fi

    apps_slim_install
}

code_setup() {
    slog "code setup"

    if ! has_cmd code; then
        warn "code not installed; skipping vscode configuration"
        return 1
    fi

    vscode_extensions_install
    vscode_config_install

    slog "code setup done!"
}

config_setup() {
    if ! dir_exists "$DOT_DIR"; then
        warn "$DOT_DIR doesn't exist, skipping configuration"
        return 1
    fi

    if ! has_cmd stow; then
        warn "stow not installed, skipping configuration"
        return 1
    fi

    slog "config setup"

    bash_config_install
    has_cmd zsh && zsh_config_install
    has_cmd nvim && nvim_config_install
    has_cmd tmux && tmux_config_install

    slog "config setup done!"
}

pipx_setup() {
    slog "pipx setup"

    if ! has_cmd pipx; then
        if ! has_cmd pip; then
            python3 -m ensurepip --user --default-pip
            python3 -m pip install --user --force-reinstall --upgrade pip
        fi
        has_cmd pip || return 1
        pip install --upgrade --force-reinstall pipx
        has_cmd pipx || return 1
    fi

    slog "pipx setup done!"
}

ublue_gnome_setup() {
    pipx_setup

    if ! has_cmd pipx; then
        warn "pipx not installed, skipping gnome settings"
        return 1
    fi

    slog "gnome setup"

    pipx install gnome-extensions-cli --system-site-packages
    gnome_extensions_install
    gnome_basic_settings

    slog "gnome setup done!"
}

distrobox_setup() {
    if ! has_cmd distrobox; then
        warn "distrobox not installed, skipping distrobox creation"
        return 1
    fi

    slog "Creating multiple distroboxes for testing"
    source_dotfile fns
    distrobox_ublue_all
    slog "distroboxes setup done!"
}

main() {
    if is_bluefin; then
        slog "Setup Bluefin CLI"
        ujust bluefin-cli
    else
        slog "Setup Aurora CLI"
        ujust aurora-cli
    fi

    slog "Setup cockpit"
    ujust cockpit

    dotfiles_install
    brew_setup
    apps_setup
    code_setup
    mise_install
    config_setup
    is_bluefin && ublue_gnome_setup

    if [[ "$USER" == "pervez" ]]; then
        git_config_install
        cpp_setup
        emacs_setup
    fi

    slog "Update system"
    ujust update
}

is_ublue || err_exit "This script is only for Aurora/Bluefin"

has_cmd git || err_exit "git not installed! Qutting."

bootstrap "uBlue OS"

}

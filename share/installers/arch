#! /usr/bin/env bash

si() {
    for p in "$@"; do
        slog "Installing package $p"
        sudo pacman -S --needed --quiet --noconfirm "$p"
    done
}

update_packages() {
    slog "Updating"

    if ! sudo pacman -Syu --noconfirm --quiet; then
        err_exit "pacman update/upgrade failed, quitting"
    fi
}

arch_packages() {
    update_packages

    si git github-cli lazygit git-delta unzip wget curl trash-cli tar stow \
        gcc make file just emacs-nox tree-sitter zsh starship tmux gum \
        tree bat eza fzf ripgrep zoxide fd htop sd yazi bat plocate tealdeer
}

core_install() {
    update_packages

    si curl wget git base-devel trash-cli tree micro tar unzip stow cmake zstd
    si fuse2 file
}

sys_python_install() {
    si python python-pipx python-pip python-setuptools python-wheel python-virtualenv
    pipx install uv
}

yay_install() {
    frm /tmp/yay
    git clone https://aur.archlinux.org/yay.git /tmp/yay && cd /tmp/yay && makepkg -si && cd - && frm /tmp/yay
}

essential_install() {
    slog "Installing essential packages"

    core_install
    # mise_install
    sys_python_install
    yay -Sy --noconfirm snapd

    si unarchiver zip gawk tmux pkg-config
    si p7zip cmake readline sqlite libffi zlib xz pkgfile gum
    sudo pkgfile --update

    slog "Essential packages installation done!"
}

cli_install() {
    slog "Installing cli tools using pacman"

    si neovim github-cli shellcheck shfmt python-pynvim tree-sitter-cli zsh zsh-completions luarocks duf lazygit starship eza ugrep git-delta navi
    si sd gdu bat hyperfine fd fzf ripgrep zoxide htop nushell bottom
    si plocate tealdeer television dysk yazi pixi procs dust direnv atuin

    gh extension install github/gh-copilot
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb boost boost-libs catch2 libc++ clang llvm
    si doxygen graphviz ccache cppcheck pre-commit
    si valgrind ltrace strace lldb lld

    cmake_install
    conan_install

    slog "C++ installation done!"

    cmd_check gcc gdb make cmake conan clang clang++ clang-tidy clang-format
}

vscode_bin_install() {
    yay -Sy --noconfirm visual-studio-code-bin

    cmd_check code
}

terminal_bin_install() {
    si ghostty
}

ui_install() {
    si chromium virt-manager neovide gnome-keyring xsel xclip wl-clipboard

    terminal_bin_install
    vscode_bin_install
    apps_install
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-packagekit cockpit-pcp cockpit-podman cockpit-storaged
    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

podman_install() {
    si podman podman-compose
}

vm_install() {
    si buildah libvirt virt-install distrobox

    sudo systemctl enable --now libvirtd
}

docker_install() {
    si docker docker-compose
    docker_common_install
}

incus_install() {
    si incus
    incus_config_install
}

ct_install() {
    incus_install
    docker_install
    portainer_install
    podman_install
    cockpit_install

    si buildah distrobox
}

virt_install() {
    ct_install
    vm_install

    code_server_install
}

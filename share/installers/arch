#!/usr/bin/env bash

si() {
    sudo pacman -S --needed --quiet --noconfirm "$@"

    # for p in "$@"; do
    #     slog "Installing package $p"
    #     sudo pacman -S --needed --quiet --noconfirm "$p"
    # done
}

update_packages() {
    slog "Updating Arch"

    if ! sudo pacman -Syu --noconfirm --quiet; then
        err_exit "pacman update/upgrade failed, quitting"
    fi
}

arch_packages() {
    update_packages

    slog "Installing packages"

    si git-core github-cli git-delta unzip wget curl trash-cli tar stow \
        gcc make file starship gum wl-clipboard tree bat eza fzf ripgrep \
        zoxide fd htop sd yazi bat tealdeer lazygit libsecret net-tools \
        iproute2 nmap

    has_cmd tldr && tldr --update

    slog "Installing packages done!"
}

locale_setup() {
    local LOCALE KEYMAP
    LOCALE="en_US.UTF-8"
    KEYMAP="us"

    slog "Configuring locale and keyboard for Arch Linux..."

    sudo sed -i "s/^# *$LOCALE/$LOCALE/" /etc/locale.gen
    sudo locale-gen
    echo "LANG=$LOCALE" | sudo tee /etc/locale.conf

    echo "KEYMAP=$KEYMAP" | sudo tee /etc/vconsole.conf
    sudo loadkeys "$KEYMAP"

}

core_install() {
    update_packages

    slog "Installing core packages"

    si curl wget git trash-cli tree tar unzip stow zstd file

    slog "Core packages installation done!"
}

sys_python_install() {
    slog "Installing python"

    si python python-pipx python-pip python-setuptools python-wheel \
        python-virtualenv
    pipx install uv

    slog "Python installation done!"
}

yay_install() {
    has_cmd yay && return 1
    slog "Installing yay"

    frm /tmp/yay
    git clone https://aur.archlinux.org/yay.git /tmp/yay && cd /tmp/yay && makepkg --syncdeps --noconfirm --install && cd - && frm /tmp/yay

    slog "yay installation done!"
}

snap_install() {
    yay -Sy --noconfirm snapd
    sudo systemctl enable --now snapd
}

essential_install() {
    slog "Installing essential packages"

    pkgx_install
    sys_python_install

    si unarchiver zip tmux pkg-config fuse2 net-tools iproute2 p7zip readline \
        sqlite libffi zlib xz pkgfile nmap gum libxcrypt-compat libsecret gawk \
        base-devel micro

    sudo pkgfile --update

    slog "Essential packages installation done!"
}

cli-slim_install() {
    slog "Installing cli tools using pacman"

    si zsh tmux htop fzf ripgrep fd bat zoxide eza starship gum git-delta

    slog "cli tools installation done!"
}

cli_install() {
    slog "Installing cli tools using pacman"

    si neovim github-cli shellcheck shfmt python-pynvim zsh zsh-completions \
        luarocks duf lazygit starship eza ugrep git-delta navi \
        sd gdu bat hyperfine fd fzf ripgrep zoxide htop nushell bottom \
        plocate tealdeer television dysk yazi pixi procs dust direnv atuin \
        broot just glances curlie xh jq superfile choose lsd yq

    has_cmd tldr && tldr --update

    slog "cli tools installation done!"
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb boost boost-libs catch2 libc++ clang llvm \
        doxygen graphviz ccache cppcheck pre-commit \
        valgrind ltrace strace lldb lld

    cmake_install
    conan_install

    slog "C++ installation done!"

    cmd_check gcc gdb make cmake conan clang clang++ clang-tidy clang-format
}

vscode_bin_install() {
    slog "Installing vscode"

    yay -Sy --noconfirm visual-studio-code-bin

    slog "vscode installation done!"

    cmd_check code
}

terminal_bin_install() {
    slog "Installing terminal"

    si ghostty

    slog "terminal installation done!"
}

ui_install() {
    slog "Installing ui"

    si chromium neovide gnome-keyring wl-clipboard flatpak

    flathub_install

    terminal_bin_install
    vscode_bin_install
    apps_install

    slog "ui installation done!"
}

vm-ui_install() {
    slog "Installing virt ui packages"

    has_cmd gnome-boxes || si gnome-boxes
    has_cmd virt-install && si virt-manager virt-viewer

    slog "virt ui packages installation done!"
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-packagekit cockpit-pcp cockpit-podman cockpit-storaged
    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

vm_install() {
    slog "Installing vm"

    si pipewire-jack libvirt qemu-full virt-install bridge-utils dnsmasq \
        edk2-ovmf virglrenderer qemu-ui-spice-core qemu-ui-spice-app \
        qemu-char-spice qemu-audio-spice qemu-device-usb-redirect \
        qemu-device-display-virtio-vga cloud-utils

    libvirt_confstall

    cockpit_install

    slog "vm installation done!"
}

docker_install() {
    has_cmd docker && return 1

    slog "Installing docker"

    si docker docker-compose
    docker_confstall

    slog "docker installation done!"
}

incus_install() {
    has_cmd incus && return 1

    slog "Installing incus"

    si incus qemu-full bridge-utils
    incus_confstall

    slog "incus installation done!"
}

distrobox_install() {
    has_cmd distrobox && return 1

    slog "Installing distrobox"
    si buildah distrobox podman podman-compose
    slog "distrobox installation done!"
}

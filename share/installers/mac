#!/usr/bin/env bash

amethyst_confstall() {
  slog "amethyst config"
  stowdf amethyst
  slog "amethyst config done!"

}

aerospace_confstall() {
  slog "aerospace config"
  stowgf aerospace
}

macos_confstall() {
  stow -d "$DOT_DIR" -t "$HOME" --dotfiles -R aerospace
  stow -d "$DOT_DIR" -t "$HOME" --dotfiles -R amethyst
}

vscode_binstall() {
  bi visual-studio-code
}

terminal_binstall() {
  bic ghostty wezterm
}

ui_install() {
  bic nikitabobko/tap/aerospace
}

apps-slim_install() {
  bic zoom telegram-desktop
}

apps_install() {
  apps-slim_install

  bi deluge
  bic google-chrome microsoft-remote-desktop bitwarden obsidian
}

core_install() {
  softwareupdate --install-rosetta --agree-to-license
  brew_install
  bi mas coreutils bash curl wget trash tree unzip coreutils stow \
    nmap gawk
}

essential_install() {
  slog "Installing Essential packages"

  bis p7zip unar zip pkgx zstd newt
  ui_install

  slog "Essential packages installation done!"
}

cli-slim_install() {
  bis zsh starship ripgrep gh bat jq fzf zoxide eza \
    reattach-to-user-namespace zsh-syntax-highlighting zsh-autosuggestions
}

cli_install() {
  bis tmux pkg-config urlview htop starship shellcheck shfmt ripgrep neovim \
    luarocks tealdeer lsd fd git-delta just gum
}

jetbrains-mono_install() {
  bic font-jetbrains-mono-nerd-font
}

nerd-fonts_install() {
  jetbrains-mono_install
  bic font-monaspace-nerd-font
  bic font-caskaydia-mono-nerd-font
}

fonts_install() {
  nerd-fonts_install
}

cpp_install() {
  slog "Installing C++"

  bi cmake boost catch2 ccache cppcheck pre-commit

  slog "C++ installation done!"
}

podman_install() {
  slog "Installing Container tools"

  bi podman
  bic podman-desktop
  podman machine init
  podman machine start
  dir_exists /Applications/Docker.app || bic docker

  slog "Container tools installation done!"
}

vm_install() {
  slog "Installing virtualization packages"

  bi orbstack colima jq

  slog "Virtualization packages installation done!"
}

pyenv_mac_install() {
  slog "Installing pyenv"
  bi pyenv pyenv-virtualenv
}

emacs_binstall() {
  dir_exists /Applications/Emacs.app && return 0
  dir_exists /usr/local/opt/emacs-mac && return 0

  slog "Installing emacs"

  bic emacs-mac

  slog "emacs installation done!"
}

docker_install() {
  has_cmd docker && return 0
  dir_exists /Applications/Docker.app && return 0

  slog "Installing docker"

  if [ -f ~/Downloads/Docker.dmg ]; then
    warn "Docker.dmg already exists, skipping download"
  else
    curl -sSL https://desktop.docker.com/mac/main/amd64/Docker.dmg -o ~/Downloads/Docker.dmg
  fi

  if [ -d /Volumes/Docker ]; then
    warn "Docker.dmg already mounted, unmounting"
    sudo hdiutil detach /Volumes/Docker
  fi
  sudo hdiutil attach ~/Downloads/Docker.dmg
  sudo /Volumes/Docker/Docker.app/Contents/MacOS/install
  sudo hdiutil detach /Volumes/Docker

  slog "docker installation done!"
}

nix-darwin_mainstall() {
  min_mainstall
  nix_install

  dir_exists "$DOT_DIR/extras/home-manager" || die "home-manager config folder does not exist, cannot install home-manager."

  local cfg_dir=~/nix-config

  slog "Copying home-manager config to $cfg_dir..."
  if ! cp -r "$DOT_DIR/extras/home-manager" "$cfg_dir"; then
    die "Failed to copy home-manager config"
  fi

  slog "Rebuilding system with flake..."
  if ! sudo nix run nix-darwin/master#darwin-rebuild -- switch --flake "$cfg_dir#mac"; then
    die "nix-darwin-rebuild failed"
  fi

  touch ~/.zshrc
  vscode_groupstall
  docker_install

  cmd_check nix darwin-rebuild

  slog "nix-darwin installation done!"
  slog "Your configuration is at $cfg_dir"
  slog "Update your configuration, and run:"
  slog "darwin-rebuild switch --flake $cfg_dir#mac"
  slog "Commit and push your configuration to keep it safe."
}

nix-darwin-dev_mainstall() {
  nix-darwin_mainstall
  # dev_work_mainstall
}

macos_settings_install() {
  defaults write -g NSWindowShouldDragOnGesture -bool true
  defaults write com.apple.finder AppleShowAllFiles -bool true

  # Disable the sound effects on boot
  sudo nvram SystemAudioVolume=" "

  # Disable automatic capitalization as it’s annoying when typing code
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

  # Disable smart dashes as they’re annoying when typing code
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

  # Disable automatic period substitution as it’s annoying when typing code
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

  # Disable smart quotes as they’re annoying when typing code
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

  # Disable auto-correct
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

  # Trackpad: enable tap to click for this user and for the login screen
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Trackpad: map bottom right corner to right-click
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
  defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
  defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

  # Disable “natural” (Lion-style) scrolling
  defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

  # Enable full keyboard access for all controls
  # (e.g. enable Tab in modal dialogs)
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

  # Use scroll gesture with the Ctrl (^) modifier key to zoom
  defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
  defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
  # Follow the keyboard focus while zoomed in
  defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

  # Disable press-and-hold for keys in favor of key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  # Set a blazingly fast keyboard repeat rate
  defaults write NSGlobalDomain KeyRepeat -int 1
  defaults write NSGlobalDomain InitialKeyRepeat -int 10

  Finder: show hidden files by default
  defaults write com.apple.finder AppleShowAllFiles -bool true

  # Finder: show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Keep folders on top when sorting by name
  defaults write com.apple.finder _FXSortFoldersFirst -bool true

  # When performing a search, search the current folder by default
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Avoid creating .DS_Store files on network or USB volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

  # Use list view in all Finder windows by default
  # Four-letter codes for the other view modes: `icnv`, `clmv`, `glyv`
  defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

  # Privacy: don’t send search queries to Apple
  defaults write com.apple.Safari UniversalSearchEnabled -bool false
  defaults write com.apple.Safari SuppressSearchSuggestions -bool true

  # Disable press-and-hold for keys in favor of key repeat.
  defaults write -g ApplePressAndHoldEnabled -bool false

  # Use AirDrop over every interface. srsly this should be a default.
  defaults write com.apple.NetworkBrowser BrowseAllInterfaces 1

  # Show the ~/Library folder.
  chflags nohidden ~/Library

  # Set the Finder prefs for showing a few different volumes on the Desktop.
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

  # Hide Safari's bookmark bar.
  defaults write com.apple.Safari.plist ShowFavoritesBar -bool false

  # Always show Safari's "URL display" tab in the lower left on mouseover. Strangely
  # like, everyone and their LLMs on the internet thinks this is ShowStatusBar, but
  # it's not.
  defaults write com.apple.Safari ShowOverlayStatusBar -bool true

  # Set up Safari for development.
  defaults write com.apple.Safari.SandboxBroker ShowDevelopMenu -bool true
  defaults write com.apple.Safari.plist IncludeDevelopMenu -bool true
  defaults write com.apple.Safari.plist WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari.plist "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true
}

#!/usr/bin/env bash

webi_install() {
    has_cmd ~/.local/bin/webi && return 0

    curl -sS https://webi.sh/webi | sh
    webi pathman
    source_if_exists "$XDG_CONFIG_HOME/envman/PATH.env"

    cmd_check webi
}

mise_install() {
    if has_cmd ~/.local/bin/mise; then
        eval "$(~/.local/bin/mise activate bash)"
        return 0
    fi

    slog "Installing mise"
    curl https://mise.run | MISE_QUIET=1 sh
    eval "$(~/.local/bin/mise activate bash)"

    if has_cmd mise; then
        mise use -g usage
        mise settings experimental=true
        mise use -g cargo-binstall
    else
        warn "mise installation failed"
    fi
}

pixi_install() {
    has_cmd ~/.pixi/bin/pixi && return 0

    slog "Installing pixi"
    if has_cmd curl; then
        curl -fsSL https://pixi.sh/install.sh | bash
    elif has_cmd wget; then
        wget -qO- https://pixi.sh/install.sh | bash
    else
        warn "curl or wget not installed, skipping pixi installation"
        return 1
    fi

    slog "pixi installation done!"

    cmd_check ~/.pixi/bin/pixi
    cmd_check pixi
}

uv_install() {
    has_cmd uv && return 0

    if has_cmd pipx; then
        pipx install uv
    else
        curl -LsSf https://astral.sh/uv/install.sh | sh
    fi

    cmd_check uv
}

python_install() {
    slog "Installing python tools"

    if ! has_cmd python3; then
        warn "python3 not installed! Skipping python setup."
        return 1
    fi

    if ! has_cmd pipx; then
        if ! has_cmd pip; then
            python3 -m ensurepip --user --default-pip
            python3 -m pip install --user --force-reinstall --upgrade pip
        fi

        if has_cmd pip; then
            pip install --upgrade --force-reinstall pipx
            cmd_check pipx
        else
            warn "pip not installed! Skipping python setup."
        fi
    fi

    uv_install

    slog "Python tools installation done!"
}

flathub_install() {
    if ! has_cmd flatpak; then
        has_cmd si && si flatpak
    fi

    if has_cmd flatpak; then
        slog "Adding flathub remote"
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
    else
        warn "flatpak not installed! Ignoring flathub config."
    fi
}

kitty_bin_install() {
    if ! is_desktop; then
        warn "Not running desktop, skipping kitty installation"
        return 1
    fi

    has_cmd kitty && return 1
    has_cmd ~.local/kitty.app/bin/kitty && return 1

    curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin

    # force link
    ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/

    smd ~/.local/share/applications
    cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
    cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/

    # Update the paths to the kitty and its icon in the kitty desktop file(s)
    sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
    sed -i "s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop

    echo 'kitty.desktop' >~/.config/xdg-terminals.list

    cmd_check kitty

    # @TODO: simpler
    # curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin \
    # dest=~/.local/stow
    # cd ~/.local/stow
    # stow kitty.app
}

kitty_install() {
    kitty_bin_install
    kitty_confstall
}

ghostty_bin_install() {
    has_cmd ghostty && return 1

    local VERSION
    VERSION=$(curl -s https://api.github.com/repos/pkgforge-dev/ghostty-appimage/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

    local ARCH
    ARCH=$(uname -m)

    wget "https://github.com/pkgforge-dev/ghostty-appimage/releases/download/${VERSION}/Ghostty-${VERSION}-${ARCH}.AppImage"
    chmod +x "Ghostty-${VERSION}-${ARCH}.AppImage"
    install "./Ghostty-${VERSION}-${ARCH}.AppImage" "$HOME/.local/bin/ghostty"
}

ghostty_install() {
    ghostty_bin_install
    ghostty_confstall
}

rpm-ostree_install() {
    has_cmd rpm-ostree || err_exit "This script is only for rpm-ostree based systems"

    slog "Installing packages"

    local apply_live=false

    if [[ "$1" == "--apply-live" ]]; then
        apply_live=true
        shift
    fi

    local PKGS=()

    has_cmd stow || PKGS+=("stow")
    has_cmd zsh || PKGS+=("zsh")
    has_cmd git || PKGS+=("git")
    has_cmd tmux || PKGS+=("tmux")
    has_cmd gcc || PKGS+=("gcc")
    has_cmd make || PKGS+=("make")
    has_cmd openssl || PKGS+=("openssl")
    has_cmd wl-copy || PKGS+=("wl-clipboard")
    has_cmd virsh || PKGS+=("libvirt")
    has_cmd virt-install || PKGS+=("virt-install")

    if is_desktop; then
        has_cmd virt-manager || PKGS+=("virt-manager")

        has_cmd code || PKGS+=(
            "https://packages.microsoft.com/config/fedora/42/packages-microsoft-prod.rpm"
            "code"
        )
    fi

    if [[ ${#PKGS[@]} -eq 0 ]]; then
        slog "No packages to install"
        sleep 3
        return 0
    fi

    slog "Installing packages ${PKGS[@]}"

    if has_cmd stow || has_cmd zsh || has_cmd gcc || has_cmd make ||
        has_cmd tmux || has_cmd virsh ||
        has_cmd virt-install || has_cmd code; then
        warn "This script is supposed to be run only once"
    fi

    if [[ "$apply_live" == true ]]; then
        sudo rpm-ostree install --apply-live -y "${PKGS[@]}"
    else
        sudo rpm-ostree install -y "${PKGS[@]}"
    fi

    warn "Installing packages done! Note that you need to reboot for the changes to take effect."
}

atomic_distrobox_install() {
    has_cmd distrobox && return 0

    slog "Installing distrobox"

    curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/install | sh -s -- --prefix ~/.local

    slog "distrobox installation done!"
}

cmake_install() {
    has_cmd ~/.local/bin/cmake && return 1

    CMAKE_VERSION="4.1.0"
    ARCH=$(uname -m)
    CMAKE_BINARY_NAME="cmake-${CMAKE_VERSION}-linux-${ARCH}.sh"
    CMAKE_CHECKSUM_NAME="cmake-${CMAKE_VERSION}-SHA-256.txt"

    slog "Installing latest cmake"
    TMP_DIR=$(mktemp -d -t cmake-XXXXXXXXXX)
    if cd "${TMP_DIR}"; then
        curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_BINARY_NAME}" -O
        curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_CHECKSUM_NAME}" -O

        sha256sum -c --ignore-missing "${CMAKE_CHECKSUM_NAME}"
        local PREFIX
        PREFIX=~/.cmake

        sudo mkdir -p "${PREFIX}"
        sudo sh "${TMP_DIR}/${CMAKE_BINARY_NAME}" --prefix="${PREFIX}" --skip-license

        sudo ln -s "${PREFIX}/bin/cmake" ~/.local/bin/cmake
        sudo ln -s "${PREFIX}/bin/ctest" ~/.local/bin/ctest
        frm "${TMP_DIR}"
    fi

    slog "cmake installation done!"

    cmd_check cmake
}

generic-ct_groupstall() {
    has_cmd curl || has_cmd wget || err_exit "Install curl and run this script again."

    pixi_install
    pis git curl wget

    pkgx_install

    slog "Installing shell tools with pixi"
    pixi-slim-shell_install

    slog "Installing shell tools with pixi done!"

    dotfiles_install

    starship_install
    bash_confstall
}

generic_groupstall() {
    generic-ct_groupstall

    has_cmd zsh && zsh_boxstall
    has_cmd tmux && tmux_boxstall

    if has_cmd podman || has_cmd docker; then
        atomic_distrobox_install
    else
        fail "No container runtime(docker or podman) installed, skipping distrobox installation"
    fi

    if is_desktop; then
        jetbrains_nerd_font_install
        flathub_install
        ptyxis_install
    fi
}

rpm-ostree-post_install() {
    zsh_confstall
    tmux_confstall
    vscode_confstall
    libvirt_confstall
}

rpm-ostree_groupstall() {
    rpm-ostree_install --apply-live
    generic_groupstall
    rpm-ostree-post_install
    apps-slim_install
}

gnome-extensions_install() {
    if ! has_cmd gext; then
        if ! has_cmd pipx; then
            warn "pipx not installed, skipping gnome extensions"
            return 1
        fi

        pipx install gnome-extensions-cli --system-site-packages
        cmd_check gext
    fi

    slog "Installing gnome extensions"

    gext install windowsNavigator@gnome-shell-extensions.gcampax.github.com
    gext install Vitals@CoreCoding.com
    gext install tailscale@joaophi.github.com
    gext install tilingshell@ferrarodomenico.com
    gext install CoverflowAltTab@palatis.blogspot.com
    gext install just-perfection-desktop@just-perfection
    gext install blur-my-shell@aunetx
    gext install undecorate@sun.wxg@gmail.com
    gext install AlphabeticalAppGrid@stuarthayhurst

    slog "gnome extensions installation done!"
}

gnome-settings_install() {
    if ! has_cmd gsettings; then
        warn "gsettings not found, skipping gnome basic settings"
        return 1
    fi

    slog "gnome settings"

    gsettings set org.gnome.mutter experimental-features "['scale-monitor-framebuffer']"
    gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier']"
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
    gsettings set org.gnome.desktop.interface icon-theme 'Adwaita-dark'
    gsettings set org.gnome.desktop.interface cursor-theme 'Adwaita'
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
    gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
    gsettings set org.gnome.desktop.interface accent-color 'purple'

    # Use 4 fixed workspaces instead of dynamic mode
    gsettings set org.gnome.mutter dynamic-workspaces false
    gsettings set org.gnome.desktop.wm.preferences num-workspaces 4

    # Center new windows in the middle of the screen
    gsettings set org.gnome.mutter center-new-windows true

    # Set JetBrains Mono as the default monospace font
    gsettings set org.gnome.desktop.interface monospace-font-name 'JetbrainsMono Nerd Font 11'

    slog "gnome settings done!"
}

gnome-flatpaks_install() {
    fpi page.tesk.Refine
    fpi com.github.tchx84.Flatseal
    fpi io.github.flattool.Ignition
    fpi io.github.flattool.Warehouse
    fpi io.missioncenter.MissionCenter
    fpi org.gnome.World.PikaBackup
    fpi org.gnome.Papers
}

# https://github.com/basecamp/omakub/blob/master/install/desktop/set-gnome-extensions.sh
gnome_confstall() {
    if ! is_gnome; then
        warn "Not running GNOME, skipping GNOME config"
        return 1
    fi

    slog "gnome config"

    if is_ubuntu; then
        has_cmd si && si gnome-shell-extension-manager gnome-tweak-tool gnome-sushi gnome-software-plugin-flatpak
    elif is_fedora && ! is_atomic; then
        has_cmd si && si gnome-extensions-app gnome-tweaks
    fi

    if is_ubuntu; then
        gnome-extensions disable tiling-assistant@ubuntu.com
        gnome-extensions disable ubuntu-appindicators@ubuntu.com
        gnome-extensions disable ubuntu-dock@ubuntu.com
        gnome-extensions disable ding@rastersoft.com
    fi

    gnome-settings_install
    #   gnome_keybindings_install
    gnome-flatpaks_install
    gnome-extensions_install

    slog "gnome config done!"
}

fedora-atomic-tbox_groupstall() {
    is_std_atomic || err_exit "This script is only for Atomic Host"

    slog "Fedora Atomic Host setup"

    jetbrains_nerd_font_install

    slog "Installing apps"
    apps-slim_install

    slog "Setting up default distrobox for development"

    # shellcheck disable=SC2119
    tbox_default

    slog "Fedora Atomic Host With default toolbox setup done!"
}

ublue_groupstall() {
    is_bluefin || is_aurora || err_exit "This script is only for Bluefin/Aurora"

    slog "ublue setup..."

    dotfiles_install
    jetbrains-mono_install

    brew-shell-slim_install
    apps-slim_install

    vscode-extensions_install
    vscode_confstall
    git_confstall
    bash_confstall
    tmux_confstall
    nvim_confstall

    slog "ublue setup done!"
}

fedora-atomic_groupstall() {
    is_std_atomic || err_exit "This script is only for Atomic Host"

    slog "Fedora Atomic Host setup"

    generic-ct_groupstall
    jetbrains_nerd_font_install
    atomic_distrobox_install

    slog "Installing apps"
    apps-slim_install
    fpi org.gnu.emacs

    is_gnome && gnome_confstall
    is_sway && sway_confstall

    slog "Setting up default distrobox for development"

    # shellcheck disable=SC2119
    dbox_with_home

    stowdf emacs-nano

    slog "Fedora Atomic Host setup done!"
}

fedora-layered_groupstall() {
    is_std_atomic || err_exit "This script is only for Atomic Host"

    slog "Fedora Atomic Host setup"

    pixi_install
    pkgx_install

    pis wget
    pixi-slim-shell_install

    dotfiles_install
    bash_confstall
    zsh_boxstall

    jetbrains-mono_install
    atomic_distrobox_install
    vscode_confstall
    # docker_confstall

    apps-slim_install

    is_gnome && gnome_confstall
    is_sway && sway_confstall

    slog "Fedora layered setup done! Reboot your system."
}

vscode_flatpak_install() {
    fpi com.visualstudio.code
    flatpak install com.visualstudio.code.tool.podman
    alias code="flatpak run com.visualstudio.code"
    xargs -L 1 flatpak run com.visualstudio.code --install-extension <"$DOT_DIR/extras/vscode/extensions/default"
    vscode-flatpak_confstall
}

ptyxis_install() {
    has_cmd ptyxis && return 0

    if ! has_cmd flatpak; then
        warn "flatpak not installed, skipping ptyxis installation."
        return 1
    fi

    if ! flatpak list | grep -q -i Ptyxis >/dev/null; then
        slog "Installing Ptyxis"
        fpi app.devsuite.Ptyxis
    fi

    # has_cmd gsettings || return 1

    # slog "Configuring Ptyxis"

    # gsettings set org.gnome.Ptyxis use-system-font false
    # gsettings set org.gnome.Ptyxis font-name 'JetBrains Mono Medium 12'
    # gsettings set org.gnome.Ptyxis interface-style 'dark'

    # local profid
    # profid=$(gsettings get org.gnome.Ptyxis default-profile-uuid)
    # gsettings set "org.gnome.Ptyxis.Profile:/${profid}/" palette 'Catppuccin Mocha'

    slog "Ptyxis installation and configuration done!"
}

apps-slim_install() {
    if ! has_cmd flatpak; then
        if ! si flatpak; then
            warn "flatpak not installed, skipping flatpak apps"
            return 1
        fi
    fi

    flathub_install

    ptyxis_install

    has_cmd distrobox && fpi io.github.dvlv.boxbuddyrs
    fpi it.mijorus.gearlever
    is_atomic && fpi org.gnome.Boxes
    fpi us.zoom.Zoom # unverified
}

apps_install() {
    slog "Installing flatpak apps"

    apps-slim_install

    fpi md.obsidian.Obsidian
    has_cmd podman && fpi io.podman_desktop.PodmanDesktop
    fpi org.telegram.desktop
    fpi io.github.getnf.embellish
    fpi com.bitwarden.desktop
    fpi sh.cider.Cider
    fpi org.qbittorrent.qBittorrent
    fpi org.wireshark.Wireshark

    slog "Flatpak apps installation done!"
}

incus_confstall() {
    slog "incus config"

    if ! has_cmd incus; then
        warn "incus not installed, skipping incus config"
        return 0
    fi

    sudo usermod -aG incus "$USER"
    sudo usermod -aG incus-admin "$USER"

    sudo systemctl enable --now incus.socket
    sudo systemctl enable --now incus.service
    sudo systemctl enable --now libvirtd

    sudo incus admin init --minimal
    sudo incus network set incusbr0 ipv4.dhcp true
    # sudo incus network set incusbr0 ipv4.dns.mode managed
    sudo incus config set core.https_address=127.0.0.1:8443

    if has_cmd firewalld; then
        sudo firewall-cmd --zone=trusted --change-interface=incusbr0 --permanent
        sudo firewall-cmd --reload
    elif has_cmd ufw; then
        sudo ufw allow in on incusbr0
        sudo ufw route allow in on incusbr0
        sudo ufw route allow out on incusbr0
    fi

    slog "incus config done! Re-login or reboot for group changes to apply."
}

libvirt_confstall() {
    sudo systemctl enable --now libvirtd
    sudo systemctl enable --now libvirtd.socket
    sudo systemctl enable --now virtlogd

    add_user_to_groups "$(whoami)" libvirt libvirtd kvm libvirt-qemu

    local libvirt_group
    if group_exists libvirtd; then
        libvirt_group=libvirtd
    else
        libvirt_group=libvirt
    fi

    sg "$libvirt_group" -c '
    if ! virsh --connect qemu:///system net-list --all | grep -q default; then
        # virsh net-define /usr/share/libvirt/networks/default.xml
        virsh --connect qemu:///system net-start default
        virsh --connect qemu:///system net-autostart default
    fi

    if ! virsh --connect qemu:///system net-list --all | grep -q default; then
        echo "Failed to create default network" >&2
    fi
    '
}

atomic_nvim_install() {
    is_mac && return 0

    has_cmd nvim && return 0

    slog "Installing neovim..."

    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage

    ./nvim.appimage --appimage-extract

    sudo mv squashfs-root /
    sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
    frm nvim.appimage

    cmd_check nvim
}

micro_install() {
    has_cmd micro && return 0

    slog "Installing micro"

    curl https://getmic.ro | bash
    mv micro "$HOME/.local/bin/"

    slog "micro installation done!"

    cmd_check micro
}

rust_install() {
    source_if_exists "$HOME/.cargo/env"

    has_cmd rustup && return 0

    slog "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source_if_exists "$HOME/.cargo/env"

    slog "rust installation done!"

    cmd_check rustc
}

docker_confstall() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping docker post install configuration"
        return 1
    fi

    if has_cmd brew; then
        bi jesseduffield/lazydocker/lazydocker
        bi lazydocker
    fi

    if ! grep -q docker /etc/group 2>/dev/null; then
        sudo groupadd docker
    fi

    if ! groups "$USER" | grep -q docker 2>/dev/null; then
        sudo usermod -aG docker "$USER"
    fi

    sudo systemctl enable docker
    sudo systemctl start docker
    sudo systemctl enable containerd
    sudo systemctl start containerd
}

conan_install() {
    has_cmd conan && return 1

    slog "Installing conan"
    if has_cmd pipx; then
        pipx install conan
    else
        uv tool install conan
    fi

    slog "conan installation done!"

    cmd_check conan
}

monaspace_install() {
    file_exists ~/.local/share/fonts/MonaspaceRadon-Regular.otf && return 0

    smd ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
    wget -nv https://github.com/githubnext/monaspace/releases/download/v1.000/monaspace-v1.000.zip -O /tmp/monaspace.zip
    unzip -qq -d /tmp/monaspace -o /tmp/monaspace.zip

    cp /tmp/monaspace/monaspace-*/fonts/otf/* ~/.local/share/fonts
    cp /tmp/monaspace/monaspace-*/fonts/variable/* ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
}

cascadia_nerd_font_install() {
    file_exists ~/.local/share/fonts/CaskaydiaMonoNerdFont-Regular.ttf && return 0

    smd ~/.local/share/fonts
    frm /tmp/cascadia /tmp/CascadiaMono.zip
    wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/CascadiaMono.zip -O /tmp/CascadiaMono.zip
    unzip -qq -d /tmp/cascadia -o /tmp/CascadiaMono.zip
    cp /tmp/cascadia/*.ttf ~/.local/share/fonts
    frm /tmp/cascadia /tmp/CascadiaMono.zip
}

monaspace_nerd_font_install() {
    file_exists ~/.local/share/fonts/MonaspiceRnNerdFont-Regular.otf && return 0

    smd ~/.local/share/fonts
    frm /tmp/monaspace /tmp/Monaspace.zip
    wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/Monaspace.zip -O /tmp/Monaspace.zip
    unzip -qq -d /tmp/monaspace -o /tmp/Monaspace.zip
    cp /tmp/monaspace/*.otf ~/.local/share/fonts
    frm /tmp/monaspace /tmp/Monaspace.zip
}

jetbrains_nerd_font_install() {
    file_exists ~/.local/share/fonts/JetBrainsMonoNLNerdFontPropo-Regular.ttf && return 0

    slog "Installing JetBrains Mono Nerd Font"
    smd ~/.local/share/fonts
    frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
    wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/JetBrainsMono.zip -O /tmp/jetbrains-mono.zip
    unzip -qq -d /tmp/jetbrains-mono -o /tmp/jetbrains-mono.zip
    cp /tmp/jetbrains-mono/*.ttf ~/.local/share/fonts
    frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
    slog "JetBrains Mono Nerd Font installation done!"
}

maple_font_install() {
    file_exists ~/.local/share/fonts/MapleMono-NF-Regular.ttf && return 0

    slog "Installing Maple Mono Font"
    smd ~/.local/share/fonts
    frm /tmp/maple-mono/tmp/maple-mono.zip
    wget -nv https://github.com/subframe7536/maple-font/releases/download/v7.2/MapleMono-NF.zip -O /tmp/maple-mono.zip
    unzip -qq -d /tmp/maple-mono -o /tmp/maple-mono.zip
    cp /tmp/maple-mono/*.ttf ~/.local/share/fonts
    frm /tmp/maple-mono/tmp/maple-mono.zip
    slog "Maple Mono Font installation done!"
}

nerd_font_install() {
    smd ~/.local/share/fonts

    cascadia_nerd_font_install
    jetbrains_nerd_font_install
    monaspace_nerd_font_install
}

fonts_install() {
    if ! has_cmd wget || ! has_cmd unzip; then
        warn "wget and unzip not installed, skipping fonts"
        return 1
    fi

    slog "Installing fonts"

    monaspace_install
    nerd_font_install
    maple_font_install

    # if is_apt; then
    #     si fonts-cascadia-code fonts-jetbrains-mono
    # elif is_rh; then
    #     is_fedora || si cascadia-fonts-all jetbrains-mono-fonts-all
    # fi

    slog "Fonts installation done!"
}

jetbrains-mono_install() {
    slog "Installing JetBrains Mono Nerd Font..."
    jetbrains_nerd_font_install
    slog "JetBrains Mono Nerd Font installation done!"
}

starship_install() {
    has_cmd starship && return 0

    smd ~/.local/bin
    curl -sS https://starship.rs/install.sh | sh -s -- -y -b ~/.local/bin
}

vscode-flatpak_confstall() {
    slog "vscode config"

    smd ~/.var/app/com.visualstudio.code/config/Code/User
    safe-cp "$DOT_DIR/extras/vscode/flatpak-settings.json" ~/.var/app/com.visualstudio.code/config/Code/User/settings.json

    slog "vscode config done!"
}

sway-waybar_confstall() {
    slog "waybar config"
    has_cmd waybar || return 1
    stowgf waybar
    slog "waybar config done!"
}

wlogout_confstall() {
    slog "wlogout config"
    has_cmd wlogout || return 1
    stowgf wlogout
    slog "wlogout config done!"
}

sway_confstall() {
    has_cmd sway || return 1
    slog "sway config"
    stowgf sway
    slog "sway config done!"
}

rofi_confstall() {
    has_cmd rofi || return 1

    slog "rofi config"
    stowgf rofi
    slog "rofi config done!"
}

dbox-docker-dev_groupstall() {
    is_ubuntu || err_exit "This script is only for Ubuntu"
    has_cmd docker || err_exit "This script requires docker"

    docker_confstall

    min_groupstall
    si firefox gnome-keyring wl-clipboard libsecret

    starship_install
    vscode_install

    has_cmd zsh && zsh_confstall
}

github_user_setup() {
    if ! has_cmd gh; then
        warn "gh not installed, skipping github user setup"
        return 1
    fi

    if has_cmd gh; then
        slog "Authenticating github(gh)"
        gh auth login
    fi
}

box-default_groupstall() {
    shell_groupstall
    vscode_install
    jetbrains-mono_install

    si firefox gnome-keyring wl-clipboard kitty libsecret
    gnome-keyring-daemon -s -d --components=pkcs11,secrets,ssh
    systemctl --user enable --now dbus
}

default_dbox_exports() {
    distrobox-export --bin "$(which stow)"
    distrobox-export --bin "$(which wl-copy)"
    distrobox-export --bin "$(which wl-paste)"
    distrobox-export --bin "$(which code)"
    distrobox-export --app "Visual Studio Code"
    distrobox-export --app "kitty"
}

box-default-atomic_groupstall() {
    box-default_groupstall
    default_dbox_exports
}

# shellcheck disable=SC2120
tbox_group() {
    has_cmd toolbox || return 0

    toolbox --assumeyes create

    local group=${1:-shell}
    toolbox run bash -c "$(curl -sSL https://is.gd/egitif)" -- "$group"
}

tbox_default() {
    tbox_group box-default-atomic
}

dbox_default() {
    has_cmd distrobox || return

    slog "Creating default distrobox"
    distrobox create --yes
    # distrobox enter -- env -u PATH bash -ic "$(curl -sSL https://is.gd/egitif)" -- box-default-atomic
    distrobox enter -nw --clean-path -- bash -c "$(curl -sSL https://is.gd/egitif)" -- box-default-atomic
    slog "Default distrobox created!"
}

# shellcheck disable=SC2120
dbox_with_home() {
    if ! has_cmd distrobox; then
        fail "distrobox not installed, skipping distrobox creation"
        return 1
    fi

    slog "Creating default distrobox"

    local os
    os=${1:-fedora-init}
    local osname
    osname=${2:-ilm}
    distrobox list | grep -q "^${osname}$" && return

    "dbox-$os" "$osname"
    distrobox enter -nw --clean-path --name "${osname}" -- bash -c "$(curl -sSL https://is.gd/egitif)" -- box-default-atomic
    slog "distrobox ${osname} created!"
}

sway-full_confstall() {
    sway-waybar_confstall
    foot_confstall
    kitty_confstall
    sway_confstall
    rofi_confstall
    wlogout_confstall
}

hypr-waybar_confstall() {
    has_cmd waybar || return 1

    slog "waybar config"
    stowgf hypr-waybar
    slog "waybar config done!"
}

hyprland_confstall() {
    slog "hypr config install"

    hypr-waybar_confstall
    wlogout_confstall
    rofi_confstall
    kitty_confstall

    slog "hypr config done!"
}

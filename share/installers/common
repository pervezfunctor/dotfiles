#! /usr/bin/env bash

brew_install() {
    has_cmd brew && return 0

    slog "Installing homebrew"
    NONINTERACTIVE=1 /bin/bash -c "$(curl -sSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    eval_brew

    if ! has_cmd brew; then
        warn "homebrew not installed, trying again, might require sudo password"
        /bin/bash -c "$(curl -sSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        eval_brew
        if has_cmd brew; then
            slog "homebrew installation done!"
        else
            warn "homebrew installation failed"
        fi
    fi

    is_linux && dir_check /home/linuxbrew/.linuxbrew
    is_mac && dir_check /opt/homebrew

    cmd_check brew
}

webi_install() {
    has_cmd ~/.local/bin/webi && return 0

    curl -sS https://webi.sh/webi | sh
    source_if_exists "$XDG_CONFIG_HOME/envman/PATH.env"
    webi pathman

    cmd_check webi
}

mise_install() {
    if has_cmd ~/.local/bin/mise; then
        eval "$(~/.local/bin/mise activate bash)"
        return 0
    fi

    slog "Installing mise"
    curl https://mise.run | MISE_QUIET=1 sh
    eval "$(~/.local/bin/mise activate bash)"

    if has_cmd mise; then
        mise use -g usage
        mise settings experimental=true
        mise use -g cargo-binstall
    else
        warn "mise installation failed"
    fi
}

pixi_install() {
    has_cmd ~/.pixi/bin/pixi && return 0

    slog "Installing pixi"
    curl -fsSL https://pixi.sh/install.sh | bash

    slog "pixi installation done!"

    cmd_check ~/.pixi/bin/pixi
}

devbox_install() {
    has_cmd devbox && return 0

    slog "Installing devbox"
    curl -fsSL https://get.jetify.com/devbox | bash

    slog "devbox installation done!"

    cmd_check devbox
}

pkgs_install() {
    has_cmd pkgx && return 0

    if has_cmd brew; then
        brew install pkgx
    else
        curl https://pkgx.sh | sh
    fi

    cmd_check pkgx
}

uv_install() {
    has_cmd uv && return 0

    if has_cmd pipx; then
        pipx install uv
    else
        curl -LsSf https://astral.sh/uv/install.sh | sh
    fi

    cmd_check uv
}

python_install() {
    slog "Installing python tools"

    if ! has_cmd pipx; then
        if ! has_cmd pip; then
            python3 -m ensurepip --user --default-pip
            python3 -m pip install --user --force-reinstall --upgrade pip
        fi
        has_cmd pip || return 1

        pip install --upgrade --force-reinstall pipx
        cmd_check pipx
        has_cmd pipx || return 1
    fi

    uv_install

    slog "Python tools installation done!"
}

nix_install() {
    has_cmd nix && return 0
    slog "Installing nix"

    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm
    source_if_exists /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

    # if has_cmd nix-channel; then
    #     nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
    #     nix-channel --update
    # fi

    slog "nix installation done!"

    cmd_check nix nix-shell nix-env
}

nix-no-init_install() {
    has_cmd nix && return 0

    slog "Installing nix"
    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux --init none
    slog "nix installation done!"

    cmd_check nix nix-shell nix-env
}

flathub_install() {
    has_cmd flatpak || si flatpak

    if has_cmd flatpak; then
        slog "Adding flathub remote"
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
    else
        warn "flatpak not installed! Ignoring flathub config."
    fi
}

pnpm_install() {
    has_cmd pnpm && return 0

    slog "Installing pnpm"
    curl -sSL https://get.pnpm.io/install.sh | sh -

    slog "Installing node"
    pnpm env use --global latest

    has_cmd bash && pnpm install-completion bash
    has_cmd zsh && pnpm install-completion zsh

    slog "pnpm/node installation done!"

    cmd_check pnpm
}

kitty_install() {
    is_linux || return 1

    has_cmd kitty && return 1
    has_cmd ~.local/kitty.app/bin/kitty && return 1

    curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin

    # force link
    ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/

    smd ~/.local/share/applications
    cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
    cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/

    echo 'kitty.desktop' >~/.config/xdg-terminals.list

    cmd_check kitty
}

mise_shell_install() {
    slog "shell tools with mise"

    mis tree-sitter just lazygit lazydocker starship ripgrep gdu choose yazi
    mis shellcheck gum xh bottom fzf hyperfine cheat duf eza dust zoxide

    mi superfile

    has_cmd nu || mise use -g cargo:nu

    slog "shell tools with mise done!"
}

brew_shell_slim_install() {
    bis tree-sitter gh gum stow tmux carapace
    bis lazygit eza fzf fd zoxide starship yazi

    if ! has_cmd luarocks; then
        bi luarocks
        brew link luarocks # unfortunately, this is needed currently.
    fi
    bi bash-preexec
    has_cmd trash || bi trash-cli
    has_cmd delta || bi git-delta
    has_cmd nvim || bi neovim
    has_cmd rg || bi ripgrep
    has_cmd batcat || has_cmd bat || bi bat
    has_cmd ug || bi ugrep
    has_cmd emacs || bis micro
}

brew_shell_install() {
    # bi ffmpeg sevenzip poppler imagemagick
    # bis gping ncdu httpie font-symbols-only-nerd-font
    # bi glab
    # bi -q glances

    slog "shell tools with brew"

    brew_shell_slim_install

    bis jq just shfmt shellcheck lazydocker broot
    bis cheat curlie duf sd xh doggo atuin direnv dust
    bis procs hyperfine pixi yq yazi htop dysk
    has_cmd tv || bi television

    has_cmd spf || bi superfile
    has_cmd gdu || has_cmd gdu-go || bi gdu
    has_cmd tldr || bi tealdeer
    has_cmd delta || bi git-delta
    has_cmd choose || bi choose-rust
    has_cmd btm || bi bottom
    has_cmd nu || bi nushell

    alias gdu=gdu-go

    slog "shell tools with brew done!"
}

pixi_shell_slim_install() {
    has_cmd trash || pi trash-cli
    has_cmd || pi stow
    has_cmd rg || pi ripgrep
    has_cmd gum || pi go-gum
    has_cmd ug || pi ugrep

    pis lazygit eza fzf zoxide starship bat fd gh carapace git-delta
}

pixi_shell_install() {
    pixi_shell_slim_install

    pis broot just shellcheck lazydocker broot gdu nvim luarocks micro glances
    pis cheat curlie duf sd xh atuin direnv dust procs hyperfine yq yazi htop jq

    has_cmd tree-sitter || pi tree-sitter-cli
    has_cmd tv || pi television
    has_cmd spf || pi superfile
    has_cmd tldr || pi tealdeer
    has_cmd choose || pi choose-rust
    has_cmd btm || pi bottom
    has_cmd nu || pi nushell
}

go_shell_install() {
    has_cmd go || return 1

    slog "shell tools with go"

    has_cmd cheat || go install github.com/cheat/cheat/cmd/cheat@latest
    has_cmd curlie || go install github.com/rs/curlie@latest
    has_cmd lazygit || go install github.com/jesseduffield/lazygit@latest
    has_cmd gdu || go install github.com/dundee/gdu/v5/cmd/gdu@latest
    has_cmd duf || go install github.com/muesli/duf@latest

    slog "shell tools with go done!"

    cmd_check cheat curlie lazygit gdu duf
}

rust_shell_install() {
    has_cmd rustup || return 1

    rustup update stable

    slog "shell tools with rust"

    has_cmd starship || cargoi starship
    has_cmd delta || cargoi git-delta
    has_cmd dust || cargoi du-dust
    has_cmd choose || cargoi choose
    has_cmd sd || cargoi sd
    has_cmd procs || cargoi procs
    has_cmd btm || cargoi bottom
    has_cmd xh || cargoi xh

    slog "shell tools with rust done!"

    cmd_check starship delta dust choose sd procs btm xh lsd
}

pnpm_shell_install() {
    has_cmd pnpm || return 1

    slog "shell tools with pnpm"
    pnpm install -g degit neovim
    cmd_check degit
}

starship_install() {
    has_cmd starship && return 0

    smd ~/.local/bin
    curl -sS https://starship.rs/install.sh | sh -s -- -y -b ~/.local/bin
}

webi_shell_install() {
    wis shfmt gh dotenv bat curlie delta fd jq lsd sd yq rg arc

    # webi node golang go-essentials shellcheck shfmt pathman
    # webi bat curlie delta jq lsd rg gh fd sd

    # webi caddy xcaddy gitdeploy gitea rclone serviceman syncthing k9s kubectx kubens
    # webi pyenv
    # webi fd git watchexec rustlang
    # sudo apt install -y libreadline-dev libsqlite3-dev libffi-dev libbz2-dev liblzma-dev
}

shell_install() {
    brew_install
    webi_install
    mise_install
    # pixi_install

    cli_install

    webi_shell_install
    brew_shell_install
    # mise_shell_install
    # pixi_shell_install

    starship_install

    gh extension install github/gh-copilot
}

vscode_flatpak_install() {
    fpi com.visualstudio.code
    flatpak install com.visualstudio.code.tool.podman
    alias code="flatpak run com.visualstudio.code"
    xargs -L 1 flatpak run com.visualstudio.code --install-extension <"$DOT_DIR/extras/vscode/extensions/default"
    vscode-flatpak_config_install
}

ptyxis_install() {
    if ! has_cmd flatpak; then
        warn "flatpak not installed, skipping ptyxis installation."
        return 1
    fi

    if ! flatpak list | grep -q -i Ptyxis >/dev/null; then
        slog "Installing Ptyxis"
        fpi app.devsuite.Ptyxis
    fi

    # has_cmd gsettings || return 1

    # slog "Configuring Ptyxis"

    # gsettings set org.gnome.Ptyxis use-system-font false
    # gsettings set org.gnome.Ptyxis font-name 'JetBrains Mono Medium 12'
    # gsettings set org.gnome.Ptyxis interface-style 'dark'

    # local profid
    # profid=$(gsettings get org.gnome.Ptyxis default-profile-uuid)
    # gsettings set "org.gnome.Ptyxis.Profile:/${profid}/" palette 'Catppuccin Mocha'

    slog "Ptyxis installation and configuration done!"
}

apps_slim_install() {
    if ! has_cmd flatpak; then
        warn "flatpak not installed, skipping flatpak apps"
        return 1
    fi

    flathub_install

    fpi org.telegram.desktop
    fpi org.deluge_torrent.deluge
    fpi us.zoom.Zoom
    fpi md.obsidian.Obsidian
}

apps_install() {

    slog "Installing flatpak apps"

    apps_slim_install

    fpi org.wezfurlong.wezterm
    fpi io.github.shiftey.Desktop
    fpi io.github.dvlv.boxbuddyrs
    fpi io.github.getnf.embellish

    alias wezterm="flatpak run org.wezfurlong.wezterm"

    slog "Flatpak apps installation done!"
}

more_apps_install() {
    fpi org.wireshark.Wireshark
    fpi sh.cider.Cider
    fpi com.bitwarden.desktop
    fpi io.podman_desktop.PodmanDesktop

    # fpi io.dbeaver.DBeaverCommunity
    # fpi dev.neovide.neovide
    # fpi io.github.zyedidia.micro
    # fpi com.jetbrains.CLion
    # fpi com.google.Chrome
}

incus_config_install() {
    slog "incus config"

    if ! has_cmd incus; then
        warn "incus not installed, skipping incus config"
        return 0
    fi
    slog "incus config"

    sudo usermod -aG incus "$USER"
    sudo usermod -aG incus-admin "$USER"
    sudo systemctl enable --now incus.socket
    sudo systemctl enable --now incus.service

    if has_cmd firewalld; then
        sudo firewall-cmd --zone=trusted --change-interface=incusbr0 --permanent
        sudo firewall-cmd --reload
    fi

    # should be invoked by user after reboot
    # sudo incus admin init --minimal

    slog "incus config done!"
}

neovim_install() {
    is_mac && return 0

    has_cmd nvim && return 0

    slog "Installing neovim..."

    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage

    ./nvim.appimage --appimage-extract

    sudo mv squashfs-root /
    sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
    frm nvim.appimage

    cmd_check nvim

    treesitter_install

    si luarocks

    if has_cmd pnpm; then
        pnpm install -g neovim
    elif has_cmd npm; then
        npm install -g neovim
    fi

    has_cmd pip && pip install --user neovim

    slog "Neovim installation done!"

    cmd_check nvim
}

micro_install() {
    has_cmd micro && return 0

    slog "Installing micro"

    curl https://getmic.ro | bash
    mv micro "$HOME/.local/bin/"

    slog "micro installation done!"

    cmd_check micro
}

rust_install() {
    source_if_exists "$HOME/.cargo/env"

    has_cmd rustup && return 0

    slog "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source_if_exists "$HOME/.cargo/env"

    slog "rust installation done!"

    cmd_check rustc
}

miniconda_install() {
    has_cmd conda && return 0
    dir_exists ~/miniconda3 && return 0

    slog "Installing miniconda"

    smd ~/miniconda3
    download_to https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
    frm ~/miniconda3/miniconda.sh
    has_cmd bash && ~/miniconda3/bin/conda init bash
    has_cmd zsh && ~/miniconda3/bin/conda init zsh

    slog "miniconda installation done!"

    cmd_check conda
}

web_install() {
    slog "Installing npm packages globally"
    pnpm install -g ndb @antfu/ni
    pnpm install -g tsx vite-node zx turbo

    if ! grep "fs.inotify.max_user_watches" /etc/sysctl.conf >/dev/null; then
        echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf >/dev/null && sudo sysctl -p
    fi

    if is_apt; then
        pnpm dlx playwright install-deps
        pnpm dlx playwright install
    fi
}

emacs_install() {
    slog "Installing emacs"

    if is_apt; then
        echo "postfix postfix/main_mailer_type select No configuration" | sudo debconf-set-selections
        si -y --no-install-recommends emacs
    elif is_mac; then
        brew tap railwaycat/emacsmacport
        bi emacs-mac --with-modules
        ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications/Emacs.app
    else
        si emacs
    fi

    slog "emacs installation done!"

    cmd_check emacs
}

go_install() {
    if ! has_cmd go; then
        slog "Installing go"

        sudo rm -rf /usr/local/go
        VERSION=$(curl -sSL "https://go.dev/VERSION?m=text" | head -n 1)
        frm "/tmp/${VERSION}.linux-amd64.tar.gz"
        wget -nv "https://dl.google.com/go/${VERSION}.linux-amd64.tar.gz" -O /tmp/"${VERSION}.linux-amd64.tar.gz"
        slog "Untar ${VERSION}.linux-amd64.tar.gz"
        sudo tar -C /usr/local -xzf /tmp/"${VERSION}.linux-amd64.tar.gz"
        frm "/tmp/${VERSION}.linux-amd64.tar.gz"
        export PATH=$PATH:/usr/local/go/bin

        slog "go installation done!"

    fi

    if ! has_cmd go; then
        warn "go not installed, skipping go dev tools"
        return 1
    fi

    slog "Installing go dev tools..."

    go install golang.org/x/lint/golint@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/tools/gopls@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/ramya-rao-a/go-outline@latest
    go install github.com/acroca/go-symbols@latest
    go install github.com/mdempsky/gocode@latest
    go install github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest
    go install github.com/cweill/gotests/gotests@latest
    go install github.com/fatih/gomodifytags@latest
    go install github.com/josharian/impl@latest
    go install github.com/haya14busa/goplay/cmd/goplay@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/davidrjenni/reftools/cmd/fillstruct@latest
    go install github.com/godoctor/godoctor@latest
    go install github.com/zmb3/gogetdoc@latest
    go install github.com/jstemmer/gotags@latest
    go install github.com/fatih/motion@latest
    go install github.com/klauspost/asmfmt/cmd/asmfmt@latest
    go install github.com/kisielk/errcheck@latest
    go install mvdan.cc/gofumpt@latest
    go install github.com/fatih/gomodifytags@latest

    slog "go dev tools installation done!"
}

docker_common_install() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping docker post install configuration"
        return 1
    fi

    if has_cmd brew; then
        bi jesseduffield/lazydocker/lazydocker
        bi lazydocker
    fi

    sudo groupadd docker
    sudo usermod -aG docker "$USER"

    sudo systemctl --now enable docker
    sudo systemctl --now enable containerd
}

docker_install() {
    has_cmd docker && return 0

    slog "Installing docker..."

    frm /tmp/get-docker.sh
    curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
    sudo sh /tmp/get-docker.sh
    frm /tmp/get-docker.sh

    docker_common_install

    slog "Docker installation done!"
}

code_server_install() {
    has_cmd code-server && return 1

    slog "Installing code-server"
    curl -sSL https://code-server.dev/install.sh | sh
    slog "code-server installation done!"

    cmd_check code-server

    # slog "Installing coder"
    # curl -L https://coder.com/install.sh | sh
    # slog "coder installation done!"
}

conan_install() {
    has_cmd conan && return 1

    slog "Installing conan"
    pipx install conan
    slog "conan installation done!"

    cmd_check conan
}

cmake_install() {
    has_cmd /usr/local/bin/cmake && return 1

    CMAKE_VERSION="3.28.3"
    ARCH=$(uname -m)
    CMAKE_BINARY_NAME="cmake-${CMAKE_VERSION}-linux-${ARCH}.sh"
    CMAKE_CHECKSUM_NAME="cmake-${CMAKE_VERSION}-SHA-256.txt"

    slog "Installing latest cmake"
    TMP_DIR=$(mktemp -d -t cmake-XXXXXXXXXX)
    if cd "${TMP_DIR}"; then
        curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_BINARY_NAME}" -O
        curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_CHECKSUM_NAME}" -O

        sha256sum -c --ignore-missing "${CMAKE_CHECKSUM_NAME}"
        sudo mkdir /opt/cmake
        sudo sh "${TMP_DIR}/${CMAKE_BINARY_NAME}" --prefix=/opt/cmake --skip-license

        sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
        sudo ln -s /opt/cmake/bin/ctest /usr/local/bin/ctest
        frm "${TMP_DIR}"
    fi
    slog "cmake installation done!"

    cmd_check cmake
}

atomic_distrobox_install() {
    has_cmd distrobox && return 0

    slog "Installing distrobox"

    curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/install | sh -s -- --prefix ~/.local

    slog "distrobox installation done!"
}

multipass_install() {
    has_cmd snap || snap_install

    if has_cmd snap; then
        sudo snap install multipass
    else
        warn "snap not installed, skipping multipass installation"
    fi
}

permissive_selinux() {
    sed -i 's/^SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config

    sudo setenforce 0
    if [[ "$(getenforce)" == "Permissive" ]]; then
        slog "Successfully set SELinux to permissive mode."
    else
        err_exit "Failed to set SELinux to permissive mode. Quitting."
    fi
}

monaspace_install() {
    file_exists ~/.local/share/fonts/MonaspaceRadon-Regular.otf && return 0

    smd ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
    wget -nv https://github.com/githubnext/monaspace/releases/download/v1.000/monaspace-v1.000.zip -O /tmp/monaspace.zip
    unzip -qq -d /tmp/monaspace -o /tmp/monaspace.zip

    cp /tmp/monaspace/monaspace-*/fonts/otf/* ~/.local/share/fonts
    cp /tmp/monaspace/monaspace-*/fonts/variable/* ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
}

cascadia_nerd_font_install() {
    if ! file_exists ~/.local/share/fonts/CaskaydiaMonoNerdFont-Regular.ttf; then
        smd ~/.local/share/fonts
        frm /tmp/cascadia /tmp/CascadiaMono.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/CascadiaMono.zip -O /tmp/CascadiaMono.zip
        unzip -qq -d /tmp/cascadia -o /tmp/CascadiaMono.zip
        cp /tmp/cascadia/*.ttf ~/.local/share/fonts
        frm /tmp/cascadia /tmp/CascadiaMono.zip
    fi
}

monaspace_nerd_font_install() {
    if ! file_exists ~/.local/share/fonts/MonaspiceRnNerdFont-Regular.otf; then
        smd ~/.local/share/fonts
        frm /tmp/monaspace /tmp/Monaspace.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Monaspace.zip -O /tmp/Monaspace.zip
        unzip -qq -d /tmp/monaspace -o /tmp/Monaspace.zip
        cp /tmp/monaspace/*.otf ~/.local/share/fonts
        frm /tmp/monaspace /tmp/Monaspace.zip
    fi

}

jetbrains_nerd_font_install() {
    if ! file_exists ~/.local/share/fonts/JetBrainsMonoNLNerdFontPropo-Regular.ttf; then
        slog "Installing JetBrains Mono Nerd Font"
        smd ~/.local/share/fonts
        frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip -O /tmp/jetbrains-mono.zip
        unzip -qq -d /tmp/jetbrains-mono -o /tmp/jetbrains-mono.zip
        cp /tmp/jetbrains-mono/*.ttf ~/.local/share/fonts
        frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
        slog "JetBrains Mono Nerd Font installation done!"
    fi
}

nerd_font_install() {
    smd ~/.local/share/fonts

    cascadia_nerd_font_install
    jetbrains_nerd_font_install
    monaspace_nerd_font_install
}

fonts_install() {
    if ! has_cmd wget || ! has_cmd unzip; then
        warn "wget and unzip not installed, skipping fonts"
        return 1
    fi

    slog "Installing fonts"

    monaspace_install
    nerd_font_install

    if is_apt; then
        si fonts-cascadia-code fonts-jetbrains-mono
    elif is_rh; then
        is_fedora || si cascadia-fonts-all jetbrains-mono-fonts-all
    fi

    slog "Fonts installation done!"
}

bash_config_exists() {
    grep -q .ilm/share/bashrc ~/.bashrc
}

bash_config_check() {
    bash_config_exists || warn "bash config is not setup correctly"
}

bash_config_install() {
    slog "Configuring bash"

    if ! bash_config_exists; then
        echo "export DOT_DIR=$DOT_DIR" >>~/.bashrc
        echo "source ~/.ilm/share/bashrc" >>~/.bashrc
    fi

    slog "bash config done!"
}

zsh_config_install() {
    slog "zsh config"

    # @TODO: prepend DOT_DIR

    srm "$HOME/.zshrc"
    smd "$HOME/.zsh"
    sclone --depth=1 https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
    sclone --depth=1 https://github.com/djui/alias-tips.git "$HOME/.zsh/alias-tips"
    sclone --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git "$HOME/.zsh/zsh-autosuggestions"
    sclone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.zsh/zsh-syntax-highlighting"

    stowdf zsh

    slog "zsh config done!"
}

tmux_config_install() {
    slog "tmux config"

    srm "$XDG_CONFIG_HOME/tmux"

    stownf tmux

    slog "tmux config done!"
}

vscode-extensions_install() {
    slog "Installing vscode extensions"
    if [[ "$USER" == "pervez" ]]; then
        xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/common"
    else
        xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/default"
    fi
    slog "vscode extensions installation done!"
}

vscode-all-extensions_install() {
    slog "Installing vscode extensions"

    xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/common"
    xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/cpp"
    xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/prog"
    xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/python"
    xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/web"

    slog "vscode extensions installation done!"
}

vscode-flatpak_config_install() {
    slog "vscode config"

    smd ~/.var/app/com.visualstudio.code/config/Code/User
    safe-cp "$DOT_DIR/extras/vscode/flatpak-settings.json" ~/.var/app/com.visualstudio.code/config/Code/User/settings.json

    slog "vscode config done!"
}

emacs-doom_config_install() {
    dir_exists "$XDG_CONFIG_HOME/doom" && return 0

    slog "Installing doom"

    sclone --depth=1 https://github.com/doomemacs/doomemacs "$XDG_CONFIG_HOME/emacs"
    omv "$XDG_CONFIG_HOME/doom" "$XDG_CONFIG_HOME/doom.backup"
    sclone https://github.com/pervezfunctor/doomemacs-config "$XDG_CONFIG_HOME/doom"

    slog "Configure doom"
    doom sync
    doom env

    slog "doom installation done!"

    has_cmd update-locale && sudo update-locale LANG=en_US.UTF8
}

emacs_config_install() {
    slog "emacs config"

    # srm $XDG_CONFIG_HOME/.emacs
    # srm $XDG_CONFIG_HOME/.emacs.d
    srm "$XDG_CONFIG_HOME/emacs"
    smd "$XDG_CONFIG_HOME/emacs"
    stowdf emacs

    slog "emacs config done!"
}

emacs-slim_config_install() {
    slog "Installing slim emacs"

    srm ~/.emacs
    stowdf emacs-slim

    slog "emacs slim installation done!"
}

nvim_config_install() {
    slog "nvim config"

    frm "$XDG_CONFIG_HOME/nvim.bak"
    omv "$XDG_CONFIG_HOME/nvim" "$XDG_CONFIG_HOME/nvim.bak"
    frm "$HOME/.local/share/nvim"
    frm "$HOME/.local/state/nvim"
    frm "$HOME/.cache/nvim"

    stowgf nvim
    # nvim --headless "+Lazy! sync" +qa

    slog "nvim config done!"
}

git_conf() {
    git config --global "$@"
}

git_config_install() {
    slog "Configuring git"

    is_wsl && git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager-core.exe"

    # stowdf git

    git_conf init.defaultBranch main
    git_conf pull.ff only
    git_conf delta.navigate true
    git_conf delta.line-numbers true
    git_conf delta.syntax-theme "Monokai Extended"
    git_conf delta.side-by-side true
    git_conf merge.conflictStyle diff3
    git_conf interactive.diffFilter "delta --color-only"
    git_conf fetch.prune true

    if [[ "$USER" == "pervez" ]]; then
        git_conf user.name "Pervez Iqbal"
        git_conf user.email "pervefunctor@gmail.com"
    fi

    slog "git configuration done!"
}

vscode_config_install() {
    slog "vscode config"

    if is_mac; then
        safe-cp "$DOT_DIR/extras/vscode/minimal-settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
    else
        smd "$XDG_CONFIG_HOME/Code/User"
        fmv "$XDG_CONFIG_HOME/Code/User/settings.json" "$XDG_CONFIG_HOME/Code/User/settings.json.bak"
        safe-cp "$DOT_DIR/extras/vscode/minimal-settings.json" "$XDG_CONFIG_HOME/Code/User/settings.json"
    fi

    slog "vscode config done!"
}

alacritty_config_install() {
    slog "alacritty config"
    stowgf alacritty
    slog "alacritty config done!"
}

wezterm_config_install() {
    slog "wezterm config"
    stowgf wezterm
    slog "wezterm config done!"
}

kitty_config_install() {
    slog "kitty config"
    stowgf kitty
    slog "kitty config done!"
}

ghostty_config_install() {
    slog "ghostty config"
    stowgf ghostty
    slog "ghostty config done!"
}

atuin_config_install() {
    slog "atuin config"
    stowgf atuin
    slog "atuin config done!"
}

amethyst_config_install() {
    slog "amethyst config"
    stowdf amethyst
    slog "amethyst config done!"

}

aerospace_config_install() {
    slog "aerospace config"
    stowgf aerospace
}

yazi_config_install() {
    slog "yazi config"

    srm "$XDG_CONFIG_HOME/yazi"
    smd "$XDG_CONFIG_HOME/yazi"
    stownf yazi

    # @TODO: use package.toml file to install flavors
    if has_cmd ya; then
        ya pack -a yazi-rs/flavors:catppuccin-frappe
        ya pack -a yazi-rs/flavors:catppuccin-mocha
        ya pack -a yazi-rs/flavors:catppuccin-macchiato
        ya pack -u
    fi

    slog "yazi config done!"
}

foot_config_install() {
    slog "foot config"
    stowgf foot
    slog "foot config done!"
}

shell_config_install() {
    bash_config_install
    has_cmd code && vscode_config_install

    if ! has_cmd stow; then
        warn "stow not installed, skipping config"
        return 1
    fi

    has_cmd git && git_config_install
    has_cmd nvim && nvim_config_install
    has_cmd tmux && tmux_config_install
    has_cmd zsh && zsh_config_install

    has_cmd emacs || return 0

    emacs_version=$(emacs --version | awk 'NR==1 {print $3}' | cut -d'.' -f1)
    if [ "$emacs_version" -gt 28 ]; then
        emacs_config_install
    fi
}

config_install() {
    shell_config_install

    has_cmd atuin && atuin_config_install
    has_cmd yazi && yazi_config_install

    has_cmd alacritty && alacritty_config_install
    has_cmd foot && foot_config_install
    has_cmd ghostty && ghostty_config_install
    has_cmd kitty && kitty_config_install
    has_cmd wezterm && wezterm_config_install

    has_cmd aerospace && aerospace_config_install
    has_cmd amethyst && amethyst_config_install
}

poetry_install() {
    has_cmd poetry && return 0

    slog "Installing poetry"
    if has_cmd python3; then
        curl -sSL https://install.python-poetry.org | python3 -
        smd ~/.zfunc
        poetry completions zsh >~/.zfunc/_poetry
        slog "poetry installation done!"
    else
        warn "python3 not installed, skipping poetry"
    fi

    cmd_check poetry
}

pyenv_install() {
    has_cmd pyenv && return 0

    slog "Installing pyenv"
    sclone https://github.com/yyuu/pyenv.git ~/.pyenv
    sclone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
    slog "pyenv installation done!"

    cmd_check pyenv

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
}

pyenv_anaconda_install() {
    if has_cmd pyenv; then
        if ! pyenv versions | grep anaconda >/dev/null; then
            slog "Installing anaconda"
            local anacondaversion
            anacondaversion=$(pyenv install --list | grep anaconda | tail -1)

            pyenv install "$anacondaversion"
            smd ~/py
            if cd ~/py; then
                pyenv global "$anacondaversion"
                python -m pip install --user pipx neovim
                poetry_install
            else
                warn "$HOME/py doesn't exist, skipping part of python install"
            fi
        fi
    else
        warn "pyenv not installed, skipping anaconda"
    fi

    cmd_check conda
}

pyenv_miniconda_install() {
    if has_cmd pyenv; then
        if ! pyenv versions | grep miniconda >/dev/null; then
            slog "Installing miniconda"
            local minicondaversion
            minicondaversion=$(pyenv install --list | grep miniconda | tail -1)

            pyenv install "$minicondaversion"
            slog "miniconda installation done!"
        fi
    else
        warn "pyenv not installed, skipping miniconda"
    fi

    cmd_check conda
}

mini_install() {
    pyenv_install
    pyenv_miniconda_install
}

anaconda_install() {
    pyenv_install
    pyenv_anaconda_install
}

tailscale_install() {
    has_cmd tailscale && return 0

    slog "Installing tailscale"
    curl -fsSL https://tailscale.com/install.sh | sh
    slog "tailscale installation done!"
}

portainer_install() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping portainer"
        return 1
    fi

    if has_cmd docker && docker ps -a | grep -q portainer; then
        slog "Portainer is already installed"
        return 1
    fi

    if ! docker volume inspect portainer_data &>/dev/null; then
        slog "Creating portainer_data volume"
        docker volume create portainer_data
        docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

        slog "Portainer installation done!"
    fi
}

sway_install() {
    slog "Installing sway..."

    sway_bin_install

    sway-waybar_config_install
    kitty_config_install
    sway_config_install
    rofi_config_install
    wlogout_config_install

    if ! has_cmd pipx; then
        warn "pipx not installed, cannot install autotiling"
        return 1
    fi

    pipx install i3ipc
    pipx install autotiling

    slog "Installing sway done!"
}

hyprland_install() {
    slog "Installing hyprland..."

    hyprland_bin_install

    hyprland_config_install
    hypr-waybar_config_install
    kitty_config_install
    sway_config_install
    rofi_config_install
    wlogout_config_install

    slog "hyprland installation done!"
}

vscode_install() {
    vscode_bin_install
    vscode-extensions_install
    vscode_config_install
}

home_manager_install() {
    has_cmd home-manager && return 0

    slog "Setting up home-manager"

    if ! dir_exists ~/.ilm; then
        warn "could not clone dotfiles respository to ~/.ilm, Quitting"
        return 1
    fi

    nix run home-manager --extra-experimental-features 'nix-command flakes' -- switch --flake ~/.ilm/home-manager/dot-config/home-manager\#ilm --impure -b bak

    if file_exists /etc/nix/nix.conf; then
        if ! grep -q nix-command flakes /etc/nix/nix.conf 2>/dev/null; then
            slog "enabling flakes in /etc/nix/nix.conf"
            echo "extra-experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf
        fi
    elif ! grep -q nix-command flakes "$XDG_CONFIG_HOME/nix/nix.conf" 2>/dev/null; then
        slog "enabling flakes in $XDG_CONFIG_HOME/nix/nix.conf"
        echo "extra-experimental-features = nix-command flakes" >>"$XDG_CONFIG_HOME/nix/nix.conf"
    fi
}

gnome_extensions_install() {
    if ! has_cmd gext; then
        if ! has_cmd pipx; then
            warn "pipx not installed, skipping gnome extensions"
            return 1
        fi

        pipx install gnome-extensions-cli --system-site-packages
        cmd_check gext
    fi

    slog "Installing gnome extensions"

    gext install windowsNavigator@gnome-shell-extensions.gcampax.github.com
    gext install Vitals@CoreCoding.com
    gext install tailscale@joaophi.github.com
    gext install tilingshell@ferrarodomenico.com
    gext install CoverflowAltTab@palatis.blogspot.com
    gext install just-perfection-desktop@just-perfection
    gext install blur-my-shell@aunetx
    gext install undecorate@sun.wxg@gmail.com
    gext install AlphabeticalAppGrid@stuarthayhurst

    slog "gnome extensions installation done!"
}

gnome_settings_install() {

    if ! has_cmd gsettings; then
        warn "gsettings not found, skipping gnome basic settings"
        return 1
    fi

    slog "gnome settings"

    gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier']"
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
    gsettings set org.gnome.desktop.interface icon-theme 'Adwaita-dark'
    gsettings set org.gnome.desktop.interface cursor-theme 'Adwaita'
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
    gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
    gsettings set org.gnome.desktop.interface accent-color 'purple'

    # Use 4 fixed workspaces instead of dynamic mode
    gsettings set org.gnome.mutter dynamic-workspaces false
    gsettings set org.gnome.desktop.wm.preferences num-workspaces 4

    # Center new windows in the middle of the screen
    gsettings set org.gnome.mutter center-new-windows true

    # Set JetBrains Mono as the default monospace font
    gsettings set org.gnome.desktop.interface monospace-font-name 'JetbrainsMono Nerd Font 11'

    slog "gnome settings done!"
}

# https://github.com/basecamp/omakub/blob/master/install/desktop/set-gnome-extensions.sh
gnome_config_install() {
    if ! is_gnome; then
        warn "Not running GNOME, skipping GNOME config"
        return 1
    fi

    slog "gnome config"

    if is_ubuntu; then
        si gnome-shell-extension-manager gnome-tweak-tool gnome-sushi gnome-software-plugin-flatpak
    elif is_fedora && ! is_atomic; then
        si gnome-extensions-app gnome-tweaks
    fi

    if is_ubuntu; then
        gnome-extensions disable tiling-assistant@ubuntu.com
        gnome-extensions disable ubuntu-appindicators@ubuntu.com
        gnome-extensions disable ubuntu-dock@ubuntu.com
        gnome-extensions disable ding@rastersoft.com
    fi

    gnome_settings_install
    gnome_keybindings_install

    gnome_extensions_install

    slog "gnome config done!"
}

sway-waybar_config_install() {
    slog "waybar config"
    has_cmd waybar || return 1
    stowgf waybar
    slog "waybar config done!"
}

hypr-waybar_config_install() {
    has_cmd waybar || return 1

    slog "waybar config"
    stowgf hypr-waybar
    slog "waybar config done!"
}

wlogout_config_install() {
    slog "wlogout config"
    has_cmd wlogout || return 1
    stowgf wlogout
    slog "wlogout config done!"
}

sway_config_install() {
    has_cmd sway || return 1
    slog "sway config"
    stowgf sway
    slog "sway config done!"
}

rofi_config_install() {
    has_cmd rofi || return 1

    slog "rofi config"
    stowgf rofi
    slog "rofi config done!"
}

hyprland_config_install() {
    slog "hypr config install"

    hypr-waybar_config_install
    wlogout_config_install
    rofi_config_install
    kitty_config_install

    slog "hypr config done!"
}

github_user_setup() {
    if ! has_cmd gh; then
        warn "gh not installed, skipping github user setup"
        return 1
    fi

    if has_cmd gh; then
        slog "Authenticating github(gh)"
        gh auth login
    fi
}

dbox_nix_setup() {
    if ! has_cmd distrobox; then
        warn "distrobox not installed, skipping distrobox creation"
        return 1
    fi

    source_dotfile "share/fns"
    dbox_nix
}

# shellcheck disable=SC2120
tbox_default_setup() {
    has_cmd toolbox || return 0

    toolbox --assumeyes create

    local group=${1:-shell}
    toolbox run bash -c "$(curl -sSL https://dub.sh/aPKPT8V)" -- "$group"
}

tbox_default() {
    has_cmd toolbox || return

    toolbox --assumeyes create
    toolbox run bash -c "$(curl -sSL https://dub.sh/aPKPT8V)" -- shell vscode
    toolbox run si firefox
    toolbox run gnome-keyring-daemon -s -d --components=pkcs11,secrets,ssh
}

dbox_default() {
    has_cmd distrobox || return

    slog "Creating default distrobox"
    distrobox create --yes
    distrobox enter -- bash -c "$(curl -sSL https://dub.sh/aPKPT8V)" -- shell vscode
    distrobox enter -- si firefox
    distrobox enter -- gnome-keyring-daemon -s -d --components=pkcs11,secrets,ssh
    slog "Default distrobox created!"
}

fedora_packages() {
    si git gh git-delta unzip wget curl trash-cli tar stow \
        gcc make file just emacs-nox tree-sitter zsh tmux gum \
        tree bat eza fzf ripgrep zoxide fd htop sd bat tealdeer plocate cheat

    starship_install
}

pixi_packages() {
    pi git gh lazygit git-delta unzip wget curl trash-cli tar stow \
        gcc make file just emacs tree-sitter-cli zsh starship tmux go-gum \
        tree bat eza fzf ripgrep zoxide fd htop sd yazi bat tealdeer navi
}

brew_packages() {
    si git gh lazygit git-delta unzip wget curl trash-cli stow \
        gcc make file just emacs tree-sitter zsh starship tmux gum \
        tree bat eza fzf ripgrep zoxide fd htop sd yazi bat tealdeer cheat navi
}

tw_packages() {
    si git gh lazygit git-delta unzip wget curl trash-cli tar stow \
        gcc make file just emacs-nox tree-sitter zsh starship tmux gum cheat \
        tree bat eza fzf ripgrep zoxide fd htop sd yazi bat tealdeer plocate
}

arch_packages() {
    si git github-cli lazygit git-delta unzip wget curl trash-cli tar stow \
        gcc make file just emacs-nox tree-sitter zsh starship tmux gum \
        tree bat eza fzf ripgrep zoxide fd htop sd yazi bat plocate tealdeer
}

ubuntu_packages() {
    DEBIAN_FRONTEND=noninteractive si git gh git-delta unzip wget curl \
        trash-cli tar stow gcc make file just tree-sitter-cli zsh tmux \
        tree bat eza fzf ripgrep zoxide fd-find htop sd bat emacs-nox

    starship_install

    # si golang-go
    # go install github.com/charmbracelet/gum@latest
}

debian_packages() {
    #  git-delta eza just treesitter-cli fzf
    si git gh unzip wget curl trash-cli tar stow gcc make file zsh tmux \
        tree bat ripgrep zoxide fd-find htop sd

    starship_install
}

zsh_as_default() {
    has_cmd zsh && chsh -s "$(command -v zsh)" "$USER"
}

box_base() {
    cd "$HOME" || warn "could not cd to $HOME"

    "$1_packages"

    has_cmd gh && gh extension install github/gh-copilot

    dotfiles_install

    dir_exists "$DOT_DIR" || err_exit "$DOT_DIR doesn't exist, Qutting"

    srm ~/.zshrc
    srm ~/.emacs
    srm ~/.config/tmux/tmux.conf
    smd ~/.config
    stowdf zsh emacs-slim

    # older version of stow don't work with dot directories.
    if is_ubuntu || is_debian || is_rocky; then
        srm ~/.config/tmux.conf
        ln -s ~/.ilm/tmux/dot-config/tmux/tmux.conf ~/.config/tmux.conf
    else
        stowdf tmux
    fi

    zsh_as_default
}

dbox_base() {
    is_inside_distrobox || err_exit "This script is only for distrobox containers"
    [[ "$HOME" == *"boxes"* ]] || err_exit "This script is only for distrobox containers with isolated home directory"

    box_base ubuntu
}

arch-dbox_groupstall() {
    is_arch || err_exit "This script is only for Arch Linux"

    dbox_base arch
}

tw-dbox_groupstall() {
    is_tw || err_exit "This script is only for openSUSE Tumbleweed"

    dbox_base tw
}

fedora-dbox_groupstall() {
    is_fedora || err_exit "This script is only for Fedora"

    dbox_base fedora
}

pixi-dbox_groupstall() {
    dbox_base pixi
}

brew-dbox_groupstall() {
    dbox_base brew
}

debian-dbox_groupstall() {
    is_debian || err_exit "This script is only for Debian"

    dbox_base debian
}

ubuntu-dbox_groupstall() {
    is_ubuntu || err_exit "This script is only for Ubuntu"

    dbox_base ubuntu
}

wsl_groupstall() {
    is_wsl || err_exit "This script is only for WSL"
    box_base ubuntu
}

dbox_groupstall() {
    if is_suse; then
        tw-dbox_groupstall
    elif is_ubuntu; then
        ubuntu-dbox_groupstall
    elif is_debian; then
        debian-dbox_groupstall
    elif is_arch; then
        arch-dbox_groupstall
    elif is_ublue; then
        brew-dbox_groupstall
    elif is_atomic; then
        pixi-dbox_groupstall
    elif is_fedora; then
        fedora-dbox_groupstall
    else
        brew-dbox_groupstall
    fi
}

dev_groupstall() {
    slog "Generic OS setup for Development(docker,vscode,kitty,brew,flatpak, distrobox)"

    essential_install

    brew_install

    has_cmd trash || bi trash-cli
    has_cmd rg || bi ripgrep
    has_cmd delta || bi git-delta

    bis gh wget tree tar unzip stow micro make cmake
    bis zsh starship fzf fd bat zoxide eza htop tmux gum
    bi bash-preexec

    vscode_install

    docker_install
    atomic_distrobox_install

    jetbrains_nerd_font_install

    if has_cmd flatpak; then
        flathub_install
        ptyxis_install
        fpi us.zoom.Zoom
        fpi md.obsidian.Obsidian
    else
        kitty_install
    fi
}

fedora-atomic_groupstall() {
    is_std_atomic || err_exit "This script is only for Atomic Host"

    slog "Fedora Atomic Host setup"

    slog "Setting up python, pip, pipx"
    python_install

    slog "Installing trash-cli"
    pipx install trash-cli

    slog "Installing starship"
    starship_install

    if ! grep -q starship ~/.bashrc; then
        slog "Adding starship to bashrc"
        echo "source ~/.ilm/share/bashrc" >>~/.bashrc
    fi

    jetbrains_nerd_font_install
    ptyxis_install

    slog "Installing apps"
    apps_slim_install

    is_gnome && gnome_config_install
    is_sway && sway_config_install

    slog "Installing distrobox"
    atomic_distrobox_install

    slog "Setting up default distrobox for development"
    dbox_default

    slog "Fedora Atomic Host setup done!"
}

pixi_groupstall() {
    pixi_install
    export PATH="$HOME/.pixi/bin:$PATH"
    pixi_shell_install
}

pixi-nosudo_groupstall() {
    has_cmd git || err_exit "git not installed! Qutting."

    dotfiles_install

    pixi_install
    has_cmd gh && github_user_setup

    mise_install

    is_desktop || return 0

    smd ~/.local/share/fonts
    jetbrains_nerd_font_install
    kitty_install
    kitty_config_install
    vscode_flatpak_install
    tbox_default_setup
}

nosudo_groupstall() {
    dotfiles_install

    mise_install

    starship_install
    bash_config_install

    if is_desktop; then
        jetbrains_nerd_font_install

        has_cmd flatpak || return 0

        flathub_install
        vscode_flatpak_install
        fpi app.devsuite.Ptyxis

        has_cmd gsettings && gsettings set org.gnome.desktop.interface cursor-theme 'Adwaita'
    fi

    if has_cmd podman || has_cmd docker; then
        atomic_distrobox_install
        dbox_nix_setup
        tbox_default_setup
    fi
}

base-group_check() {
    cmd_check gcc make curl wget git trash tree tar unzip stow
    dir_check "$DOT_DIR"
    bash_config_check
}

base_groupstall() {
    core_install
    dotfiles_install
    bash_config_install

    base-group_check
}

nix_groupstall() {
    base_groupstall
    nix_install
    home_manager_install
    devbox_install

    hms

    cmd_check home-manager nix devbox
}

min-group_check() {
    cmd_check micro zip unar
}

min_groupstall() {
    base_groupstall
    essential_install

    min-group_check
}

centos-wsl_groupstall() {
    min_groupstall
    si zsh tmux
    brew_install
    brew_shell_slim_install

    if has_cmd stow; then
        has_cmd zsh && zsh_config_install
        has_cmd nvim && nvim_config_install
        has_cmd tmux && tmux_config_install
    else
        warn "stow not installed, skipping configuration for zsh, nvim, tmux"
    fi

    has_cmd code && xargs -L 1 code --install-extension <"$DOT_DIR/extras/vscode/extensions/wsl"
    slog "Enter your password to set zsh as default shell"

    zsh_as_default
}

shell-group_check() {
    cmd_check gh nvim zsh tree-sitter tmux lazygit sd lsd bat fd
    cmd_check fzf zoxide gum bat brew btm htop btm rg starship
    cmd_check eza fd fzf atuin delta
    # cmd_check cheat choose curlie direnv doggo dotenv procs
    # cmd_check duf dust gawk gdu hyperfine jq just shellcheck shfmt yq

}

shell_groupstall() {
    min_groupstall
    shell_install

    bash_config_install
    has_cmd zsh && zsh_config_install
    has_cmd nvim && nvim_config_install
    has_cmd tmux && tmux_config_install
    has_cmd yazi && yazi_config_install

    shell-group_check
}

ct-group_check() {
    cmd_check incus docker podman distrobox toolbox
}

ct_groupstall() {
    shell_groupstall
    ct_install

    ct-group_check
}

vm_groupstall() {
    ct_groupstall
    vm_install
}

work_groupstall() {
    ct_groupstall

    jetbrains_nerd_font_install
    vscode_install

    flathub_install
    ptyxis_install
}

desktop_groupstall() {
    vm_groupstall
    fonts_install
    ui_install

    # tailscale_install
    # @TODO: flatpak aliases?

    has_cmd code && vscode-extensions_install
    has_cmd code && vscode_config_install
    has_cmd foot && foot_config_install
    has_cmd ghostty && ghostty_config_install
    has_cmd kitty && kitty_config_install
    has_cmd wezterm && wezterm_config_install
}

prog-group_check() {
    cmd_check go rustc pnpm uv pyenv conda
}

prog_groupstall() {
    vm_groupstall
    go_install
    rust_install
    pnpm_install
    python_install
    uv_install
    prog-group_check
}

all-group_check() {
    cmd_check pixi emacs
}

all_groupstall() {
    prog_groupstall
    pixi_install
    emacs_install

    emacs_config_install

    all-group_check
}

sway_groupstall() {
    slog "Installing sway"
    shell_groupstall

    sway_install

    slog "sway instalation done!"
}

hyprland_groupstall() {
    slog "Installing hyprland"
    shell_groupstall

    hyprland_install

    slog "hyprland instalation done!"
}

kwin_script_install() {
    local SCRIPT="$1"

    if plasmapkg2 -t kwinscript -l | grep -q "krohnkite"; then
        echo "Upgrading KWin script $SCRIPT ..."
        plasmapkg2 -t kwinscript -u "$SCRIPT"
    else
        echo "Installing KWin script $SCRIPT ..."
        plasmapkg2 -t kwinscript -i "$SCRIPT"
    fi
}

kde_settings() {
    if ! is_kde; then
        warn "Not running KDE, skipping KDE settings"
        return 1
    fi

    if ! [[ $(plasma_major_version) -eq 6 ]]; then
        warn "KDE Plasma 6 is required"
        return 1
    fi

    kwin_script_install "krohnkite.kwinscript"
}

# https://github.com/basecamp/omakub/blob/master/install/desktop/set-gnome-hotkeys.sh
gnome_keybindings_install() {
    # Make it easy to resize undecorated windows
    gsettings set org.gnome.desktop.wm.keybindings begin-resize "['<Super>BackSpace']"

    # Alt+F4 is very cumbersome
    # gsettings set org.gnome.desktop.wm.keybindings close "['<Super>w']"

    # Make it easy to maximize like you can fill left/right
    # gsettings set org.gnome.desktop.wm.keybindings maximize "['<Super>Up']"

    # For keyboards that only have a start/stop button for music, like Logitech MX Keys Mini
    # gsettings set org.gnome.settings-daemon.plugins.media-keys next "['<Shift>AudioPlay']"

    # Full-screen with title/navigation bar
    # gsettings set org.gnome.desktop.wm.keybindings toggle-fullscreen "['<Shift>F11']"

    # # Use alt for pinned apps
    # gsettings set org.gnome.shell.keybindings switch-to-application-1 "['<Alt>1']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-2 "['<Alt>2']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-3 "['<Alt>3']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-4 "['<Alt>4']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-5 "['<Alt>5']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-6 "['<Alt>6']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-7 "['<Alt>7']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-8 "['<Alt>8']"
    # gsettings set org.gnome.shell.keybindings switch-to-application-9 "['<Alt>9']"

    # # Use super for workspaces
    # gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-1 "['<Super>1']"
    # gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-2 "['<Super>2']"
    # gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-3 "['<Super>3']"
    # gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-4 "['<Super>4']"
    # gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-5 "['<Super>5']"
    # gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-6 "['<Super>6']"

    # # Reserve slots for custom keybindings
    # gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/']"

    # # Set ulauncher to Super+Space
    # gsettings set org.gnome.desktop.wm.keybindings switch-input-source "@as []"
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'ulauncher-toggle'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'ulauncher-toggle'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Super>space'

    # # Set flameshot (with the sh fix for starting under Wayland) on alternate print screen key
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ name 'Flameshot'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ command 'sh -c -- "flameshot gui"'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ binding '<Control>Print'

    # # Start a new alacritty window (rather than just switch to the already open one)
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ name 'alacritty'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ command 'alacritty'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ binding '<Shift><Alt>2'

    # # Start a new Chrome window (rather than just switch to the already open one)
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ name 'new chrome'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ command 'google-chrome'
    # gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ binding '<Shift><Alt>1'

    # xdg-settings set default-web-browser google-chrome.desktop

    # Install new extensions

    # gext install tophat@fflewddur.github.io
    # gext install space-bar@luchrioh
    # gext install tactile@lundal.io

    # # Compile gsettings schemas in order to be able to set them
    # sudo cp ~/.local/share/gnome-shell/extensions/tactile@lundal.io/schemas/org.gnome.shell.extensions.tactile.gschema.xml /usr/share/glib-2.0/schemas/
    # sudo cp ~/.local/share/gnome-shell/extensions/just-perfection-desktop\@just-perfection/schemas/org.gnome.shell.extensions.just-perfection.gschema.xml /usr/share/glib-2.0/schemas/
    # sudo cp ~/.local/share/gnome-shell/extensions/blur-my-shell\@aunetx/schemas/org.gnome.shell.extensions.blur-my-shell.gschema.xml /usr/share/glib-2.0/schemas/
    # sudo cp ~/.local/share/gnome-shell/extensions/space-bar\@luchrioh/schemas/org.gnome.shell.extensions.space-bar.gschema.xml /usr/share/glib-2.0/schemas/
    # sudo cp ~/.local/share/gnome-shell/extensions/tophat@fflewddur.github.io/schemas/org.gnome.shell.extensions.tophat.gschema.xml /usr/share/glib-2.0/schemas/
    # sudo cp ~/.local/share/gnome-shell/extensions/AlphabeticalAppGrid\@stuarthayhurst/schemas/org.gnome.shell.extensions.AlphabeticalAppGrid.gschema.xml /usr/share/glib-2.0/schemas/
    # sudo glib-compile-schemas /usr/share/glib-2.0/schemas/

    # # Configure Tactile
    # gsettings set org.gnome.shell.extensions.tactile col-0 1
    # gsettings set org.gnome.shell.extensions.tactile col-1 2
    # gsettings set org.gnome.shell.extensions.tactile col-2 1
    # gsettings set org.gnome.shell.extensions.tactile col-3 0
    # gsettings set org.gnome.shell.extensions.tactile row-0 1
    # gsettings set org.gnome.shell.extensions.tactile row-1 1
    # gsettings set org.gnome.shell.extensions.tactile gap-size 32

    # # Configure Just Perfection
    # gsettings set org.gnome.shell.extensions.just-perfection animation 2
    # gsettings set org.gnome.shell.extensions.just-perfection dash-app-running true
    # gsettings set org.gnome.shell.extensions.just-perfection workspace true
    # gsettings set org.gnome.shell.extensions.just-perfection workspace-popup false

    # # Configure Blur My Shell
    # gsettings set org.gnome.shell.extensions.blur-my-shell.appfolder blur false
    # gsettings set org.gnome.shell.extensions.blur-my-shell.lockscreen blur false
    # gsettings set org.gnome.shell.extensions.blur-my-shell.screenshot blur false
    # gsettings set org.gnome.shell.extensions.blur-my-shell.window-list blur false
    # gsettings set org.gnome.shell.extensions.blur-my-shell.panel blur false
    # gsettings set org.gnome.shell.extensions.blur-my-shell.overview blur true
    # gsettings set org.gnome.shell.extensions.blur-my-shell.overview pipeline 'pipeline_default'
    # gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock blur true
    # gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock brightness 0.6
    # gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock sigma 30
    # gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock static-blur true
    # gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock style-dash-to-dock 0

    # # Configure Space Bar
    # gsettings set org.gnome.shell.extensions.space-bar.behavior smart-workspace-names false
    # gsettings set org.gnome.shell.extensions.space-bar.shortcuts enable-activate-workspace-shortcuts false
    # gsettings set org.gnome.shell.extensions.space-bar.shortcuts enable-move-to-workspace-shortcuts true
    # gsettings set org.gnome.shell.extensions.space-bar.shortcuts open-menu "@as []"

    # # Configure TopHat
    # gsettings set org.gnome.shell.extensions.tophat show-icons false
    # gsettings set org.gnome.shell.extensions.tophat show-cpu false
    # gsettings set org.gnome.shell.extensions.tophat show-disk false
    # gsettings set org.gnome.shell.extensions.tophat show-mem false
    # gsettings set org.gnome.shell.extensions.tophat network-usage-unit bits

    # # Configure AlphabeticalAppGrid
    # gsettings set org.gnome.shell.extensions.alphabetical-app-grid folder-order-position 'end'

    # app/com.github.rafostar.Clapper
    # app/org.fedoraproject.MediaWriter
    # app/com.github.tchx84.Flatseal
    # app/io.github.flattool.Ignition
    # app/io.github.flattool.Warehouse
    # app/org.gnome.baobab
    # app/org.gnome.Calculator
    # app/org.gnome.Calendar
    # app/org.gnome.Characters
    # app/org.gnome.clocks
    # app/org.gnome.Connections
    # app/org.gnome.Contacts
    # app/org.gnome.DejaDup
    # app/org.gnome.Papers
    # app/com.mattjakeman.ExtensionManager
    # app/org.gnome.FileRoller
    # app/org.gnome.font-viewer
    # app/org.gnome.Logs
    # app/org.gnome.Loupe
    # app/org.gnome.Maps
    # app/org.gnome.NautilusPreviewer
    # app/org.gnome.World.PikaBackup
    # app/org.gnome.TextEditor
    # app/org.gnome.Weather
    # app/io.missioncenter.MissionCenter
    # app/org.mozilla.firefox
    # app/org.mozilla.Thunderbird
    # app/org.gustavoperedo.FontDownloader
    # runtime/org.gtk.Gtk3theme.adw-gtk3/x86_64/3.22
    # runtime/org.gtk.Gtk3theme.adw-gtk3-dark/x86_64/3.22

    #     # Reveal week numbers in the Gnome calendar
    #     gsettings set org.gnome.desktop.calendar show-weekdate true
}

# ulauncher_install() {
#     sudo add-apt-repository universe -y
#     sudo add-apt-repository ppa:agornostal/ulauncher -y
#     sudo apt update -y
#     sudo apt install -y ulauncher

#     # Start ulauncher to have it populate config before we overwrite
#     mkdir -p ~/.config/autostart/
#     cp ~/.local/share/omakub/configs/ulauncher.desktop ~/.config/autostart/ulauncher.desktop
#     gtk-launch ulauncher.desktop >/dev/null 2>&1
#     sleep 2 # ensure enough time for ulauncher to set defaults
#     cp ~/.local/share/omakub/configs/ulauncher.json ~/.config/ulauncher/settings.json
# }

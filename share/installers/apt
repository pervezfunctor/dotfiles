#!/usr/bin/env bash

export DEBIAN_FRONTEND=noninteractive

function si() {
    local found=()
    local not_found=()

    for pkg in "$@"; do
        if apt-cache show "$pkg" >/dev/null 2>&1; then
            found+=("$pkg")
        else
            not_found+=("$pkg")
        fi
    done

    sudo apt-get -qq -y install "${found[@]}"

    for pkg in "${not_found[@]}"; do
        warn "Package $pkg not found in apt repository"
    done
}

pacstall_install() {
    has_cmd pacstall && return 1

    sudo bash -c "$(curl -fsSL https://pacstall.dev/q/install)"
}

update_packages() {
    slog "Updating Ubuntu"

    if ! { sudo apt-get -qq update && sudo apt-get -qq upgrade -y; }; then
        err_exit "apt-get update/upgrade failed, quitting"
    fi
}

ubuntu_packages() {
    update_packages

    slog "Installing packages"

    si git-core gh git-delta unzip wget curl net-tools iproute2 nmap \
        trash-cli tar stow gcc make file wl-clipboard tree bat ripgrep \
        zoxide fd-find htop sd bat gawk starship libsecret-tools dialog whiptail

    is_ubuntu && si eza

    if is_plucky; then
        si fzf tealdeer gum
    else
        pkgx_install
    fi

    slog "Installing packages done!"

    pixi_install

    slog "Installing pixi packages"
    pi fzf lazygit yazi tealdeer

    has_cmd tldr && tldr --update

    slog "Installing pixi packages done!"
}

# shellcheck disable=SC2120
debian_locale_install() {
    LOCALE_TO_USE=${1:-en_US.UTF-8}

    if sudo apt install -y --reinstall locales &&
        sudo sed -i "s/^# *$LOCALE_TO_USE UTF-8/$LOCALE_TO_USE UTF-8/" /etc/locale.gen &&
        sudo locale-gen &&
        sudo update-locale LANG="$LOCALE_TO_USE" LC_ALL="$LOCALE_TO_USE"; then
        slog "Locales fixed. Current system locale:" && locale
    else
        warn "Failed to fix locales. Please check your locale settings."
        return 1
    fi
}
# or
locale-setup() {
    slog "Setting locale to en_US.UTF-8..."
    si locales
    sudo locale-gen en_US.UTF-8
    sudo update-locale LANG=en_US.UTF-8

    slog "Setting keyboard layout to US..."
    sudo localectl set-keymap us
    sudo localectl set-x11-keymap us

    echo "export LANGUAGE=en" | sudo tee -a /etc/default/locale
    echo "export COUNTRY=US" | sudo tee -a /etc/default/locale

    # Force console keymap now (for immediate effect)
    sudo loadkeys us

    slog "Configuration complete. You may need to reboot for all changes to take effect."
}

debian_packages() {
    update_packages
    debian_locale_install
    slog "Installing packages"

    si git-core gh unzip wget curl trash-cli net-tools iproute2 nmap \
        tar stow gcc make file tree bat ripgrep zoxide fd-find htop sd gawk \
        wl-clipboard libsecret-tools dialog whiptail

    slog "Installing packages done!"

    pkgx_install
    pixi_install

    pi fzf yazi tealdeer git-delta eza bat starship lazygit just

    has_cmd tldr && tldr --update

    slog "Installing pixi packages done!"
}

core_install() {
    update_packages
    is_debian && debian_locale_install

    slog "Installing core packages"

    is_ubuntu && software-properties-common
    si apt-transport-https ca-certificates gpg curl \
        wget git-core trash-cli tar unzip tree file

    if is_plucky || is_trixie; then
        si stow
    else
        pkgx_install
    fi

    slog "Core packages installation done!"
}

sys_python_install() {
    slog "Installing python"

    si python3 python3-venv python3-virtualenv python3-pip python3-setuptools \
        python3-wheel python-is-python3 pipx

    pipx install uv

    slog "Python installation done!"

    cmd_check uv
}

snap_install() {
    has_cmd snap && return 0

    slog "Installing snap..."
    si snapd
    sudo systemctl enable --now snapd.socket
    sudo systemctl enable --now snapd

    sudo snap install core
    slog "snap installation done!"
}

essential_install() {
    slog "Installing essential packages"

    pkgx_install
    sys_python_install

    if [ -d /run/systemd/system ]; then
        snap_install
    fi

    si zip unar micro nala p7zip libreadline-dev libsqlite3-dev whiptail just \
        libffi-dev libbz2-dev liblzma-dev net-tools iproute2 nmap dialog \
        libsecret-tools build-essential command-not-found libfuse2 zstd gawk

    slog "Essential packages installation done!"
}

# sudo apt-get -qq -y install \
#   build-essential pkg-config autoconf bison clang rustc \
#   libssl-dev libreadline-dev zlib1g-dev libyaml-dev libreadline-dev libncurses5-dev libffi-dev libgdbm-dev libjemalloc2 \
#   libvips imagemagick libmagickwand-dev mupdf mupdf-tools gir1.2-gtop-2.0 gir1.2-clutter-1.0 \
#   redis-tools sqlite3 libsqlite3-0 libmysqlclient-dev libpq-dev postgresql-client postgresql-client-common wl-clipboard

cli-slim_install() {
    si tmux zsh git bat ripgrep zoxide eza gh shellcheck htop shfmt jq
    is_plucky && si fzf starship gum git-delta
}

cli_install() {
    slog "Installing cli tools using apt"

    local base_pkgs=(tmux pkg-config urlview zsh git plocate sd gdu bat
        hyperfine fd-find ripgrep zoxide eza gh shellcheck htop shfmt jq)

    local plucky_pkgs=()
    is_plucky && plucky_pkgs=(fzf ugrep tealdeer starship gum git-delta direnv yq)

    si "${base_pkgs[@]}" "${plucky_pkgs[@]}"

    has_cmd tldr && tldr --update

    slog "cli tools installation done!"
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb g++ libboost-all-dev catch2 clang llvm clang-tidy clang-format \
        clang-tools libclang-dev clangd doxygen graphviz ccache cppcheck \
        pre-commit valgrind systemtap ltrace strace lldb lld

    if has_cmd pixi; then
        pis cmake
    elif has_cmd brew; then
        bis cmake
    else
        cmake_install
    fi
    conan_install

    cmd_check gcc g++ gdb clang clang-tidy clang-format
    cmd_check cmake conan

    slog "C++ installation done!"
}

vscode_bin_install() {
    has_cmd code && return 0

    slog "Installing vscode"

    if ! grep -q "https://packages.microsoft.com/repos/code stable main" /etc/apt/sources.list.d/vscode.list 2>/dev/null; then
        echo "code code/add-microsoft-repo boolean true" | sudo debconf-set-selections

        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
        sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg

        echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list >/dev/null

        rm -f packages.microsoft.gpg
    fi

    sudo apt-get -qq update
    si code

    slog "vscode installation done!"

    cmd_check code
}

windsurf_install() {
    has_cmd windsurf && return 0

    slog "Installing windsurf"

    # first ceck if it's already added
    if ! [ -f /etc/apt/sources.list.d/windsurf.list ]; then
        curl -fsSL "https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/windsurf.gpg" | sudo gpg --dearmor -o /usr/share/keyrings/windsurf-stable-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/windsurf-stable-archive-keyring.gpg arch=amd64] https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/apt stable main" | sudo tee /etc/apt/sources.list.d/windsurf.list >/dev/null
    fi

    sudo apt-get -qq update
    si windsurf

    slog "windsurf installation done!"
}

terminal_bin_install() {
    has_cmd ghostty && return 1

    slog "Installing terminal"

    if has_cmd snap; then
        snap install ghostty --classic
    else
        si kitty
    fi

    slog "terminal installation done!"
}

ui_install() {
    slog "Installing ui"
    si chromium-browser gnome-keyring wl-clipboard flatpak

    flathub_install

    terminal_bin_install
    vscode_bin_install
    apps_install

    slog "ui installation done!"
}

vm-ui_install() {
    slog "Installing virt ui packages"

    si gnome-boxes
    has_cmd virt-install && si virt-manager virt-viewer

    slog "virt ui packages installation done!"
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-networkmanager cockpit-packagekit \
        cockpit-sosreport cockpit-pcp cockpit-podman cockpit-storaged \
        cockpit-system

    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

vm_install() {
    si libvirt-daemon-system qemu-system-x86 virtinst bridge-utils \
        virgl-server qemu-utils spice-client-gtk spice-vdagent \
        cloud-image-utils libguestfs-tools libosinfo-bin

    libvirt_confstall

    cockpit_install
}

incus_install() {
    has_cmd incus && return 1

    slog "Installing incus"

    # Check if we need to add backports for newer QEMU
    if ! apt-cache policy qemu-system-x86 | grep -q "Candidate: 1:8.0"; then
        slog "Adding backports for newer QEMU packages..."

        # Determine Debian/Ubuntu version
        if grep -q "Debian" /etc/os-release; then
            # For Debian
            sudo apt-get -qq install -y software-properties-common
            sudo add-apt-repository -y "deb http://deb.debian.org/debian $(lsb_release -cs)-backports main"
            sudo apt-get -qq update
            si -t "$(lsb_release -cs)-backports" qemu-system-x86 qemu-utils
        else
            # For Ubuntu
            sudo add-apt-repository -y ppa:incus/stable
            sudo apt-get -qq update
            si qemu-system-x86 qemu-utils
        fi
    else
        si qemu-system-x86 qemu-utils
    fi

    si incus bridge-utils
    incus_confstall

    slog "incus installation done!"
}

distrobox_install() {
    has_cmd distrobox && return 1

    slog "Installing distrobox"

    si podman podman-toolbox podman-compose
    slog "podman installation done!"

    si buildah distrobox

    slog "distrobox installation done!"
}

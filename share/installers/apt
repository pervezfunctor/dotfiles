#! /usr/bin/env bash

export DEBIAN_FRONTEND=noninteractive

si() {
    for p in "$@"; do
        slog "Installing package $p"
        sudo apt-get -qq -y install "$p"
    done
}

pacstall_install() {
    has_cmd pacstall && return 1

    sudo bash -c "$(curl -fsSL https://pacstall.dev/q/install)"
}

update_packages() {
    slog "Updating"

    if ! { sudo apt-get -qq update && sudo apt-get -qq upgrade -y; }; then
        err_exit "apt-get update/upgrade failed, quitting"
    fi
}

ubuntu_packages() {
    update_packages

    DEBIAN_FRONTEND=noninteractive si git gh git-delta unzip wget curl \
        trash-cli tar stow gcc make file just tree-sitter-cli zsh tmux \
        tree bat eza ripgrep zoxide fd-find htop sd bat emacs-nox

    # si golang-go fzf
    # go install github.com/charmbracelet/gum@latest

    pixi_install
    pi fzf lazygit yazi tealdeer
}

debian_packages() {
    update_packages

    #  git-delta eza just treesitter-cli fzf
    DEBIAN_FRONTEND=noninteractive si git gh unzip wget curl trash-cli tar \
        stow gcc make file zsh tmux \
        tree bat ripgrep zoxide fd-find htop sd emacs-nox

    pixi_install
    pi fzf lazygit yazi tealdeer git-delta just eza bat
}

core_install() {
    update_packages

    si software-properties-common apt-transport-https ca-certificates gpg
    si curl wget git-core trash-cli tree command-not-found file
    si tar unzip cmake build-essential stow libfuse2 zstd
}

sys_python_install() {
    slog "Installing python"

    si python3 python3-venv python3-virtualenv python3-pip python3-setuptools
    si python3-wheel python-is-python3 pipx

    pipx install uv

    slog "Python installation done!"

    cmd_check uv
}

snap_install() {
    has_cmd snap && return 0

    slog "Installing snap..."
    si snapd
    sudo snap install core

    slog "snap installation done!"
}

essential_install() {
    slog "Installing essential packages"

    core_install
    sys_python_install

    si zip unar micro nala p7zip gawk
    si libreadline-dev libsqlite3-dev libffi-dev libbz2-dev liblzma-dev

    slog "Essential packages installation done!"
}

# sudo apt-get -qq -y install \
#   build-essential pkg-config autoconf bison clang rustc \
#   libssl-dev libreadline-dev zlib1g-dev libyaml-dev libreadline-dev libncurses5-dev libffi-dev libgdbm-dev libjemalloc2 \
#   libvips imagemagick libmagickwand-dev mupdf mupdf-tools gir1.2-gtop-2.0 gir1.2-clutter-1.0 \
#   redis-tools sqlite3 libsqlite3-0 libmysqlclient-dev libpq-dev postgresql-client postgresql-client-common wl-clipboard

cli_install() {
    slog "Installing cli tools using apt"

    # old fzf doesn't support --bash
    # old stow version does not work on dot-* folders;
    sudo apt purge -y stow fzf

    # ugrep tealdeer
    si tmux pkg-config urlview zsh git plocate

    if ! has_cmd brew; then
        warn "using brew for newer versions"

        si sd gdu bat hyperfine fd-find fzf ripgrep zoxide
        si gh shellcheck just htop shfmt tree-sitter-cli
        gh extension install github/gh-copilot
    fi
}

cpp_install() {
    slog "Installing C++"

    si gcc gdb g++ libboost-all-dev catch2
    si clang llvm clang-tidy clang-format clang-tools libclang-dev clangd
    si doxygen graphviz ccache cppcheck pre-commit
    si valgrind systemtap ltrace strace lldb lld

    cmake_install
    conan_install

    cmd_check gcc g++ gdb clang clang-tidy clang-format
    cmd_check cmake conan

    slog "C++ installation done!"
}

vscode_bin_install() {
    has_cmd code && return 0

    if ! grep -q "https://packages.microsoft.com/repos/code stable main" /etc/apt/sources.list.d/vscode.list 2>/dev/null; then
        echo "code code/add-microsoft-repo boolean true" | sudo debconf-set-selections

        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
        sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg

        echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list >/dev/null

        rm -f packages.microsoft.gpg
    fi

    sudo apt-get -qq update
    si code

    cmd_check code
}

windsurf_install() {
    has_cmd windsurf && return 0

    slog "Installing windsurf"

    # first ceck if it's already added
    if ! [ -f /etc/apt/sources.list.d/windsurf.list ]; then
        curl -fsSL "https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/windsurf.gpg" | sudo gpg --dearmor -o /usr/share/keyrings/windsurf-stable-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/windsurf-stable-archive-keyring.gpg arch=amd64] https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/apt stable main" | sudo tee /etc/apt/sources.list.d/windsurf.list >/dev/null
    fi

    sudo apt-get -qq update
    si windsurf

    slog "windsurf installation done!"
}

terminal_bin_install() {
    if has_cmd snap; then
        snap install ghostty --classic
    else
        si kitty
    fi
}

ui_install() {
    si chromium-browser virt-manager gnome-keyring xsel xclip wl-clipboard

    terminal_bin_install
    vscode_bin_install
    apps_install
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    si cockpit cockpit-machines cockpit-networkmanager cockpit-packagekit
    si cockpit-sosreport cockpit-pcp cockpit-podman cockpit-storaged
    si cockpit-system
    sudo systemctl enable --now cockpit.socket

    slog "cockpit installation done!"
}

podman_install() {
    si podman podman-toolbox podman-compose
}

vm_install() {
    si libvirt-daemon
    sudo systemctl enable --now libvirtd
}

incus_install() {
    si incus
    incus_config_install
}

ct_install() {
    incus_install
    docker_install
    portainer_install
    podman_install
    cockpit_install

    si buildah distrobox
}

virt_install() {
    ct_install
    vm_install

    code_server_install
}

#! /usr/bin/env bash

{

webi_install() {
    has_cmd webi && return 0
    has_cmd ~/.local/bin/webi && return 0

    curl -sS https://webi.sh/webi | sh
    source "$XDG_CONFIG_HOME/envman/load.sh"
    webi pathman

    cmd_check webi
}

kitty_install() {
    is_linux || return 1

    has_cmd kitty && return 1
    has_cmd ~.local/kitty.app/bin/kitty && return 1

    curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin launch=n

    # force link
    ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/

    # smd ~/.local/share/applications
    # safe-cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
    # safe-cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/

    # echo 'kitty.desktop' > ~/.config/xdg-terminals.list
}

mise_install() {
    if has_cmd mise || has_cmd ~/.local/bin/mise; then
        eval "$($HOME/.local/bin/mise activate bash)"
        return 0
    fi

    slog "Installing mise"
    curl https://mise.run | MISE_QUIET=1 sh
    eval "$($HOME/.local/bin/mise activate bash)"

    mise use -g usage
    mise settings experimental=true
    mise use -g cargo-binstall

    cmd_check mise
}

appman_install() {
    is_mac && return 0
    has_cmd appman && return 0

    slog "Installing appman"

    cd
    rm -f ./AM-INSTALLER
    wget -q https://raw.githubusercontent.com/ivan-hc/AM/main/AM-INSTALLER
    chmod a+x ./AM-INSTALLER
    echo 2 | ./AM-INSTALLER
    rm -f ./AM-INSTALLER

    slog "appman installation done!"

    cmd_check appman
}

amm_shell_install() {
    slog "shell tools with appman"

    ami tmux doggo gping procs nvim atuin gh

    slog "shell tools with appman done!"
}

webi_shell_install() {
    slog "shell tools with webi"

    wis shfmt gh dotenv bat curlie delta fd jq lsd sd yq

    slog "shell tools with webi done!"
}

mise_shell_install() {
    slog "shell tools with mise"

    mis tree-sitter just lazygit lazydocker starship ripgrep
    mis shellcheck gum xh bottom fzf hyperfine
    mis cheat duf eza dust zoxide gdu choose yazi
    mi superfile
    has_cmd nu || mise use -g cargo:nu

    slog "shell tools with mise done!"
}

flathub_install() {
    has_cmd flatpak || si flatpak

    if has_cmd flatpak; then
        slog "Adding flathub remote"
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
    else
        warn "flatpak not installed! Ignoring flathub config."
    fi
}

vscode_flatpak_install() {
    fpi com.visualstudio.code
    flatpak install com.visualstudio.code.tool.podman
    alias code="flatpak run com.visualstudio.code"
    cat $DOT_DIR/extras/vscode/extensions/default | xargs -L 1 flatpak run com.visualstudio.code --install-extension
    vscode_flatpak_config_install
}

apps_install() {
    if ! has_cmd flatpak; then
        warn "flatpak not installed, skipping flatpak apps"
        return 1
    fi

    slog "Installing flatpak apps"

    fpi org.telegram.desktop
    fpi org.deluge_torrent.deluge
    fpi us.zoom.Zoom
    fpi org.wezfurlong.wezterm
    fpi io.github.shiftey.Desktop
    fpi io.github.dvlv.boxbuddyrs
    fpi md.obsidian.Obsidian
    fpi flathub io.github.getnf.embellish

    alias wezterm="flatpak run org.wezfurlong.wezterm"

    slog "Flatpak apps installation done!"
}

more_apps_install() {
    fpi app.devsuite.Ptyxis
    fpi org.wireshark.Wireshark
    fpi sh.cider.Cider
    fpi com.bitwarden.desktop
    fpi dev.neovide.neovide
    fpi io.dbeaver.DBeaverCommunity
    fpi io.podman_desktop.PodmanDesktop
    fpi io.github.zyedidia.micro
    # fpi com.jetbrains.CLion
    # fpi com.google.Chrome
}

webi-shell_install() {
    webi node golang go-essentials shellcheck shfmt pathman
    webi bat curlie delta jq lsd rg gh fd sd
    # webi caddy xcaddy gitdeploy gitea rclone serviceman syncthing k9s kubectx kubens
    # webi pyenv
    # webi fd git watchexec rustlang
    # sudo apt install -y libreadline-dev libsqlite3-dev libffi-dev libbz2-dev liblzma-dev
}

nvim_config_install() {
    slog "nvim config"

    omv $XDG_CONFIG_HOME/nvim $XDG_CONFIG_HOME/nvim.bak
    omv ~/.local/share/nvim ~/.local/share/nvim.bak
    omv ~/.local/state/nvim ~/.local/state/nvim.bak
    omv ~/.cache/nvim ~/.cache/nvim.bak

    stowdf nvim
    nvim --headless "+Lazy! sync" +qa

    slog "nvim config done!"
}

starship_install() {
    has_cmd starship && return 0

    curl -sS https://starship.rs/install.sh | sh -s -- -y
}

bash_config_install() {
    slog "Configuring bash"

    if ! grep -q .local/share/ilm/bashrc ~/.bashrc; then
        echo "source ~/.local/share/ilm/bashrc" >> ~/.bashrc
    fi

    slog "bash config done!"
}

vscode_extensions_install() {
    slog "Installing vscode extensions"
    cat $DOT_DIR/extras/vscode/extensions/default | xargs -L 1 code --install-extension
    slog "vscode extensions installation done!"
}

vscode_flatpak_config_install() {
    slog "vscode config"

    smd ~/.var/app/com.visualstudio.code/config/Code/User
    safe-cp $DOT_DIR/extras/vscode/flatpak-settings.json ~/.var/app/com.visualstudio.code/config/Code/User/settings.json

    slog "vscode config done!"
}

vscode_config_install() {
    slog "vscode config"

    if is_mac; then
        safe-cp $DOT_DIR/extras/vscode/minimal-settings.json "$HOME/Library/Application Support/Code/User/settings.json"
    else
        smd $XDG_CONFIG_HOME/Code/User
        safe-cp $DOT_DIR/extras/vscode/minimal-settings.json $XDG_CONFIG_HOME/Code/User/settings.json
    fi

    slog "vscode config done!"
}

zsh_config_install() {
    slog "zsh config"

    srm $HOME/.zshrc
    smd $HOME/.zsh
    sclone --depth=1 https://github.com/sindresorhus/pure.git $HOME/.zsh/pure
    sclone --depth=1 https://github.com/djui/alias-tips.git $HOME/.zsh/alias-tips
    stowdf zsh

    slog "zsh config done!"
}

tmux_config_install() {
    slog "tmux config"

    srm $XDG_CONFIG_HOME/tmux
    smd $XDG_CONFIG_HOME/tmux
    stownf tmux

    slog "tmux config done!"
}

incus_config_install() {
    slog "incus config"

    if ! has_cmd incus; then
        warn "incus not installed, skipping incus config"
        return 0
    fi
    slog "incus config"

    sudo incus admin init --minimal
    sudo usermod -aG incus $USER

    if has_cmd firewalld; then
        sudo firewall-cmd --zone=trusted --change-interface=incusbr0 --permanent
        sudo firewall-cmd --reload
    fi

    slog "incus config done!"
}

treesitter_install() {
    has_cmd tree-sitter && return 0

    if has_cmd cargo; then
      cargo install tree-sitter-cli
    elif has_cmd pnpm; then
      pnpm install -g tree-sitter-cli
    elif has_cmd npm; then
      npm install -g tree-sitter-cli
    else
      slog "tree-sitter-cli not installed"
    fi

    cmd_check tree-sitter
}

neovim_install() {
    is_mac && return 0

    has_cmd nvim && return 0

    slog "Installing neovim..."

    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage

    ./nvim.appimage --appimage-extract

    sudo mv squashfs-root /
    sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
    frm nvim.appimage

    cmd_check nvim

    treesitter_install

    si luarocks

    if has_cmd pnpm; then
        pnpm install -g neovim
    elif has_cmd npm; then
        npm install -g neovim
    fi

    has_cmd pip && pip install --user neovim

    slog "Neovim installation done!"

    cmd_check nvim
}

micro_install() {
    has_cmd micro && return 0

    slog "Installing micro"

    curl https://getmic.ro | bash
    mv micro $HOME/.local/bin/

    slog "micro installation done!"

    cmd_check micro
}

rust_install() {
    file_exists "$HOME/.cargo/env" && source "$HOME/.cargo/env"

    has_cmd rustup && return 0

    slog "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"

    slog "rust installation done!"

    cmd_check rustc
}

miniconda_install() {
    has_cmd conda && return 0
    dir_exists ~/miniconda3 && return 0

    slog "Installing miniconda"

    smd ~/miniconda3
    download_to https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
    frm ~/miniconda3/miniconda.sh
    has_cmd bash && ~/miniconda3/bin/conda init bash
    has_cmd zsh && ~/miniconda3/bin/conda init zsh

    slog "miniconda installation done!"

    cmd_check conda
}

pnpm_install() {
    has_cmd pnpm && return 0

    slog "Installing pnpm"
    curl -sSL https://get.pnpm.io/install.sh | sh -

    slog "Installing node"
    pnpm env use --global latest

    has_cmd bash && pnpm install-completion bash
    has_cmd zsh && pnpm install-completion zsh

    slog "pnpm/node installation done!"

    cmd_check pnpm
}

web_install() {
    slog "Installing npm packages globally"
    pnpm install -g ndb @antfu/ni
    pnpm install -g tsx vite-node zx turbo

    if ! grep "fs.inotify.max_user_watches" /etc/sysctl.conf > /dev/null; then
        echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf > /dev/null && sudo sysctl -p
    fi

    if is_apt; then
        pnpm dlx playwright install-deps
        pnpm dlx playwright install
    fi
}

brew_install() {
    has_cmd brew && return 0

    slog "Installing homebrew"
    /bin/bash -c "$(curl -sSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    slog "homebrew installation done!"

    if has_cmd /opt/homebrew/bin/brew; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif has_cmd /home/linuxbrew/.linuxbrew/bin/brew; then
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    else
        warn "Homebrew not installed properly!"
    fi

    cmd_check brew
}

monaspace_install() {
    file_exists ~/.local/share/fonts/MonaspaceRadon-Regular.otf && return 0

    smd ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
    wget -nv https://github.com/githubnext/monaspace/releases/download/v1.000/monaspace-v1.000.zip -O /tmp/monaspace.zip
    unzip -qq -d /tmp/monaspace -o /tmp/monaspace.zip

    cp /tmp/monaspace/monaspace-*/fonts/otf/* ~/.local/share/fonts
    cp /tmp/monaspace/monaspace-*/fonts/variable/* ~/.local/share/fonts

    frm /tmp/monaspace /tmp/monaspace.zip
}

cascadia_nerd_font_install() {
    if ! file_exists ~/.local/share/fonts/CaskaydiaMonoNerdFont-Regular.ttf; then
        frm /tmp/cascadia /tmp/CascadiaMono.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/CascadiaMono.zip -O /tmp/CascadiaMono.zip
        unzip -qq -d /tmp/cascadia -o /tmp/CascadiaMono.zip
        cp /tmp/cascadia/*.ttf ~/.local/share/fonts
        frm /tmp/cascadia /tmp/CascadiaMono.zip
    fi
}

monaspace_nerd_font_install() {
    if ! file_exists ~/.local/share/fonts/MonaspiceRnNerdFont-Regular.otf; then
        frm /tmp/monaspace /tmp/Monaspace.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Monaspace.zip -O /tmp/Monaspace.zip
        unzip -qq -d /tmp/monaspace -o /tmp/Monaspace.zip
        cp /tmp/monaspace/*.otf ~/.local/share/fonts
        frm /tmp/monaspace /tmp/Monaspace.zip
    fi

}

jetbrains_nerd_font_install() {
    if ! file_exists ~/.local/share/fonts/JetBrainsMonoNLNerdFontPropo-Regular.ttf; then
        frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
        wget -nv https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip -O /tmp/jetbrains-mono.zip
        unzip -qq -d /tmp/jetbrains-mono -o /tmp/jetbrains-mono.zip
        cp /tmp/jetbrains-mono/*.ttf ~/.local/share/fonts
        frm /tmp/jetbrains-mono/tmp/jetbrains-mono.zip
    fi
}

nerd_font_install() {
    smd ~/.local/share/fonts

    cascadia_nerd_font_install
    jetbrains_nerd_font_install
    monaspace_nerd_font_install
}

fonts_install() {
    if ! has_cmd wget || ! has_cmd unzip; then
        warn "wget and unzip not installed, skipping fonts"
        return 1
    fi

    slog "Installing fonts"

    monaspace_install
    nerd_font_install

    if is_apt; then
        si fonts-cascadia-code fonts-jetbrains-mono
    elif is_rh; then
        is_fedora || si cascadia-fonts-all jetbrains-mono-fonts-all
    fi

    slog "Fonts installation done!"
}

doom_install() {
    dir_exists $XDG_CONFIG_HOME/doom && return 0

    slog "Installing doom"

    sclone --depth=1 https://github.com/doomemacs/doomemacs $XDG_CONFIG_HOME/emacs
    omv $XDG_CONFIG_HOME/doom $XDG_CONFIG_HOME/doom.backup
    sclone https://github.com/pervezfunctor/doomemacs-config $XDG_CONFIG_HOME/doom

    slog "Configure doom"
    doom sync
    doom env

    slog "doom installation done!"

    has_cmd update-locale && sudo update-locale LANG=en_US.UTF8
}

emacs_install() {
    slog "Installing emacs"

    if is_apt; then
        echo "postfix postfix/main_mailer_type select No configuration" | sudo debconf-set-selections
        si -y --no-install-recommends emacs
    elif is_mac; then
        brew tap railwaycat/emacsmacport
        bi emacs-mac --with-modules
        ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications/Emacs.app
    else
        si emacs
    fi

    slog "emacs installation done!"

    cmd_check emacs
}

git_conf() {
    git config --global "$@"
}

git_config_install() {
    slog "Configuring git"

    is_wsl && git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager-core.exe"

    # stowdf git

    git_conf init.defaultBranch main
    git_conf pull.ff only
    git_conf delta.navigate true
    git_conf delta.line-numbers true
    git_conf delta.syntax-theme "Monokai Extended"
    git_conf delta.side-by-side true
    git_conf merge.conflictStyle diff3
    git_conf interactive.diffFilter "delta --color-only"
    git_conf fetch.prune true

    if [[ "$USER" == "pervez" ]]; then
        git_conf user.name "Pervez Iqbal"
        git_conf user.email "pervefunctor@gmail.com"
    fi

    slog "git configuration done!"
}

go_install() {
    if ! has_cmd go; then
        slog "Installing go"

        sudo rm -rf /usr/local/go
        VERSION=$(curl -sSL "https://go.dev/VERSION?m=text" | head -n 1)
        frm /tmp/${VERSION}.linux-amd64.tar.gz
        wget -nv "https://dl.google.com/go/${VERSION}.linux-amd64.tar.gz" -O /tmp/"${VERSION}.linux-amd64.tar.gz"
        slog "Untar ${VERSION}.linux-amd64.tar.gz"
        sudo tar -C /usr/local -xzf /tmp/"${VERSION}.linux-amd64.tar.gz"
        frm /tmp/${VERSION}.linux-amd64.tar.gz
        export PATH=$PATH:/usr/local/go/bin

        slog "go installation done!"

        cmd_check go
    fi

    slog "Installing go dev tools..."

    go install golang.org/x/lint/golint@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/tools/gopls@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/ramya-rao-a/go-outline@latest
    go install github.com/acroca/go-symbols@latest
    go install github.com/mdempsky/gocode@latest
    go install github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest
    go install github.com/cweill/gotests/gotests@latest
    go install github.com/fatih/gomodifytags@latest
    go install github.com/josharian/impl@latest
    go install github.com/haya14busa/goplay/cmd/goplay@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/davidrjenni/reftools/cmd/fillstruct@latest
    go install github.com/godoctor/godoctor@latest
    go install github.com/zmb3/gogetdoc@latest
    go install github.com/jstemmer/gotags@latest
    go install github.com/fatih/motion@latest
    go install github.com/klauspost/asmfmt/cmd/asmfmt@latest
    go install github.com/kisielk/errcheck@latest
    go install mvdan.cc/gofumpt@latest
    go install github.com/fatih/gomodifytags@latest

    slog "go dev tools installation done!"
}

docker_common_install() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping docker post install configuration"
        return 1
    fi

    if has_cmd brew; then
        bi jesseduffield/lazydocker/lazydocker
        bi lazydocker
    fi

    sudo groupadd docker
    sudo usermod -aG docker ${USER}

    sudo systemctl --now enable docker
    sudo systemctl --now enable containerd
}

docker_install() {
    has_cmd docker && return 0

    slog "Installing docker..."

    frm /tmp/get-docker.sh
    curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
    sudo sh /tmp/get-docker.sh
    frm /tmp/get-docker.sh

    docker_common_install

    slog "Docker installation done!"
}

code_server_install() {
    has_cmd code-server && return 1

    slog "Installing code-server"
    curl -sSL https://code-server.dev/install.sh | sh
    slog "code-server installation done!"

    # slog "Installing coder"
    # curl -L https://coder.com/install.sh | sh
    # slog "coder installation done!"
}

conan_install() {
    has_cmd conan && return 1

    slog "Installing conan"
    pipx install conan
    slog "conan installation done!"

    cmd_check conan
}

cmake_install() {
    has_cmd /usr/local/bin/cmake && return 1

    CMAKE_VERSION="3.28.3"
    ARCH=$(uname -m)
    CMAKE_BINARY_NAME="cmake-${CMAKE_VERSION}-linux-${ARCH}.sh"
    CMAKE_CHECKSUM_NAME="cmake-${CMAKE_VERSION}-SHA-256.txt"

    slog "Installing latest cmake"
    TMP_DIR=$(mktemp -d -t cmake-XXXXXXXXXX)
    cd "${TMP_DIR}"
    curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_BINARY_NAME}" -O
    curl -sSL "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_CHECKSUM_NAME}" -O

    sha256sum -c --ignore-missing "${CMAKE_CHECKSUM_NAME}"
    sudo mkdir /opt/cmake
    sudo sh "${TMP_DIR}/${CMAKE_BINARY_NAME}" --prefix=/opt/cmake --skip-license

    sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
    sudo ln -s /opt/cmake/bin/ctest /usr/local/bin/ctest
    frm "${TMP_DIR}"

    slog "cmake installation done!"

    cmd_check cmake
}

brew_shell_install() {
    # bi ffmpeg sevenzip poppler imagemagick font-symbols-only-nerd-font
    # bi -q glances

    slog "shell tools with brew"

    bis jq tree-sitter just lsd shfmt gh tldr shellcheck gum lazydocker stow neovim
    bis cheat curlie lazygit duf sd xh eza doggo atuin direnv dust
    bis procs fzf fd hyperfine zoxide starship pixi yq ugrep yazi

    # bis nushell gping ncdu httpie

    has_cmd spf || bi superfile
    has_cmd gdu || has_cmd gdu-go || bi gdu
    has_cmd rg || bi ripgrep
    has_cmd batcat || has_cmd bat || bi bat
    has_cmd delta || bi git-delta
    has_cmd choose || bi choose-rust
    has_cmd btm || bi bottom
    has_cmd tv || bi television
    has_cmd nu || bi nushell
    bi bash-preexec tealdeer
    # bi glab

    alias gdu=gdu-go

    slog "shell tools with brew done!"
}

go_shell_install() {
    has_cmd go || return 1

    slog "shell tools with go"

    has_cmd cheat || go install github.com/cheat/cheat/cmd/cheat@latest
    has_cmd curlie || go install github.com/rs/curlie@latest
    has_cmd lazygit || go install github.com/jesseduffield/lazygit@latest
    has_cmd gdu || go install github.com/dundee/gdu/v5/cmd/gdu@latest
    has_cmd duf || go install github.com/muesli/duf@latest

    slog "shell tools with go done!"

    cmd_check cheat curlie lazygit gdu duf
}

rust_shell_install() {
    has_cmd rustup || return 1

    rustup update stable

    slog "shell tools with rust"

    has_cmd starship || cargoi starship
    has_cmd delta || cargoi git-delta
    has_cmd dust || cargoi du-dust
    has_cmd choose || cargoi choose
    has_cmd sd || cargoi sd
    has_cmd procs || cargoi procs
    has_cmd btm || cargoi bottom
    has_cmd xh || cargoi xh
    has_cmd lsd || cargoi lsd

    slog "shell tools with rust done!"

    cmd_check starship delta dust choose sd procs btm xh lsd
}

pnpm_shell_install() {
    has_cmd pnpm || return 1

    slog "shell tools with pnpm"
    pnpm install -g degit neovim
    has_cmd tldr || pnpm install -g tldr
    has_cmd gtop || pnpm install -g gtop
    cmd_check degit tldr gtop
}

shell_install() {
    brew_install
    webi_install
    mise_install
    appman_install

    cli_install

    webi_shell_install
    brew_shell_install
    # appman_shell_install
    # mise_shell_install

    starship_install
}

alacritty_config_install() {
    slog "alacritty config"
    stowdf alacritty
    slog "alacritty config done!"
}

wezterm_config_install() {
    slog "wezterm config"
    stowdf wezterm
    slog "wezterm config done!"
}

kitty_config_install() {
    slog "kitty config"
    stowdf kitty
    slog "kitty config done!"
}

ghostty_config_install() {
    slog "ghostty config"
    stowdf ghostty
    slog "ghostty config done!"
}

bin_config_install() {
    slog "bin config"
    stownf bin
    slog "bin config done!"
}

share_config_install() {
    slog "bin config"
    stownf share
    slog "bin config done!"
}

atuin_config_install() {
    slog "atuin config"
    srm $XDG_CONFIG_HOME/atuin/config.toml
    stowdf atuin
    slog "atuin config done!"
}

rofi_config_install() {
    slog "rofi config"
    srm $XDG_CONFIG_HOME/rofi
    stowdf rofi

    slog "rofi config done!"
}

amethyst_config_install() {
    slog "amethyst config"
    stowdf amethyst
    slog "amethyst config done!"

}

aerospace_config_install() {
    slog "aerospace config"
    stowdf aerospace
}

yazi_config_install() {
    slog "yazi config"

    srm $XDG_CONFIG_HOME/yazi
    smd $XDG_CONFIG_HOME/yazi
    stownf yazi
    slog "yazi config done!"
}

config_install() {
    bash_config_install
    has_cmd emacs && doom_install
    has_cmd code && vscode_config_install

    if ! has_cmd stow; then
        warn "stow not installed, skipping config"
        return 1
    fi

    stowdf wallpapers
    share_config_install
    bin_config_install

    has_cmd aerospace && aerospace_config_install
    has_cmd alacritty && alacritty_config_install
    has_cmd amethyst && amethyst_config_install
    has_cmd appman && appman_config_install
    has_cmd atuin && atuin_config_install
    has_cmd foot && foot_config_install
    has_cmd ghostty && ghostty_config_install
    has_cmd git && git_config_install
    has_cmd kitty && kitty_config_install
    has_cmd nvim && nvim_config_install
    has_cmd rofi && rofi_config_install
    has_cmd sway && sway_config_install
    has_cmd hypr && hypr_config_install
    has_cmd tmux && tmux_config_install
    has_cmd wezterm && wezterm_config_install
    has_cmd zsh && zsh_config_install
    if has_cmd yazi; then
        if has_cmd ya; then
            ya pack -a yazi-rs/flavors:catppuccin-frappe
            ya pack -u
        fi

        yazi_config_install
    fi
}

poetry_install() {
    has_cmd poetry && return 0

    slog "Installing poetry"
    if has_cmd python3; then
        curl -sSL https://install.python-poetry.org | python3 -
        smd ~/.zfunc
        poetry completions zsh > ~/.zfunc/_poetry
        slog "poetry installation done!"
    else
        warn "python3 not installed, skipping poetry"
    fi

    cmd_check poetry
}

pyenv_install() {
    has_cmd pyenv && return 0

    slog "Installing pyenv"
    sclone  https://github.com/yyuu/pyenv.git ~/.pyenv
    sclone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
    slog "pyenv installation done!"

    cmd_check pyenv

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
}

pyenv_anaconda_install() {
    if has_cmd pyenv; then
        if ! pyenv versions | grep anaconda > /dev/null; then
            slog "Installing anaconda"
            local anacondaversion=`pyenv install --list | grep anaconda | tail -1`
            pyenv install $anacondaversion
            smd ~/py
            if cd ~/py; then
                pyenv global $anacondaversion
                python -m pip install --user pipx neovim
                poetry_install
            else
                warn "~/py doesn't exist, skipping part of python install"
            fi
        fi
    else
        warn "pyenv not installed, skipping anaconda"
    fi

    cmd_check conda
}

pyenv_miniconda_install() {
    if has_cmd pyenv; then
        if ! pyenv versions | grep miniconda > /dev/null; then
            slog "Installing miniconda"
            local minicondaversion=`pyenv install --list | grep miniconda | tail -1`
            pyenv install $minicondaversion
            slog "miniconda installation done!"
        fi
    else
        warn "pyenv not installed, skipping miniconda"
    fi

    cmd_check conda
}

atomic_python_install() {
    slog "python setup"

    python3 -m ensurepip --user --default-pip
    python3 -m pip install --user --force-reinstall --upgrade pip
    cmd_check pip

    pip install --upgrade --force-reinstall pipx
    cmd_check pipx

    pip install --upgrade --force-reinstall uv
    cmd_check uv

    pipx install --force trash-cli
    cmd_check trash

    slog "python setup done!"
}

uv_install() {
    has_cmd uv && return 0

    if has_cmd pipx; then
        pipx install uv
    else
        curl -LsSf https://astral.sh/uv/install.sh | sh
    fi
}

mini_install() {
    pyenv_install
    pyenv_miniconda_install
}

anaconda_install() {
    pyenv_install
    pyenv_anaconda_install
}

devbox_install() {
    has_cmd devbox && return 0

    slog "Installing devbox"
    curl -fsSL https://get.jetify.com/devbox | bash

    slog "devbox installation done!"
}

pixi_install() {
    has_cmd pixi && return 0

    slog "Installing pixi"
    curl -fsSL https://pixi.sh/install.sh | bash
    slog "pixi installation done!"
}

tailscale_install() {
    has_cmd tailscale && return 0

    slog "Installing tailscale"
    curl -fsSL https://tailscale.com/install.sh | sh
    slog "tailscale installation done!"
}

portainer_install() {
    if ! has_cmd docker; then
        warn "docker not installed, skipping portainer"
        return 1
    fi

    if has_cmd docker && docker ps -a | grep -q portainer; then
        slog "Portainer is already installed"
        return 1
    fi

    if ! docker volume inspect portainer_data &>/dev/null; then
        slog "Creating portainer_data volume"
        docker volume create portainer_data
        docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

        slog "Portainer installation done!"
    fi
}

base-group_install() {
    core_install
    cmd_check gcc g++ make cmake curl wget git trash tree tar unzip stow

    dotfiles_install
    dir_check ~/.ilm

    stowdf wallpapers
    share_config_install
    bin_config_install
    bash_config_install
}

min-group_install() {
    base-group_install
    essential_install

    cmd_check micro webi zip unar gum
}

shell-group_install() {
    min-group_install
    shell_install

    cmd_check nvim gh neovim zsh tree-sitter tmux lazygit sd lsd bat fd
    cmd_check fzf ripgrep zoxide gum bat brew btm htop btm rg starship
    cmd_check eza fd fzf atuin delta
    # cmd_check cheat choose curlie direnv doggo dotenv  procs
    # cmd_check duf dust gawk gdu hyperfine jq just shellcheck shfmt yq

    has_cmd zsh && zsh_config_install
    has_cmd nvim && nvim_config_install
    has_cmd tmux && tmux_config_install
    if has_cmd yazi; then
        if has_cmd ya; then
            ya pack -a yazi-rs/flavors:catppuccin-frappe
            ya pack -u
        fi

        yazi_config_install
    fi
}

ct-group_install() {
    shell-group_install
    ct_install

    cmd_check incus docker podman distrobox
}

vm-group_install() {
    ct-group_install
    vm_install
}

work-group_install() {
    ct-group_install
    jetbrains_nerd_font_install
    vscode_install
    jetbrains
    flathub_install
    fpi org.wezfurlong.wezterm
    alias wezterm="flatpak run org.wezfurlong.wezterm"
    wezterm_config_install
}

desktop-group_install() {
    vm-group_install
    fonts_install
    ui_install

    tailscale_install

    has_cmd code && vscode_config_install
    has_cmd foot && foot_config_install
    has_cmd ghostty && ghostty_config_install
    has_cmd kitty && kitty_config_install
    has_cmd wezterm && wezterm_config_install
}

prog-group_install() {
    vm-group_install
    go_install
    rust_install
    pnpm_install
    python_install

    cmd_check go rustc pnpm uv pyenv conda
}

all-group_install() {
    prog-group_install
    pixi_install
    emacs_install

    cmd_check pixi emacs
}

is_gnome() {
    [[ -n "$XDG_CURRENT_DESKTOP" && "$XDG_CURRENT_DESKTOP" == "GNOME" ]] || [[ -n "$XDG_CURRENT_DESKTOP" && "$XDG_CURRENT_DESKTOP" == "GNOME-Shell" ]]
}

is_kde() {
    [[ -n "$XDG_CURRENT_DESKTOP" && "$XDG_CURRENT_DESKTOP" == "KDE" ]]
}

is_hyprland() {
    [[ -n "$XDG_CURRENT_DESKTOP" && "$XDG_CURRENT_DESKTOP" == "Hyprland" ]]
}

# https://github.com/basecamp/omakub/blob/master/install/desktop/set-gnome-extensions.sh
gnome_config_install() {
    si gnome-shell-extension-manager gnome-tweak-tool gnome-sushi gnome-software-plugin-flatpak
    pipx install gnome-extensions-cli --system-site-packages

    # xdg-settings set default-web-browser google-chrome.desktop

    # Turn off default Ubuntu extensions
    gnome-extensions disable tiling-assistant@ubuntu.com
    gnome-extensions disable ubuntu-appindicators@ubuntu.com
    gnome-extensions disable ubuntu-dock@ubuntu.com
    -extensions disable ding@rastersoft.com

    # Install new extensions
    gext install tactile@lundal.io
    gext install just-perfection-desktop@just-perfection
    gext install blur-my-shell@aunetx
    gext install space-bar@luchrioh
    gext install undecorate@sun.wxg@gmail.com
    gext install tophat@fflewddur.github.io
    gext install AlphabeticalAppGrid@stuarthayhurst

    # Compile gsettings schemas in order to be able to set them
    sudo cp ~/.local/share/gnome-shell/extensions/tactile@lundal.io/schemas/org.gnome.shell.extensions.tactile.gschema.xml /usr/share/glib-2.0/schemas/
    sudo cp ~/.local/share/gnome-shell/extensions/just-perfection-desktop\@just-perfection/schemas/org.gnome.shell.extensions.just-perfection.gschema.xml /usr/share/glib-2.0/schemas/
    sudo cp ~/.local/share/gnome-shell/extensions/blur-my-shell\@aunetx/schemas/org.gnome.shell.extensions.blur-my-shell.gschema.xml /usr/share/glib-2.0/schemas/
    sudo cp ~/.local/share/gnome-shell/extensions/space-bar\@luchrioh/schemas/org.gnome.shell.extensions.space-bar.gschema.xml /usr/share/glib-2.0/schemas/
    sudo cp ~/.local/share/gnome-shell/extensions/tophat@fflewddur.github.io/schemas/org.gnome.shell.extensions.tophat.gschema.xml /usr/share/glib-2.0/schemas/
    sudo cp ~/.local/share/gnome-shell/extensions/AlphabeticalAppGrid\@stuarthayhurst/schemas/org.gnome.shell.extensions.AlphabeticalAppGrid.gschema.xml /usr/share/glib-2.0/schemas/
    sudo glib-compile-schemas /usr/share/glib-2.0/schemas/

    # Configure Tactile
    gsettings set org.gnome.shell.extensions.tactile col-0 1
    gsettings set org.gnome.shell.extensions.tactile col-1 2
    gsettings set org.gnome.shell.extensions.tactile col-2 1
    gsettings set org.gnome.shell.extensions.tactile col-3 0
    gsettings set org.gnome.shell.extensions.tactile row-0 1
    gsettings set org.gnome.shell.extensions.tactile row-1 1
    gsettings set org.gnome.shell.extensions.tactile gap-size 32

    # Configure Just Perfection
    gsettings set org.gnome.shell.extensions.just-perfection animation 2
    gsettings set org.gnome.shell.extensions.just-perfection dash-app-running true
    gsettings set org.gnome.shell.extensions.just-perfection workspace true
    gsettings set org.gnome.shell.extensions.just-perfection workspace-popup false

    # Configure Blur My Shell
    gsettings set org.gnome.shell.extensions.blur-my-shell.appfolder blur false
    gsettings set org.gnome.shell.extensions.blur-my-shell.lockscreen blur false
    gsettings set org.gnome.shell.extensions.blur-my-shell.screenshot blur false
    gsettings set org.gnome.shell.extensions.blur-my-shell.window-list blur false
    gsettings set org.gnome.shell.extensions.blur-my-shell.panel blur false
    gsettings set org.gnome.shell.extensions.blur-my-shell.overview blur true
    gsettings set org.gnome.shell.extensions.blur-my-shell.overview pipeline 'pipeline_default'
    gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock blur true
    gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock brightness 0.6
    gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock sigma 30
    gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock static-blur true
    gsettings set org.gnome.shell.extensions.blur-my-shell.dash-to-dock style-dash-to-dock 0

    # Configure Space Bar
    gsettings set org.gnome.shell.extensions.space-bar.behavior smart-workspace-names false
    gsettings set org.gnome.shell.extensions.space-bar.shortcuts enable-activate-workspace-shortcuts false
    gsettings set org.gnome.shell.extensions.space-bar.shortcuts enable-move-to-workspace-shortcuts true
    gsettings set org.gnome.shell.extensions.space-bar.shortcuts open-menu "@as []"

    # Configure TopHat
    gsettings set org.gnome.shell.extensions.tophat show-icons false
    gsettings set org.gnome.shell.extensions.tophat show-cpu false
    gsettings set org.gnome.shell.extensions.tophat show-disk false
    gsettings set org.gnome.shell.extensions.tophat show-mem false
    gsettings set org.gnome.shell.extensions.tophat network-usage-unit bits

    # Configure AlphabeticalAppGrid
    gsettings set org.gnome.shell.extensions.alphabetical-app-grid folder-order-position 'end'

    # gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
    # gsettings set org.gnome.desktop.interface icon-theme 'Adwaita-dark'
    # gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
    # gsettings set org.gnome.desktop.interface text-scaling-factor 1
    # gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
}

plasma_major_version() {
    has_cmd plasmashell && plasmashell --version | cut -d' ' -f2 | cut -d'.' -f1
}

gnome_major_version() {
    has_cmd gnome-shell && gnome-shell --version | cut -d' ' -f3 | cut -d'.' -f1
}

kwin_script_install() {
    local SCRIPT="$1"

    if plasmapkg2 -t kwinscript -l | grep -q "krohnkite"; then
        echo "Upgrading KWin script $SCRIPT ..."
        plasmapkg2 -t kwinscript -u "$SCRIPT"
    else
        echo "Installing KWin script $SCRIPT ..."
        plasmapkg2 -t kwinscript -i "$SCRIPT"
    fi
}

kde_settings() {
    if ! is_kde; then
        warn "Not running KDE, skipping KDE settings"
        return 1
    fi

    if ! [[ $(plasma_major_version) -eq 6 ]]; then
        warn "KDE Plasma 6 is required"
        return 1
    fi

    kwin_script_install "krohnkite.kwinscript"
}

# https://github.com/basecamp/omakub/blob/master/install/desktop/set-gnome-hotkeys.sh
gnome_keybindings() {
    # Alt+F4 is very cumbersome
    gsettings set org.gnome.desktop.wm.keybindings close "['<Super>w']"

    # Make it easy to maximize like you can fill left/right
    gsettings set org.gnome.desktop.wm.keybindings maximize "['<Super>Up']"

    # Make it easy to resize undecorated windows
    gsettings set org.gnome.desktop.wm.keybindings begin-resize "['<Super>BackSpace']"

    # For keyboards that only have a start/stop button for music, like Logitech MX Keys Mini
    gsettings set org.gnome.settings-daemon.plugins.media-keys next "['<Shift>AudioPlay']"

    # Full-screen with title/navigation bar
    gsettings set org.gnome.desktop.wm.keybindings toggle-fullscreen "['<Shift>F11']"

    # Use 6 fixed workspaces instead of dynamic mode
    gsettings set org.gnome.mutter dynamic-workspaces false
    gsettings set org.gnome.desktop.wm.preferences num-workspaces 6

    # Use alt for pinned apps
    gsettings set org.gnome.shell.keybindings switch-to-application-1 "['<Alt>1']"
    gsettings set org.gnome.shell.keybindings switch-to-application-2 "['<Alt>2']"
    gsettings set org.gnome.shell.keybindings switch-to-application-3 "['<Alt>3']"
    gsettings set org.gnome.shell.keybindings switch-to-application-4 "['<Alt>4']"
    gsettings set org.gnome.shell.keybindings switch-to-application-5 "['<Alt>5']"
    gsettings set org.gnome.shell.keybindings switch-to-application-6 "['<Alt>6']"
    gsettings set org.gnome.shell.keybindings switch-to-application-7 "['<Alt>7']"
    gsettings set org.gnome.shell.keybindings switch-to-application-8 "['<Alt>8']"
    gsettings set org.gnome.shell.keybindings switch-to-application-9 "['<Alt>9']"

    # Use super for workspaces
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-1 "['<Super>1']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-2 "['<Super>2']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-3 "['<Super>3']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-4 "['<Super>4']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-5 "['<Super>5']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-6 "['<Super>6']"

    # Reserve slots for custom keybindings
    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/']"

    # Set ulauncher to Super+Space
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source "@as []"
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'ulauncher-toggle'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'ulauncher-toggle'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Super>space'

    # Set flameshot (with the sh fix for starting under Wayland) on alternate print screen key
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ name 'Flameshot'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ command 'sh -c -- "flameshot gui"'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ binding '<Control>Print'

    # Start a new alacritty window (rather than just switch to the already open one)
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ name 'alacritty'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ command 'alacritty'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ binding '<Shift><Alt>2'

    # Start a new Chrome window (rather than just switch to the already open one)
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ name 'new chrome'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ command 'google-chrome'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ binding '<Shift><Alt>1'
}

# https://github.com/basecamp/omakub/blob/master/install/desktop/set-gnome-settings.sh
more_gnome_settings() {
    # Center new windows in the middle of the screen
    gsettings set org.gnome.mutter center-new-windows true

    # Set Cascadia Mono as the default monospace font
    gsettings set org.gnome.desktop.interface monospace-font-name 'CaskaydiaMono Nerd Font 10'

    # Reveal week numbers in the Gnome calendar
    gsettings set org.gnome.desktop.calendar show-weekdate true
}

ulauncher_install() {
    sudo add-apt-repository universe -y
    sudo add-apt-repository ppa:agornostal/ulauncher -y
    sudo apt update -y
    sudo apt install -y ulauncher

    # Start ulauncher to have it populate config before we overwrite
    mkdir -p ~/.config/autostart/
    cp ~/.local/share/omakub/configs/ulauncher.desktop ~/.config/autostart/ulauncher.desktop
    gtk-launch ulauncher.desktop >/dev/null 2>&1
    sleep 2 # ensure enough time for ulauncher to set defaults
    cp ~/.local/share/omakub/configs/ulauncher.json ~/.config/ulauncher/settings.json
}

gnome_settings() {
    if ! is_gnome; then
        warn "Not running GNOME, skipping GNOME keybindings"
        return 1
    fi

    if [[ $(gnome_major_version) -lt 47 ]]; then
        warn "GNOME 47 or later is required"
        return 1
    fi

    gnome_keybindings
    gnome_config_install
    more_gnome_settings
}

sway_config_install() {
    has_cmd sway && stowdf sway
    has_cmd waybar && stowdf waybar

    has_cmd pip || has_cmd python3 && python3 -m ensurepip --user --default-pip

    if ! has_cmd pip; then
        warn "pip not installed, cannot install autotiling"
        return 1
    fi

    pip install --user --force-reinstall --upgrade i3ipc
    pip install --user --force-reinstall --upgrade autotiling
}

hypr_config_install() {
    slog "hypr config install"
    srm ~/.config/hypr
    srm ~/.config/waybar
    stowdf hypr
    stowdf hypr-waybar
    slog "hypr config done!"
}

}

dbox_ubuntu() {
    smd ~/homes
    distrobox create --yes --image ubuntu:latest --home /home/pervez/homes/ubuntu --name ubuntu
}

dbox_arch() {
    smd ~/homes
    distrobox create --yes --image archlinux:latest --home /home/pervez/homes/arch --name arch
}

dbox_fedora() {
    smd ~/homes
    distrobox create --yes --image fedora:latest --home /home/pervez/homes/fedora --name fedora
}

dbox_centos() {
    smd ~/homes
    distrobox create --yes --image centos:latest --home /home/pervez/homes/centos --name centos
}

dbox_debian() {
    smd ~/homes
    distrobox create --yes --image debian:latest --home /home/pervez/homes/debian --name debian
}

dbox_rocky() {
    smd ~/homes
    distrobox create --yes --image  quay.io/rockylinux/rockylinux:9 --home /home/pervez/homes/rocky --name rocky
}

dbox_tumbleweed() {
    smd ~/homes
    distrobox create --yes --image opensuse/tumbleweed --home /home/pervez/homes/tw --name tw
}

dbox_bluefin() {
    smd ~/homes
    distrobox create --yes --image ghcr.io/ublue-os/bluefin-cli --home /home/pervez/homes/bluefin-cli --name bluefin-cli
}

dbox_wolfi() {
    smd ~/homes
    distrobox create --yes --image ghcr.io/ublue-os/wolfi-toolbox --home /home/pervez/homes/wolfi-ublue --name wolfi-ublue
}

dbox_ublue_all() {
    smd ~/homes
    dbox_bluefin
    dbox_wolfi

    distrobox create --yes --image ghcr.io/ublue-os/ubuntu-toolbox --home /home/pervez/homes/ubuntu-ublue --name ubuntu-ublue
    distrobox create --yes --image ghcr.io/ublue-os/fedora-toolbox --home /home/pervez/homes/fedora-ublue --name fedora-ublue
    distrobox create --yes --image ghcr.io/ublue-os/arch-distrobox --home /home/pervez/homes/arch-ublue --name arch-ublue
}

dbox_toolbox_all() {
    smd ~/homes
    distrobox create --yes --image ubuntu-toolbox:latest --home /home/pervez/homes/ubuntu-toolbox --name ubuntu-toolbox
    distrobox create --yes --image fedora-toolbox:latest --home /home/pervez/homes/fedora-toolbox --name fedora-toolbox
    distrobox create --yes --image arch-toolbox:latest --home /home/pervez/homes/arch-toolbox --name arch-toolbox
    distrobox create --yes --image centos-toolbox:latest --home /home/pervez/homes/centos-toolbox --name centos-toolbox
    distrobox create --yes --image debian-toolbox:latest --home /home/pervez/homes/debian-toolbox --name debian-toolbox
    distrobox create --yes --image rockylinux-toolbox:9 --home /home/pervez/homes/rockylinux-toolbox --name rockylinux-toolbox
}

dbox_apline_init() {
    local CONTAINER_NAME=${1:-alpine-init}
    smd ~/homes
    distrobox create --yes --image alpine:latest --init --additional-packages "openrc" --name $CONTAINER_NAME --home ~/homes/${CONTAINER_NAME}
}

dbox_debian_init() {
    local CONTAINER_NAME=${1:-debian-init}
    smd ~/homes
    distrobox create --yes --image debian:stable --init --additional-packages "systemd libpam-systemd pipewire-audio-client-libraries" --name $CONTAINER_NAME --home ~/homes/${CONTAINER_NAME}
}

dbox_ubuntu_init() {
    local CONTAINER_NAME=${1:-ubuntu-init}
    smd ~/homes
    distrobox create --yes --image ubuntu:latest --init --additional-packages "systemd libpam-systemd pipewire-audio-client-libraries" --name $CONTAINER_NAME --home ~/homes/${CONTAINER_NAME}
}

dbox_arch_init() {
    local CONTAINER_NAME=${1:-arch-init}
    smd ~/homes
    distrobox create --yes --image archlinux:latest --init --additional-packages "systemd" --name $CONTAINER_NAME --home ~/homes/${CONTAINER_NAME}
}

dbox_tw_init() {
    local CONTAINER_NAME=${1:-tw-init}
    smd ~/homes
    distrobox create --yes --image registry.opensuse.org/opensuse/tumbleweed:latest --init --additional-packages "systemd" --name $CONTAINER_NAME --home ~/homes/${CONTAINER_NAME}
}

dbox_fedora_init() {
    local CONTAINER_NAME=${1:-fedora-init}
    smd ~/homes
    distrobox create --yes --image registry.fedoraproject.org/fedora:latest --init --additional-packages "systemd" --name $CONTAINER_NAME --home ~/homes/${CONTAINER_NAME}
}

dbox_with_init() {
    smd ~/homes

    dbox_ubuntu_init
    dbox_debian_init
    dbox_arch_init
    dbox_tw_init
    dbox_fedora_init
}

toolbox_create_all() {
    slog "Creating toolbox containers"

    smd ~/homes
    is_arch || toolbox create --assumeyes --distro arch arch
    is_fedora || toolbox create --assumeyes --distro fedora fedora
    is_ubuntu || toolbox create --assumeyes --distro ubuntu --release 24.10 ubuntu
    # toolbox create --distro rhel --release 9.5 rhel

    is_suse || toolbox create --assumeyes --image registry.opensuse.org/opensuse/toolbox:latest tw
    is_rocky || toolbox create --assumeyes --image quay.io/rockylinux/rockylinux:9 rocky
    # is_centos || toolbox create --image quay.io/toolbx-images/centos-toolbox:latest centos

    toolbox create

    slog "Done creating toolbox containers"
}

function safe_push() {
    git stash -u && git push "$@" && git stash pop
}

one_shell_tmux() {
    local tmux_session="default"

    [[ -n "$TMUX" || -n "$EMACS" || -n "$INSIDE_EMACS" || -n "$VIM" || -n "$VSCODE_RESOLVING_ENVIRONMENT" || "$TERM_PROGRAM" == "vscode" ]] && return

    tmux start-server

    # Check and create session if not exists
    if ! tmux has-session -t "$tmux_session" 2>/dev/null; then
        tmux new-session -d -s "$tmux_session"
    fi

    exec tmux attach-session -t "$tmux_session"
}

dbox_nvidia_container_toolkit() {
    smd ~/homes
    if has_cmd podman; then
        distrobox create --yes --name example-nvidia-toolkit --additional-flags "--gpus all" --image docker.io/nvidia/cuda
    elif has_cmd docker; then
        distrobox create --yes --name example-nvidia-toolkit --additional-flags "--gpus all --device=nvidia.com/gpu=all" --image docker.io/nvidia/cuda
    else
        warn "podman or docker not found"
    fi
}

dbox_to_image() {
    smd ~/homes
    if has_cmd podman; then
        podman container commit -p dbox_name $1
        podman save $1:latest | bzip2 > $1.tar.bz
    elif has_cmd docker; then
        docker container commit -p dbox_name $1
        docker save $1:latest | gzip > $1.tar.gz
    fi
}

dbox_from_image() {
    local dbox_name=${1:dbox}
    smd ~/homes
    distrobox create --yes --image $1:latest --name $dbox_name
    distrobox enter --name $dbox_name
}


dbox_nix() {
    local CONTAINER_NAME=${1:-deb-nix}
    srm ~/homes/${CONTAINER_NAME}

    distrobox create --yes --name ${CONTAINER_NAME} -i debian:stable --init --additional-packages "systemd libpam-systemd" --home ~/homes/${CONTAINER_NAME}

    distrobox enter ${CONTAINER_NAME} -- curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | -s -- install --no-confirm
}
